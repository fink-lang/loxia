babel_traverse = import '@babel/traverse'
{default: traverse} = babel_traverse

{transformFromAstSync} = import '@babel/core'
{try_catch} = import '@fink/js-interop/errors.fnk'

{transform} = import './ir/transform.fnk'
{init_ctx} = import './ir/init.fnk'
{optimize} = import './optimize/init.fnk'
{transform_ir} = import './js/init.fnk'
{module_transforms} = import './js/module/init.fnk'
{transform_async} = import './js/async/init.fnk'

{timed, log_timings} = import './perf.fnk'



transform_file = fn fink_ast, code, filename, options:
  ctx = init_ctx code, filename, options

  [error, [js_ast]=[]] = try_catch fn:
    [lir] = (timed transform) fink_ast, 'mod', ctx
    [olir] = (timed optimize) lir, options
    {js} = (timed transform_ir) olir, options
    [js]

  # log_timings 'transform ${filename}'

  extras = match options:
    {module_type: 'cjs'}: module_transforms
    else: {}

  match error:
    false:
      traverse js_ast, rec:
        AwaitExpression: {enter: transform_async}
        ...extras

      {...js_ast, errors: []}
    else:
      {errors: [error]}



babel_generate = fn ast, filename, source, options:
  {babel={babelrc: false, configFile: false}, source_maps} = options

  babel_opts = rec:
    filename
    sourceFileName: filename
    sourceMaps: source_maps
    ...babel

  [error, result] = try_catch fn:
    {code, map: source_map} = transformFromAstSync ast, source, babel_opts
    {code, source_map, errors: []}

  match error:
    false:
      result
    else:
      {code: '', source_map: '', errors: [error]}



generate = fn ast, filename, source, options={}:
  js_ast = transform_file ast, source, filename, options

  match js_ast:
    {errors: [?]}:
      {code: '', source_map: '', errors: js_ast.errors}
    else:
      babel_generate js_ast, filename, source, options

