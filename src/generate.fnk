babel_traverse = import '@babel/traverse'
{default: traverse} = babel_traverse

{transformFromAstSync} = import '@babel/core'
{is_empty} = import '@fink/std-lib/iter.fnk'

{transform_ast} = import './lang/init.fnk'

{transform_do_expr} = import './js/do-expression.fnk'
{transform_async} = import './js/async.fnk'
{module_transforms} = import './js/module.fnk'



transform = fn node, code, filename, options:
  ast = transform_ast node, code, filename, options

  extras = match options:
    {module_type: 'cjs'}: module_transforms
    else: {}

  match ast:
    {errors: is_empty ?}:
      traverse ast, dict:
        DoExpression: transform_do_expr
        AwaitExpression: {enter: transform_async}
        ...extras
  ast



babel_generate = fn ast, filename, source, options:
  {babel={babelrc: false, configFile: false}, source_maps} = options

  babel_opts = dict:
    filename
    sourceFileName: filename
    sourceMaps: source_maps
    ...babel

  [error, result] = try:
    {code, map: source_map} = transformFromAstSync ast, source, babel_opts
    {code, source_map, errors: []}

  match error:
    false:
      result
    else:
      {code: '', source_map: '', errors: [error]}



generate = fn ast, filename, source, options={}:
  js_ast = transform ast, source, filename, options

  match js_ast:
    {errors: [{}]}:
      {code: '', source_map: '', errors: js_ast.errors}
    else:
      babel_generate js_ast, filename, source, options







