babel_types = import '@babel/types'
{identifier} = babel_types

{escape_ident} = import '../../js/identifier.fnk'
{add} = import '../context.fnk'
{transform} = import '../transform.fnk'



has_partial = fn exprs:
  [partial=false] = pipe exprs:
    map expr: is_partial expr
    filter partial: partial
  partial



is_partial = fn node:
  match node:
    {type: 'partial'}: true
    {left: is_partial ?}: true
    {right: is_partial ?}: true
    {type: 'call', callee: is_partial ?}: true
    {type: 'call'}: has_partial node.args
    {type: 'list'}: has_partial node.exprs
    {type: 'rec'}: has_partial node.exprs
    else: false



transform_value = fn node, ctx:

  partial_or_node = match node:
    is_partial ?:
      dict:
        type: 'func'
        op: 'fn'
        args: [{type: 'partial', value: '?'}]
        exprs: [node]
        comments: node.comments
        loc: node.loc
    else:
      node

  transform partial_or_node, ctx



transform_partial = fn {value}, ctx:
  {partial_ident} = ctx

  name = match partial_ident:
    {name: {}}:
      partial_ident.name
    else:
      escape_ident value, ctx

  js = identifier name

  [js, ctx]



add_partial = fn ctx:
  pipe ctx:
    add 'partial', '?', transform_partial
