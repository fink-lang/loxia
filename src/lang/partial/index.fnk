{identifier} = import '@babel/types'

{escape_ident} = import '../../js/identifier'
{add} = import '../context'


has_partial = fn exprs:
  pipe exprs:
    map expr: is_partial expr
    find partial: partial


is_partial = fn node:
  match node:
    {type: 'partial'}: true
    {left: is_partial ?}: true
    {right: is_partial ?}: true
    {type: 'call', callee: is_partial ?}: true
    {type: 'call'}: has_partial node.args,
    {type: 'array'}: has_partial node.exprs
    {type: 'object'}: has_partial node.exprs
    else: false


transform_value = fn node, {transform}:
  partial_or_node = match node:
    is_partial ?:
      dict:
        type: 'func'
        op: 'fn'
        args: [{type: 'partial', value: '?'}]
        exprs: [node]
        comments: node.comments
        loc: node.loc
    else:
      node

  transform partial_or_node


transform_partial = fn {value}, {partial_ident}:
  name = match partial_ident || null:
    null:
      escape_ident value
    else:
      partial_ident.name

  identifier name


add_partial = fn ctx:
  pipe ctx:
    add 'partial', '?', transform_partial
