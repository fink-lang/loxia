{count} = import '@fink/std-lib/iter.fnk'

{unique_ident} = import '../js/types.fnk'

{transform} = import './transform.fnk'

{add_assignment} = import './assignment/init.fnk'
{add_func} = import './func/init.fnk'
{add_conditionals} = import './conditionals/init.fnk'
{add_iterables} = import './iterable/init.fnk'
{add_call} = import './call/init.fnk'
{add_literals} = import './literals/init.fnk'
{add_spread} = import './spread/init.fnk'
{add_async} = import './async/init.fnk'
{add_logical} = import './logical/init.fnk'
{add_group} = import './group/init.fnk'
{add_module} = import './module/init.fnk'
{add_member} = import './prop-access/init.fnk'
{add_ident} = import './identifier/init.fnk'
{add_comparison} = import './comparison/init.fnk'
{add_jsx} = import './jsx/init.fnk'
{add_js_compat} = import './js-compat/init.fnk'
{add_arithmitic} = import './arithmitic/init.fnk'
{add_block} = import './block/init.fnk'
{add_partial} = import './partial/init.fnk'


add_transformers = fn ctx:
  pipe ctx:
    add_module
    add_ident
    add_partial
    add_literals
    add_group
    add_member
    add_logical
    add_comparison
    add_arithmitic
    add_assignment
    add_spread
    add_async
    add_func
    add_conditionals
    add_iterables
    add_call
    add_async
    add_jsx
    add_block
    add_js_compat


init_ctx = fn code, filename:
  id_cntr = count 1

  ctx = dict:
    filename
    code
    errors: []

    unique_id: 0
    ident_prefix: 'Ë†'

    unique_ident: fn name:
      # console.log 'unique_ident', name
      # TODO: return ident and new ctx to make it not stateful
      {ident_prefix} = ctx
      {value: unique_id} = id_cntr.next _
      [ident] = unique_ident name, {ident_prefix, unique_id}
      ident

  pipe ctx:
    add_transformers



transform_ast = fn expr, code, filename, options:
  ctx = init_ctx code, filename
  [js_ast, end_ctx] = transform expr, {...ctx, options}

  # TODO: why can js_ast be an error, why not just use end_ctx?
  match js_ast:
    {error: {}}:
      {errors: end_ctx.errors}
    else:
      {...js_ast, errors: []}


