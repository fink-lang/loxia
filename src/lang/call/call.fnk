{callExpression, identifier} = import '@babel/types'
{is_empty, length} = import '@fink/std-lib/iter.fnk'


transform_args = fn args, {transform}:
  pipe args:
    map expr:
      match expr:
        {type: 'empty'}:
          identifier 'undefined'
        else:
          transform expr



transform_single_arg = fn [expr], {transform}:
  match expr:
    {type: 'empty'}: []
    # remove in favour of using _ as empty?
    {type: 'group', exprs: is_empty ?}: []
    else: [transform expr]



transform_call = fn node, ctx:
  callee = ctx.transform node.callee

  args = match node.args:
    1 == length ?:
      transform_single_arg node.args, ctx
    else:
      transform_args node.args, ctx

  callExpression callee, [...args]

