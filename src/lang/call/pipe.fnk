{callExpression} = import'@babel/types'
{is_empty} = import'@fink/std-lib/iter'

{assign, lets, expr_block, undef} = import '../../js/types.fnk'
{transform_value} = import '../partial/init.fnk'
{wrap_with_comment_loc} = import '../comments/init.fnk'



transform_pipe = fn node, ctx:
  {transform, unique_ident} = ctx
  {exprs} = node

  start_value = match node.args:
    is_empty ?:
      undef _
    else:
      [arg] = node.args
      transform arg

  result = unique_ident 'pipe_result'

  pipe_calls = pipe exprs:
    map expr:
      wrap_with_comment_loc
        assign
          result
          callExpression
            transform_value expr, ctx
            [result]
        expr

  expr_block
    wrap_with_comment_loc
      lets result, start_value
      start_value
    ...pipe_calls

