{callExpression} = import'@babel/types'

{assign, lets, expr_block, nul} = import '../../js/types'
{transform_value} = import '../partial'

transform_pipe = fn node, ctx:
  {transform, unique_ident} = ctx
  {exprs} = node

  start_value = match node.args:
    {length: 0}:
      nul()
    else:
      [arg] = node.args
      transform arg

  result = unique_ident 'pipe_result'

  pipe_calls = pipe exprs:
    map expr:
      assign
        result
        callExpression
          transform_value expr, ctx
          [result]

  expr_block
    # TODO: first should not be called with anything if there is no start_value
    lets result, start_value
    ...pipe_calls

