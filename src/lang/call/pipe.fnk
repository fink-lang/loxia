babel_types = import '@babel/types'
{callExpression} = babel_types
{is_empty} = import '@fink/std-lib/iter.fnk'

{assign, lets, expr_block, undef, unique_ident} = import '../../js/types.fnk'
{transform_value} = import '../partial/init.fnk'
{wrap_with_comment_loc} = import '../comments/init.fnk'
{transform, map_with_ctx, collect_with_ctx} = import '../transform.fnk'



transform_callee = fn result: fn expr, ctx:
  [callee, next_ctx] = transform_value expr, ctx

  js = wrap_with_comment_loc
    assign result, callExpression callee, [result]
    expr

  [js, next_ctx]



transform_pipe = fn node, ctx:
  {exprs} = node

  [start_value, id_ctx] = match node.args:
    is_empty ?:
      [(undef _), ctx]
    else:
      [arg] = node.args
      transform arg, ctx

  [result, pipe_ctx] = unique_ident 'pipe_result', id_ctx

  [pipe_calls, next_ctx] = pipe exprs:
    map_with_ctx transform_callee result
    collect_with_ctx pipe_ctx

  js = expr_block
    wrap_with_comment_loc
      lets result, start_value
      start_value
    ...pipe_calls

  [js, next_ctx]