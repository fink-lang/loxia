// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calculated props compiles 1`] = `
"export const foo = {
  [\`spam\`]: 456,
  [\`spam-\${ham}\`]: \`ni\`
};"
`;

exports[`record compiles idents that are not js prop-names 1`] = `
"export const foo = {
  foo: bar,
  π: 3.12,
  ƒ: \`fink\`,
  \\"foo-bar\\": spam
};"
`;

exports[`record compiles key:val 1`] = `
"export const foo = {
  a: 1,
  b: 123,
  [\`c-d-e\`]: cde
};"
`;

exports[`record compiles key:val 2`] = `
"export const obj7 = {
  a: 123,
  b: 123 && 123 && 1345,
  c: (a, b) => 134
};"
`;

exports[`record compiles member expr as keys 1`] = `
"let _do_result;

{
  let ˆrec_1 = { ...bar
  };
  ˆrec_1 = { ...ˆrec_1,
    spam: { ...ˆrec_1?.spam,
      ham: { ...ˆrec_1?.spam?.ham,
        ni: \`ni\`
      }
    }
  };
  ˆrec_1 = { ...ˆrec_1,
    na: 1234
  };
  ˆrec_1 = { ...ˆrec_1,
    ...nu
  };
  _do_result = ˆrec_1;
}
export const foo = _do_result;
_do_result = undefined;"
`;

exports[`record compiles member expr as keys 2`] = `
"let _do_result;

{
  let ˆrec_1 = { ...bar
  };
  ˆrec_1 = { ...ˆrec_1,
    spam: { ...ˆrec_1?.spam,
      ham: (() => {
        let ˆrec_2 = {};
        ˆrec_2 = { ...ˆrec_2,
          ni: { ...ˆrec_2?.ni,
            na: \`ni\`
          }
        };
        return ˆrec_2;
      })()
    }
  };
  ˆrec_1 = { ...ˆrec_1,
    ...nu
  };
  _do_result = ˆrec_1;
}
export const foo = _do_result;
_do_result = undefined;"
`;

exports[`record compiles multiline 1`] = `
"export const foo = {
  a: 123,
  b: 123 && 123 && 1345,
  c: (a, b) => 134,
  d: foo(a + 3)
};"
`;

exports[`record compiles multiline 2`] = `
"export const foo = {
  a: 123,
  b: 123 && 123 && 1345,
  c: (a, b) => 134,
  d: foo(a + 3)
};"
`;

exports[`record compiles shorthand 1`] = `
"export const foo = {
  foo,
  π,
  ƒ,
  \\"foo-bar\\": fooᜭbar
};"
`;

exports[`record compiles shorthand 2`] = `
"export const foo = {
  a,
  \\"delete\\": ˆdelete,
  true,
  false
};"
`;

exports[`record compiles shorthand 3`] = `
"export const foo = {
  [\`foo\`]: \`foo\`
};"
`;

exports[`record compiles simple 1`] = `"export const foo = {};"`;

exports[`record compiles spread 1`] = `
"export const foo = {
  a,
  b,
  ...c
};"
`;

exports[`unpacking record compiles computed keys 1`] = `
"const {
  [\`n i\`]: ni
} = foo;"
`;

exports[`unpacking record compiles defaults 1`] = `
"const {
  x = 1,
  π = 2,
  ni: {
    y,
    z
  }
} = {
  ni: {
    y: 1,
    z: 2
  }
};"
`;

exports[`unpacking record compiles empty 1`] = `
"const {
  foo: ˆunused_1,
  bar
} = {
  foo: 12,
  bar: 34
};"
`;

exports[`unpacking record compiles member expr as keys 1`] = `
"const {
  spam: {
    ham: {
      ni: ni
    }
  },
  ...rest
} = foo;"
`;

exports[`unpacking record compiles member expr as keys 2`] = `
"const {
  spam: {
    ham: {
      ni: {
        ni: nu,
        foo: {
          bar: bar
        }
      }
    }
  },
  ...rest
} = foo;"
`;

exports[`unpacking record compiles member expr as keys 3`] = `
"const {
  \\"foo-bar\\": {
    \\"spam-ham\\": {
      ni: {
        ni: nu,
        foo: {
          bar: bar
        }
      }
    }
  },
  ...rest
} = foo;"
`;

exports[`unpacking record compiles non js idents 1`] = `
"const {
  foo,
  π,
  ƒ,
  \\"delete\\": ˆdelete
} = spam;"
`;

exports[`unpacking record compiles simple 1`] = `
"const {
  a,
  b,
  c
} = ni;"
`;

exports[`unpacking record compiles spread 1`] = `
"const {
  e,
  ...f
} = {
  e: 0,
  foo: 12,
  bar: 34
};"
`;
