{objectExpression, objectProperty, stringLiteral, assignmentPattern} = import '@babel/types'


transform_object = fn node, ctx:
  [...props] = pipe node.exprs:
    map expr: ctx.transform:: expr

  objectExpression:: props


str_key = fn {value, loc}:
  str = stringLiteral:: value
  {...str, loc}


get_key = fn {key}, ctx:
  match key:
    {type: 'group'}:
      [true, ctx.transform:: key]
    {type: 'string'}:
      [true, ctx.transform:: key]
    else:
      [false, str_key:: key]


transform_prop = fn node, ctx:
  match node:
    {key: {type: 'spread'}}:
      ctx.transform:: node.key
    else:
      [computed, key] = get_key:: node, ctx
      value = ctx.transform:: node.value

      shorthand = node.key == node.value

      final_value = match node:
        {value: {type: 'assign'}}:
          assignmentPattern:: value.left, value.right
        else:
          value

      objectProperty:: key, final_value, computed, shorthand


