babel_types = import '@babel/types'
{templateElement, templateLiteral, taggedTemplateExpression} = babel_types
{rx, replace_all} = import '@fink/std-lib/regex.fnk'
{map, filter} = import '@fink/std-lib/iter.fnk'

{transform, drop_if, map_with_ctx, collect_with_ctx} = import '../transform.fnk'



transform_string = fn node, ctx:
  {exprs: parts, tag} = node

  quasies = pipe parts:
    # TODO filter ?.type == 'string:text'
    filter fn part:
      part.type == 'string:text'

    map fn part:
      templateElement rec:
        raw: replace_all
          part.value
          rx'\\([\s\S])|(`)'
          '\\$1$2'

  [expressions, next_ctx] = pipe parts:
    # TODO drop_if ?.type == 'string:text'
    drop_if fn {type}: type == 'string:text'
    map_with_ctx transform
    collect_with_ctx ctx

  templ_str = templateLiteral [...quasies], expressions

  match tag:
    false:
      [templ_str, next_ctx]
    else:
      [tag, end_ctx] = transform node.tag, next_ctx
      tagged_str = taggedTemplateExpression tag, templ_str
      [tagged_str, end_ctx]

