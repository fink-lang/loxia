{templateElement, templateLiteral, taggedTemplateExpression} = import '@babel/types'


transform_string = fn node, {transform}:
  [...quasies] = pipe node.parts.filter:: fn part, idx: idx % 2 == 0:
    map part: templateElement::
      {raw: part.value.replace(rx/\\([\s\S])|(`)/g, '\\$1$2')}


  [...expressions] = pipe node.parts.filter:: fn part, idx: idx % 2 == 1:
    map part:transform:: part

  templ_str = templateLiteral:: quasies, expressions
  {tag=null} = node

  match tag:
    null: templ_str
    else:
      taggedTemplateExpression::
        transform:: node.tag
        templ_str

