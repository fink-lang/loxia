{templateElement, templateLiteral, taggedTemplateExpression} = import '@babel/types'
{rx, replace_all} = import '@fink/std-lib/regex'


not_tagged = {tagged: false}


transform_string = fn node, {transform}:
  {exprs: parts, tag=not_tagged} = node

  [...quasies] = pipe parts:
    filter part: part.type == 'string:text'
    map part:
      templateElement dict:
        raw: replace_all
          part.value
          rx'\\([\s\S])|(`)'
          '\\$1$2'

  [...expressions] = pipe parts:
    filter part: part.type != 'string:text'
    map part: transform part

  templ_str = templateLiteral quasies, expressions

  # TODO: use simple string if no exprs and not tagged
  match tag:
    not_tagged:
      templ_str
    else:
      taggedTemplateExpression
        transform node.tag
        templ_str

