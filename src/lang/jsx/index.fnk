{
  jsxElement, jsxOpeningElement, jsxIdentifier, jsxClosingElement, jsxAttribute,
  stringLiteral, jsxExpressionContainer, jsxText
} = import '@babel/types'
{add, any} = import '../context'


transform_jsx_elem = fn node, {transform}:
  id = jsxIdentifier:: node.name
  [...attrs] = pipe node.props:
    map expr: transform:: expr

  [...children] = pipe node.children:
    map expr: transform:: expr

  jsxElement::
    jsxOpeningElement:: id, attrs, node.self_closing
    jsxClosingElement:: id
    children



transform_jsx_attr = fn node, {transform}:
  id = jsxIdentifier:: node.name

  value = match node.value:
    null: null
    else: transform:: node.value

  jsxAttribute:: id, value


transform_jsx_str = fn node:
  stringLiteral:: node.value


transform_jsx_text = fn node:
  jsxText:: node.value



transform_jsx_expr_container = fn node, {transform}:
  jsxExpressionContainer:: transform:: node.expr


add_jsx = fn ctx:
  pipe ctx:
    add:: 'jsx-elem', any, transform_jsx_elem
    add:: 'jsx-attr', any, transform_jsx_attr
    add:: 'jsx-string', any, transform_jsx_str
    add:: 'jsx-text', any, transform_jsx_text
    add:: 'jsx-expr-container', any, transform_jsx_expr_container

