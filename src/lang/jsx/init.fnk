babel_types = import '@babel/types'
{
  jsxElement, jsxOpeningElement, jsxIdentifier, jsxClosingElement, jsxAttribute
  stringLiteral, jsxExpressionContainer, jsxText, jsxFragment, jsxOpeningFragment
  jsxClosingFragment, jsxSpreadAttribute
} = babel_types

{length} = import '@fink/std-lib/iter.fnk'

{add, any} = import '../context.fnk'
{transform, collect_with_ctx} = import '../transform.fnk'



transform_exprs = fn exprs, ctx:
  pipe exprs:
    map expr, expr_ctx=ctx:
      [result, next_ctx] = transform expr, expr_ctx
      ([result, next_ctx], next_ctx)
    collect_with_ctx ctx



transform_jsx_elem = fn node, ctx:
  id = jsxIdentifier node.name

  # TODO: use transform_exprs with extra mapping func
  [attrs, children_ctx] = pipe node.props:
    map expr, expr_ctx= ctx:
      [attr, next_ctx] = match expr:
        {type: 'spread'}:
          [attr, next_ctx] = transform expr.right, expr_ctx
          spread = jsxSpreadAttribute attr
          [spread, next_ctx]
        else:
          transform expr, expr_ctx
      ([attr, next_ctx], next_ctx)

    collect_with_ctx ctx

  [children, next_ctx] = transform_exprs node.children, children_ctx

  js = jsxElement
    jsxOpeningElement id, attrs, node.self_closing
    jsxClosingElement id
    children

  [js, next_ctx]



transform_jsx_frag = fn node, ctx:
  [children, next_ctx] = transform_exprs node.children,  ctx

  js = jsxFragment
    jsxOpeningFragment _
    jsxClosingFragment _
    children

  [js, next_ctx]



transform_jsx_attr = fn node, ctx:
  {loc, name} = node

  [value, next_ctx] = match node:
    {value: {type: 'string', exprs: 1 == length ?}}:
      {exprs: [str]} = node.value
      [[stringLiteral str.value], ctx]

    {value: {type: 'jsx:expr'}}:
      [val, next_ctx] = transform node.value, ctx
      [[val], next_ctx]

    {value: {}}:
      [val, next_ctx] = transform node.value, ctx
      [[jsxExpressionContainer val], next_ctx]

    else:
      [val, next_ctx] = transform {type: 'ident', value: name, loc}, ctx
      [[jsxExpressionContainer val], next_ctx]

  id = jsxIdentifier name
  js = jsxAttribute id, ...value

  [js, next_ctx]



transform_jsx_text = fn node, ctx:
  js = jsxText node.value
  [js, ctx]



transform_jsx_expr_container = fn node, ctx:
  [val, next_ctx] = transform node.expr, ctx
  js = jsxExpressionContainer val
  [js, next_ctx]



add_jsx = fn ctx:
  pipe ctx:
    add 'jsx:frag', any, transform_jsx_frag
    add 'jsx:elem', any, transform_jsx_elem
    add 'jsx:attr', any, transform_jsx_attr
    add 'jsx:text', any, transform_jsx_text
    add 'jsx:expr', any, transform_jsx_expr_container

