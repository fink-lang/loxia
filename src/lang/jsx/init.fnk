babel_types = import '@babel/types'
{
  jsxElement, jsxOpeningElement, jsxIdentifier, jsxClosingElement, jsxAttribute
  stringLiteral, jsxExpressionContainer, jsxText, jsxFragment, jsxOpeningFragment
  jsxClosingFragment, jsxSpreadAttribute
} = babel_types

{length} = import '@fink/std-lib/iter.fnk'

{add, any} = import '../context.fnk'



transform_jsx_elem = fn node, {transform}:
  id = jsxIdentifier node.name

  [...attrs] = pipe node.props:
    map expr:
      match expr:
        {type: 'spread'}:
          jsxSpreadAttribute transform expr.right
        else:
          transform expr

  [...children] = pipe node.children:
    map expr: transform expr

  jsxElement
    jsxOpeningElement id, attrs, node.self_closing
    jsxClosingElement id
    children



transform_jsx_frag = fn node, {transform}:
  [...children] = pipe node.children:
    map expr: transform expr

  jsxFragment
    jsxOpeningFragment _
    jsxClosingFragment _
    children



transform_jsx_attr = fn node, {transform}:
  {loc, name} = node

  value = match node:
    {value: {type: 'string', exprs: 1 == length ?}}:
      {exprs: [str]} = node.value
      [stringLiteral str.value]

    {value: {type: 'jsx:expr'}}:
      [transform node.value]

    {value: {}}:
      [jsxExpressionContainer transform node.value]

    else:
      [jsxExpressionContainer transform {type: 'ident', value: name, loc}]

  id = jsxIdentifier name
  jsxAttribute id, ...value



transform_jsx_text = fn node:
  jsxText node.value



transform_jsx_expr_container = fn node, {transform}:
  jsxExpressionContainer transform node.expr



add_jsx = fn ctx:
  pipe ctx:
    add 'jsx:frag', any, transform_jsx_frag
    add 'jsx:elem', any, transform_jsx_elem
    add 'jsx:attr', any, transform_jsx_attr
    add 'jsx:text', any, transform_jsx_text
    add 'jsx:expr', any, transform_jsx_expr_container

