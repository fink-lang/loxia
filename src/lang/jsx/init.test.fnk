{fink2js} = import '../../testing/generate.fnk'
{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'


describe 'jsx', fn:
  it 'compiles shorthand', fn:
    expect
      fink2js 'elem = <a/>'
      to_match_snapshot


  it 'compiles with str params', fn:
    expect
      fink2js 'elem = <a foo bar="ni" />'
      to_match_snapshot

    expect
      fink2js "elem = <a foo bar='ni' />"
      to_match_snapshot


  it 'compiles with expr params', fn:
    expect
      fink2js 'elem = <a foo bar={1234} />'
      to_match_snapshot

    expect
      fink2js "elem = <a foo bar='ni' />"
      to_match_snapshot


  it 'compiles empty elem', fn:
    expect
      fink2js 'elem = <b></b>'
      to_match_snapshot


  it 'compiles with children and expr', fn:
    expect
      fink2js 'elem =
        <a>
          foo {ni}
          <b /> ham
          spam
          <c />
          ni
        </a>'
      to_match_snapshot


  it 'compiles fragment', fn:
    expect
      fink2js 'elem = <></>'
      to_match_snapshot


  it 'compiles fragment with children', fn:
    expect
      fink2js 'elem =
        <>
          foo
          <p>bar</p>
        </>'
      to_match_snapshot



describe 'JSX extensions',  fn:
  it 'compiles spread', fn:
    expect
      fink2js '<Foobar spam ...ham shrub />'
      to_match_snapshot


  it "compiles template str attr", fn:
    expect
      fink2js "<Foobar spam='ni: \${1 + 2}' />"
      to_match_snapshot


  it "compiles fink expr as attr values", fn:
    expect
      fink2js "<Foobar spam=ham shrub=1234 ni=-123> foo </Foobar>"
      to_match_snapshot


  it "compiles fink expr with gt comparison", fn:
    expect
      fink2js "<Foobar spam={foo > 123} shrub=1234> ni </Foobar>"
      to_match_snapshot


  it "compiles expr group with call for attr value", fn:
    expect
      fink2js "<Foobar spam=(ham ni) shrub=1234 />"
      to_match_snapshot

