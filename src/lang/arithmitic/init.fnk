babel_types = import '@babel/types'
{binaryExpression, unaryExpression} = babel_types

{add, any} = import '../context.fnk'
{transform} = import '../transform.fnk'


transform_op = rec:
  '^': '**'



transform_arithmitic = fn {op, left, right}, ctx:
  {(op): operator=op} = transform_op

  [left_js, right_ctx] = transform left, ctx
  [right_js, end_ctx] = transform right, right_ctx
  js = binaryExpression operator, left_js, right_js

  [js, end_ctx]



transform_unary = fn {op, right}, ctx:
  [right_js, next_ctx] = transform right, ctx
  js = unaryExpression op, right_js

  [js, next_ctx]



add_arithmitic = fn ctx:
  pipe ctx:
    add 'arithm', any, transform_arithmitic
    add 'arithm:right', any, transform_arithmitic
    add 'arithm:prefix', any, transform_unary

