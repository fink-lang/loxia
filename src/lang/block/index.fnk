{
  doExpression, blockStatement, isAssignmentExpression, expressionStatement
} = import '@babel/types'

{consts} = import '../../js/types'
{add, any} = import '../context'


block_statement = fn expr, {transform}:
  st = transform expr

  match st:
    isAssignmentExpression ?:
      decl = consts st.left, st.right
      {...decl, leadingComments: st.leadingComments}
    else:
      # TODO: check if isExpression ?: ...
      expressionStatement st


transform_block = fn node, ctx:
  {exprs} = node

  match exprs:
    {length: 1}:
      [expr] = exprs
      ctx.transform expr
    else:
      doExpression
        blockStatement list:
          ...pipe exprs:
            map expr: block_statement expr, ctx


add_block = fn ctx:
  pipe ctx:
    add 'block', any, transform_block

