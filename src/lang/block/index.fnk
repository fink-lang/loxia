{
  doExpression, blockStatement, isAssignmentExpression,
  expressionStatement, variableDeclaration, variableDeclarator
} = import '@babel/types'

{consts} = import '../../js/types'


block_statement = fn {transform}: fn expr:
  st = transform:: expr

  match st:
    isAssignmentExpression:: ?:
      decl = consts:: st.left, st.right
      {...decl, leadingComments: st.leadingComments}
    else:
      # TODO: check if (isExpression(st)) ...
      expressionStatement:: st


transform_block = fn node, ctx:
  {exprs} = node

  match exprs:
    {length: 1}:
      [expr] = exprs
      ctx.transform:: expr
    else:
      doExpression::
        blockStatement::
          # TODO: why map:: block_statement?
          exprs.map:: block_statement:: ctx

