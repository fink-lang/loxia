{
  doExpression, blockStatement, isAssignmentExpression, expressionStatement
  variableDeclaration, variableDeclarator
} = import '@babel/types'
{length} = import '@fink/std-lib/iter.fnk'

{add, any} = import '../context.fnk'
{wrap_with_comment_loc} = import '../comments/init.fnk'


block_statement = fn expr, {transform}:
  st = transform expr

  match st:
    isAssignmentExpression ?:
      wrap_with_comment_loc
        variableDeclaration
          'const'
          [variableDeclarator st.left, st.right]
        expr

    else:
      wrap_with_comment_loc
        expressionStatement st
        expr


transform_block = fn node, ctx:
  {exprs} = node

  match exprs:
    1 == length ?:
      [expr] = exprs
      ctx.transform expr
    else:
      doExpression
        blockStatement list:
          ...pipe exprs:
            map expr: block_statement expr, ctx


add_block = fn ctx:
  pipe ctx:
    add 'block', any, transform_block

