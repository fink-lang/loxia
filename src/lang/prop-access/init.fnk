babel_types = import '@babel/types'
{memberExpression, identifier} = babel_types

{escape_prop} = import '../../js/identifier.fnk'
{raw_str} = import '../../js/types.fnk'

{add, any} = import '../context.fnk'
{transform_with_partial} = import '../partial/init.fnk'


safe_prop_ident = fn {loc, value}, ctx :
  id = escape_prop value
  match id:
    value:
      [false, {loc, ...identifier id}, ctx]
    else:
      [true, {loc, ...raw_str value}, ctx]



transform_right = fn right, ctx, default_wrap_partial:
  match right:
    {type: 'ident'}:
      [computed, js, next_ctx] = safe_prop_ident right, ctx
      [computed, default_wrap_partial, js, next_ctx]
    # TODO add support for foo.?.bar and foo.(?).bar
    else:
      [wrap_partial, js, next_ctx] = transform_with_partial right, ctx, default_wrap_partial
      [true, wrap_partial, js, next_ctx]



transform_member = fn {left, right}, ctx:
  [wrap_l, memb_left, right_ctx] = transform_with_partial left, ctx
  [computed, wrap_partial, memb_right, next_ctx] = transform_right right, right_ctx, wrap_l

  js = memberExpression memb_left, memb_right, computed

  wrap_partial js, next_ctx



add_member = fn ctx:
  pipe ctx:
    add any, '.', transform_member
