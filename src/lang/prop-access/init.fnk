babel_types = import '@babel/types'
{memberExpression, identifier} = babel_types

{escape_prop} = import '../../js/identifier.fnk'
{raw_str} = import '../../js/types.fnk'

{add, any} = import '../context.fnk'
{transform} = import '../transform.fnk'



safe_prop_ident = fn {loc, value}, ctx :
  id = escape_prop value
  match id:
    value:
      [false, {loc, ...identifier id}, ctx]
    else:
      [true, {loc, ...raw_str value}, ctx]



transform_member = fn {left, right}, ctx:
  [memb_left, next_ctx] = transform left, ctx

  [computed, memb_right, end_ctx] = match right:
    {type: 'ident'}:
      safe_prop_ident right, next_ctx
    else:
      [true, ...transform right, next_ctx]

  js = memberExpression memb_left, memb_right, computed

  [js, end_ctx]



add_member = fn ctx:
  pipe ctx:
    add any, '.', transform_member
