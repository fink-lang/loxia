{memberExpression, identifier} = import '@babel/types'
{rx, matches} = import '@fink/std-lib/regex.fnk'

{raw_str} = import '../../js/types.fnk'

{add, any} = import '../context.fnk'



transform_member = fn {left, right}, {transform}:
  memb_left = transform left
  {loc, value} = right

  [computed, memb_right] = match right:
    {type: 'ident', value: matches ?, rx'^[$_\p{L}][$_\p{L}\p{N}]*'}:
      [false, {loc, ...identifier value}]
    {type: 'ident'}:
      [true, {loc, ...raw_str value}]
    else:
      [true, transform right]

  memberExpression memb_left, memb_right, computed



add_member = fn ctx:
  pipe ctx:
    add any, '.', transform_member
