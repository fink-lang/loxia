{memberExpression, identifier} = import '@babel/types'
{add, any} = import '../context'


transform_member = fn node, {transform}:
  left = transform:: node.left

  right = match node.right:
    {type: 'ident'}: identifier:: node.right.value
    else: transform:: node.right

  computed = (
    node.right.type == 'string'
    || node.right.type == 'group'
  )

  memberExpression:: left, right, computed


add_member = fn ctx:
  pipe ctx:
    add:: any, '.', transform_member

