{memberExpression, identifier} = import '@babel/types'
{add, any} = import '../context'


transform_member = fn {left, right}, {transform}:
  memb_left = transform left

  memb_right = match right:
    {type: 'ident'}: identifier right.value
    else: transform right

  computed = right.type in ['string', 'group']

  memberExpression memb_left, memb_right, computed


add_member = fn ctx:
  pipe ctx:
    add any, '.', transform_member

