{memberExpression} = import '@babel/types'
{add, any} = import '../context'


transform_member = fn node, ctx:
  left = ctx.transform(node.left)

  # TODO: right hand side can be an identifier that should not be escaped
  right = ctx.transform(node.right)

  computed = (
    node.right.type == 'string'
    || node.right.type == 'group'
  )

  memberExpression(left, right, computed)


add_member = fn ctx:
  pipe ctx:
    add(any, '.', transform_member)

