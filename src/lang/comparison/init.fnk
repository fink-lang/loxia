babel_types = import '@babel/types'
{binaryExpression, logicalExpression} = babel_types

{add, any} = import '../context.fnk'
{transform} = import '../transform.fnk'



transform_op = dict:
  '==': '==='
  '!=': '!=='



transform_comp = fn {op, left, right}, ctx:
  {(op): operator=op} = transform_op

  [bin_left, next_ctx] = transform left, ctx
  [bin_right, end_ctx] = transform right, next_ctx

  js = match left:
    {op: ? in ['<', '>', '<=', '>=', '==', '!=']}:
      logicalExpression '&&',
        bin_left
        binaryExpression operator, bin_left.right, bin_right
    else:
      binaryExpression operator, bin_left, bin_right

  [js, end_ctx]



add_comparison = fn ctx:
  pipe ctx:
    add 'comp', any, transform_comp

