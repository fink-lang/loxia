{
  arrayPattern, blockStatement, breakStatement, labeledStatement, objectPattern,
  objectProperty, expressionStatement, ifStatement,
  doExpression, stringLiteral, memberExpression, restElement,
  identifier
} = import '@babel/types'

{and, eq, not_nullish, typof, consts} = import '../../js/types'

{get_key} = import '../literals/object'
{is_array} = import '../literals/array'
{is_partial} = import '../partial'
{wrap_with_comment_loc} = import'../comments'


iter = fn value:
  symb = identifier:: 'Symbol'
  iterator = identifier:: 'iterator'
  symb_iter = memberExpression:: symb, iterator
  memberExpression:: value, symb_iter, true


is_iterable = fn value:
  and::
    not_nullish:: value
    eq::
      typof:: iter:: value
      stringLiteral:: 'function'


comp = fn id, expected, {partial_ident, transform, ...ctx}:
  value_ctx = {...ctx, partial_ident: id}
  value = transform:: expected, value_ctx

  match expected:
    is_partial:: ?: value
    else: eq:: id, value


match_props = fn props, emit_result, ctx, cond:
  [{id, prop}, ...rest] = props

  value = match prop:
    {value: {type: 'block', exprs: {length: 1}}}:
      {exprs: [expr]} = prop.value
      expr
    {key: {type: 'spread'}}:
      prop.key
    else:
      prop.value

  emit = match props:
    {length: 1}: emit_result
    else: fn: match_props:: rest, emit_result, ctx, cond

  match_condition:: id, value, emit, ctx, cond


match_obj = fn value, obj, emit_result, ctx, cond:
  [...id_props] = pipe obj.exprs:
    map prop:
      id = ctx.unique_ident:: 'p'
      {id, prop}

  decl = objectPattern::
    id_props.map:: fn {id, prop}:
      match prop:
        {key: {type: 'spread'}}:
          restElement:: id
        else:
          [key, computed] = get_key:: prop, ctx
          objectProperty:: key, id, computed

  ifStatement::
    not_nullish:: value
    match id_props:
      {length: 0}:
        emit_result()
      else:
        blockStatement:: [
          consts(decl, value),
          match_props:: id_props, emit_result, ctx, cond
        ]


match_elems = fn elems, emit_result, ctx, cond:
  [{id, value}, ...rest] = elems

  emit = match elems:
    {length: 1}: emit_result
    else: fn: match_elems:: rest, emit_result, ctx, cond

  match_condition:: id, value, emit, ctx, cond


get_array_decl = fn arr, id_elems, right, ctx:
  left = {
    type: 'array',
    exprs: id_elems.map(fn {id, value}:
      match value:
        # e.g. empty elems in [,, foo, bar]
        null: null
        # e.g. spread in [foo, ..., bar]
        {type: 'spread', right: null}:
          value
        # e.g. spread in [foo, ...bar, spam]
        {type: 'spread'}:
          ident = {type: 'ident', value: id.name}
          {...value, right: ident}
        else:
          {type: 'ident', value: id.name}
    ),
    loc: arr.loc
  }

  decl = ctx.transform:: {
    type: 'assign',
    op: '=',
    left,
    right: {type: 'ident', value: right.name, loc: arr.loc},
    loc: arr.loc
  }

  consts(decl.left, decl.right)


match_array = fn value, arr, emit_result, ctx, cond:
  [...id_elems] = pipe arr.exprs:
    map expr:
      id = ctx.unique_ident:: 'a'
      {id, value: expr}

  array_decl = get_array_decl:: arr, id_elems, value, ctx

  [...filtered_id_elems] = pipe id_elems:
    filter {value}:
      match value:
        # empty elements need no matching
        null: false
        # empty spreads need no matching
        {type: 'spread', right: null}: false
        else: true

  ifStatement::
    is_iterable:: value
    match id_elems:
      {length: 0}:
        emit_result()
      else:
        blockStatement:: [
          array_decl,
          match_elems:: filtered_id_elems, emit_result, ctx, cond
        ]


match_simple = fn value, expr, emit_result, ctx:
  ifStatement::
    comp:: value, expr, {...ctx, wrap: 'loc'}
    emit_result()


match_condition = fn value, expr, emit_result, ctx, cond:
  js_expr = match expr:
    {type: 'object'}:
      match_obj:: value, expr, emit_result, ctx, cond

    {type: 'array'}:
      match_array:: value, expr, emit_result, ctx, cond

    {type: 'spread'}:
      match_condition:: value, expr.right, emit_result, ctx, cond

    else:
      match_simple:: value, expr, emit_result, ctx

  wrap_with_comment_loc:: js_expr, cond


split_condition = fn {left, right}:
  [left, right]


match_all = fn value, matches, emit, ctx:
  pipe matches:
    map expr:
      [condition, result] = split_condition:: expr

      js_expr = match condition:
        {value: 'else'}:
          js_expr = emit:: result
          wrap_with_comment_loc:: js_expr, condition
        else:
          emit_result = fn: emit:: result
          match_condition:: value, condition, emit_result, ctx, condition


transform_match = fn node, ctx:
  {exprs} = node
  [inputs] = node.args

  value = ctx.unique_ident:: 'value'
  break_lbl = ctx.unique_ident:: 'match'

  emit_result = fn result:
    blockStatement:: [
      expressionStatement(ctx.transform:: result),
      breakStatement:: break_lbl
    ]

  doExpression::
    blockStatement:: [
      labeledStatement::
        break_lbl
        blockStatement:: [
          consts(value, ctx.transform:: inputs),
          ...match_all:: value, exprs, emit_result, ctx
        ]
    ]
