// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`match compiles nested match 1`] = `
"export const test = () => {
  const ˆvalue_1 = foo;

  if (ˆvalue_1 === bar) {
    {
      {
        ˆmatch_4: {
          const ˆvalue_3 = spam;

          if (ˆvalue_3 === shrub) {
            ni;
            break ˆmatch_4;
          }
        }
      }
      return bar;
    }
  }
};"
`;

exports[`match compiles without else 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    if (ˆvalue_1 === 123) {
      spam;
      break ˆmatch_2;
    }
  }
}"
`;

exports[`match iterables matches spread 1`] = `
"// spread and ignored elems
{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_3,, ˆa_5] = ˆvalue_1;
      if (ˆa_3 === 1) if (ˆa_5 === 2) {
        foo;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      let _do_result;

      {
        const [...ˆitems_9] = ˆvalue_1;
        _do_result = [ˆitems_9, ˆitems_9.slice(1, -1), ˆitems_9.slice(-1)];
      }
      const [[ˆa_6],, [ˆa_8]] = _do_result;
      _do_result = undefined;
      if (ˆa_6 === 1) if (ˆa_8 === 3) {
        foo;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      let _do_result2;

      {
        const [...ˆitems_12] = ˆvalue_1;
        _do_result2 = [ˆitems_12.slice(0, -1), ˆitems_12.slice(-1)];
      }
      const [, [ˆa_11]] = _do_result2;
      _do_result2 = undefined;

      if (ˆa_11 === 2) {
        foo;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      let _do_result3;

      {
        const [...ˆitems_16] = ˆvalue_1;
        _do_result3 = [ˆitems_16, ˆitems_16.slice(1, -1), ˆitems_16.slice(-1)];
      }
      const [[ˆa_13], ˆa_14, [ˆa_15]] = _do_result3;
      _do_result3 = undefined;
      if (ˆa_13 === 1) if (typeof ˆa_14?.[Symbol.iterator] === \\"function\\") {
        const [ˆa_17, ˆa_18] = ˆa_14;
        if (ˆa_17 === 2) if (ˆa_18 === 3) if (ˆa_15 === 4) {
          foo;
          break ˆmatch_2;
        }
      }
    }
  }
}"
`;

exports[`match iterables matches value assertions 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = foo;

    // nested unary
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_3] = ˆvalue_1;

      // nested unary
      if (!ˆa_3) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested binary
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_4] = ˆvalue_1;

      // nested binary
      if (ˆa_4 > 123) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested call
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_5] = ˆvalue_1;

      // nested call
      if (ˆa_5()) {
        ni;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_6] = ˆvalue_1;

      if (ˆa_6()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested member call
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_7] = ˆvalue_1;

      // nested member call
      if (ˆa_7.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_8] = ˆvalue_1;

      if (ˆa_8.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested as call arg
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_9] = ˆvalue_1;

      // nested as call arg
      if (is_foo(ˆa_9)) {
        ni;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_10, ...ˆa_11] = ˆvalue_1;
      if (ˆa_10 === 1) if (is_empty(ˆa_11)) {
        ni;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_12, ...ˆa_13] = ˆvalue_1;
      if (ˆa_12 === 1) if (1 < length(ˆa_13)) {
        ni;
        break ˆmatch_2;
      }
    }
  }
}"
`;

exports[`match iterables matches values 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // deep iterable comparison
    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_3, ˆa_4, ˆa_5] = ˆvalue_1;
      // deep iterable comparison
      if (ˆa_3 === 1) // deep iterable comparison
        if (ˆa_4 === 2) // deep iterable comparison
          if (typeof ˆa_5?.[Symbol.iterator] === \\"function\\") {
            const [ˆa_6] = ˆa_5;

            // deep iterable comparison
            if (ˆa_6 === ni) {
              ni;
              break ˆmatch_2;
            }
          }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_7, ˆa_8, ˆa_9, ˆa_10] = ˆvalue_1;
      if (ˆa_7 === 1) if (ˆa_8 === 2) if (typeof ˆa_9?.[Symbol.iterator] === \\"function\\") if (ˆa_10 != null) {
        foo;
        break ˆmatch_2;
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_11, ˆa_12, ˆa_13] = ˆvalue_1;
      if (ˆa_11 === 1) if (typeof ˆa_12?.[Symbol.iterator] === \\"function\\") {
        const [ˆa_14, ˆa_15] = ˆa_12;
        if (ˆa_14 === 2) if (ˆa_15 === 3) if (ˆa_13 === 4) {
          bar;
          break ˆmatch_2;
        }
      }
    }

    if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
      const [ˆa_16, ˆa_17, ˆa_18, ˆa_19] = ˆvalue_1;
      if (ˆa_16 === 1) if (typeof ˆa_17?.[Symbol.iterator] === \\"function\\") {
        const [ˆa_20, ˆa_21] = ˆa_17;
        if (ˆa_20 === 2) if (typeof ˆa_21?.[Symbol.iterator] === \\"function\\") {
          const [ˆa_22, ˆa_23] = ˆa_21;
          if (ˆa_22 === 3) if (ˆa_23 === 4) if (typeof ˆa_18?.[Symbol.iterator] === \\"function\\") {
            const [ˆa_24, ˆa_25] = ˆa_18;
            if (ˆa_24 === 5) if (ˆa_25 === 6) if (ˆa_19 === 7) {
              spam;
              break ˆmatch_2;
            }
          }
        }
      }
    }
  }
}"
`;

exports[`match matches simple values 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // simple value
    if (ˆvalue_1 === 123) {
      spam;
      break ˆmatch_2;
    }

    // fallback if none of above match
    {
      shrub;
      break ˆmatch_2;
    }
  }
}"
`;

exports[`match matches value assertions 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = 123;

    // simple unary
    if (!ˆvalue_1) {
      ni;
      break ˆmatch_2;
    }

    // simple binary
    if (ˆvalue_1 > 123) {
      ni;
      break ˆmatch_2;
    }

    // simple call
    if (ˆvalue_1()) {
      ni;
      break ˆmatch_2;
    }

    if (ˆvalue_1()) {
      ni;
      break ˆmatch_2;
    }

    // simple as call arg
    if (shrub(ˆvalue_1)) {
      ni;
      break ˆmatch_2;
    }
  }
}"
`;

exports[`match records matches calculated props 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // calculated props
    if (ˆvalue_1 != null) {
      const {
        [a]: ˆp_3
      } = ˆvalue_1;

      // calculated props
      if (ˆp_3 != null) {
        const {
          b: ˆp_4,
          c: ˆp_5
        } = ˆp_3;
        // calculated props
        if (ˆp_4 === b) // calculated props
          if (ˆp_5 === c) {
            ni;
            break ˆmatch_2;
          }
      }
    }
  }
}"
`;

exports[`match records matches member expr keys 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = foo;

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_3
      } = ˆvalue_1;

      if (ˆp_3 != null) {
        const {
          bar: ˆp_4
        } = ˆp_3;

        if (ˆp_4 != null) {
          const {
            spam: ˆp_5
          } = ˆp_4;

          if (ˆp_5 === ham) {
            spam;
            break ˆmatch_2;
          }
        }
      }
    }
  }
}"
`;

exports[`match records matches member expr keys 2`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = foo;

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_3
      } = ˆvalue_1;

      if (ˆp_3 != null) {
        const {
          bar: ˆp_4
        } = ˆp_3;

        if (ˆp_4 != null) {
          const {
            spam: ˆp_5
          } = ˆp_4;

          if (ˆp_5 != null) {
            const {
              ham: ˆp_6
            } = ˆp_5;

            if (ˆp_6 != null) {
              const {
                ni: ˆp_7
              } = ˆp_6;

              if (ˆp_7 === nu) {
                spam;
                break ˆmatch_2;
              }
            }
          }
        }
      }
    }
  }
}"
`;

exports[`match records matches props 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_3
      } = ˆvalue_1;

      if (ˆp_3 != null) {
        spam + ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_4
      } = ˆvalue_1;

      if (typeof ˆp_4?.[Symbol.iterator] === \\"function\\") {
        spam + ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_5,
        ni: ˆp_6
      } = ˆvalue_1;
      if (ˆp_5 === 4) if (ˆp_6 != null) {
        const {
          na: ˆp_7,
          nu: ˆp_8
        } = ˆp_6;
        if (ˆp_7 === na) if (ˆp_8 === nu) {
          spam + ni;
          break ˆmatch_2;
        }
      }
    }

    if (ˆvalue_1 != null) {
      const {
        foo: ˆp_9,
        foo: ˆp_10,
        shrub: ˆp_11
      } = ˆvalue_1;
      if (ˆp_9 === 1) if (ˆp_10 != null) {
        const {
          bar: ˆp_12
        } = ˆp_10;
        if (ˆp_12 === \`spam\`) if (ˆp_11 != null) {
          const {
            na: ˆp_13
          } = ˆp_11;

          if (ˆp_13 === \`nu\`) {
            ni;
            break ˆmatch_2;
          }
        }
      }
    }

    if (ˆvalue_1 != null) {
      const {
        ni: ˆp_14,
        na: ˆp_15
      } = ˆvalue_1;

      if (ˆp_14 != null) {
        const {
          len: ˆp_16
        } = ˆp_14;
        if (ˆp_16 === 1) if (ˆp_15 != null) {
          const {
            len: ˆp_17
          } = ˆp_15;

          if (ˆp_17 === 1) {
            na;
            break ˆmatch_2;
          }
        }
      }
    }
  }
}"
`;

exports[`match records matches spread 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // spread
    if (ˆvalue_1 != null) {
      const {
        [foo]: ˆp_3,
        ...ˆp_4
      } = ˆvalue_1;
      // spread
      if (ˆp_3 != null) // spread
        if (ˆp_4 != null) {
          const {
            bar: ˆp_5,
            spam: ˆp_6
          } = ˆp_4;
          // spread
          if (ˆp_5 === bar) // spread
            if (ˆp_6 === spam) {
              ni;
              break ˆmatch_2;
            }
        }
    }
  }
}"
`;

exports[`match records matches value assertions 1`] = `
"import { _in_ } from \\"@fink/js-interop/runtime.js\\";
{
  ˆmatch_2: {
    const ˆvalue_1 = foo;

    // nested unary
    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_3
      } = ˆvalue_1;

      // nested unary
      if (!ˆp_3) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested binary
    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_4
      } = ˆvalue_1;

      // nested binary
      if (ˆp_4 > 123) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested call
    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_5
      } = ˆvalue_1;

      // nested call
      if (ˆp_5()) {
        ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_6
      } = ˆvalue_1;

      if (ˆp_6()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested member call
    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_7
      } = ˆvalue_1;

      // nested member call
      if (ˆp_7.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_8
      } = ˆvalue_1;

      if (ˆp_8.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested as call arg
    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_9
      } = ˆvalue_1;

      // nested as call arg
      if (is_foo(ˆp_9)) {
        ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_10,
        ...ˆp_11
      } = ˆvalue_1;
      if (ˆp_10 === spam) if (is_empty(ˆp_11)) {
        ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 != null) {
      const {
        spam: ˆp_12,
        ...ˆp_13
      } = ˆvalue_1;
      if (ˆp_12 === spam) if (_in_(\`foo\`, ˆp_13)) {
        ni;
        break ˆmatch_2;
      }
    }
  }
}"
`;

exports[`match value assertions compiles do-expr 1`] = `
"let _do_result;

ˆmatch_2: {
  const ˆvalue_1 = bar;

  if (ˆvalue_1 === spam) {
    _do_result = (() => {
      ni;
      throw foobar;
    })();

    break ˆmatch_2;
  }

  {
    _do_result = (() => {
      shrub;
      throw ni;
    })();

    break ˆmatch_2;
  }
}

export const foo = _do_result;
_do_result = undefined;"
`;
