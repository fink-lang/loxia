// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`match compiles 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // simple value
    if (ˆvalue_1 === 123) {
      spam;
      break ˆmatch_2;
    }

    // object matching
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"foo\\": ˆp_3,
        \\"ni\\": ˆp_4
      } = ˆvalue_1;
      // object matching
      if (ˆp_3 === 4) // object matching
        if (ˆp_4 === ni) {
          spam + ni;
          break ˆmatch_2;
        }
    }

    // array matching
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_5, ˆa_6, ˆa_7] = ˆvalue_1;
      // array matching
      if (ˆa_5 === 1) // array matching
        if (ˆa_6 === 2) // array matching
          if (ˆa_7 === ni) {
            ni;
            break ˆmatch_2;
          }
    }

    // fallback if none of above match
    {
      shrub;
      break ˆmatch_2;
    }
  }
}
Object.assign(module.exports, {});"
`;

exports[`match compiles nested match 1`] = `
"const test = () => {
  const ˆvalue_1 = foo;

  if (ˆvalue_1 === bar) {
    {
      {
        ˆmatch_4: {
          const ˆvalue_3 = spam;

          if (ˆvalue_3 === shrub) {
            ni;
            break ˆmatch_4;
          }
        }
      }
      return bar;
    }
  }
};

Object.assign(module.exports, {
  test
});"
`;

exports[`match compiles nested pattern 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    // deep obj comparison
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"foo\\": ˆp_3
      } = ˆvalue_1;

      // deep obj comparison
      if (ˆp_3 !== undefined && ˆp_3 !== null) {
        spam + ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"foo\\": ˆp_4
      } = ˆvalue_1;

      if (ˆp_4 !== undefined && ˆp_4 !== null && typeof ˆp_4[Symbol.iterator] === \\"function\\") {
        spam + ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"foo\\": ˆp_5,
        \\"ni\\": ˆp_6
      } = ˆvalue_1;
      if (ˆp_5 === 4) if (ˆp_6 !== undefined && ˆp_6 !== null) {
        const {
          \\"na\\": ˆp_7,
          \\"nu\\": ˆp_8
        } = ˆp_6;
        if (ˆp_7 === na) if (ˆp_8 === nu) {
          spam + ni;
          break ˆmatch_2;
        }
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"xx\\": ˆp_9,
        \\"foo\\": ˆp_10,
        \\"shrub\\": ˆp_11
      } = ˆvalue_1;
      if (ˆp_9 === 1) if (ˆp_10 !== undefined && ˆp_10 !== null) {
        const {
          \\"bar\\": ˆp_12
        } = ˆp_10;
        if (ˆp_12 === \`spam\`) if (ˆp_11 !== undefined && ˆp_11 !== null) {
          const {
            \\"na\\": ˆp_13
          } = ˆp_11;

          if (ˆp_13 === \`nu\`) {
            ni;
            break ˆmatch_2;
          }
        }
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"ni\\": ˆp_14,
        \\"na\\": ˆp_15
      } = ˆvalue_1;

      if (ˆp_14 !== undefined && ˆp_14 !== null) {
        const {
          \\"len\\": ˆp_16
        } = ˆp_14;
        if (ˆp_16 === 1) if (ˆp_15 !== undefined && ˆp_15 !== null) {
          const {
            \\"len\\": ˆp_17
          } = ˆp_15;

          if (ˆp_17 === 1) {
            na;
            break ˆmatch_2;
          }
        }
      }
    }

    // deep array comparison
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_18, ˆa_19, ˆa_20] = ˆvalue_1;
      // deep array comparison
      if (ˆa_18 === 1) // deep array comparison
        if (ˆa_19 === 2) // deep array comparison
          if (ˆa_20 !== undefined && ˆa_20 !== null && typeof ˆa_20[Symbol.iterator] === \\"function\\") {
            const [ˆa_21] = ˆa_20;

            // deep array comparison
            if (ˆa_21 === ni) {
              ni;
              break ˆmatch_2;
            }
          }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_22, ˆa_23, ˆa_24, ˆa_25] = ˆvalue_1;
      if (ˆa_22 === 1) if (ˆa_23 === 2) if (ˆa_24 !== undefined && ˆa_24 !== null && typeof ˆa_24[Symbol.iterator] === \\"function\\") if (ˆa_25 !== undefined && ˆa_25 !== null) {
        foo;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_26, ˆa_27, ˆa_28] = ˆvalue_1;
      if (ˆa_26 === 1) if (ˆa_27 !== undefined && ˆa_27 !== null && typeof ˆa_27[Symbol.iterator] === \\"function\\") {
        const [ˆa_29, ˆa_30] = ˆa_27;
        if (ˆa_29 === 2) if (ˆa_30 === 3) if (ˆa_28 === 4) {
          bar;
          break ˆmatch_2;
        }
      }
    }

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_31, ˆa_32, ˆa_33, ˆa_34] = ˆvalue_1;
      if (ˆa_31 === 1) if (ˆa_32 !== undefined && ˆa_32 !== null && typeof ˆa_32[Symbol.iterator] === \\"function\\") {
        const [ˆa_35, ˆa_36] = ˆa_32;
        if (ˆa_35 === 2) if (ˆa_36 !== undefined && ˆa_36 !== null && typeof ˆa_36[Symbol.iterator] === \\"function\\") {
          const [ˆa_37, ˆa_38] = ˆa_36;
          if (ˆa_37 === 3) if (ˆa_38 === 4) if (ˆa_33 !== undefined && ˆa_33 !== null && typeof ˆa_33[Symbol.iterator] === \\"function\\") {
            const [ˆa_39, ˆa_40] = ˆa_33;
            if (ˆa_39 === 5) if (ˆa_40 === 6) if (ˆa_34 === 7) {
              spam;
              break ˆmatch_2;
            }
          }
        }
      }
    }
  }
}
Object.assign(module.exports, {});"
`;

exports[`match compiles patial application 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = {
      \\"spam\\": 123
    };

    // simple unary
    if (!ˆvalue_1) {
      ni;
      break ˆmatch_2;
    }

    // simple binary
    if (ˆvalue_1 > 123) {
      ni;
      break ˆmatch_2;
    }

    // simple call
    if (ˆvalue_1()) {
      ni;
      break ˆmatch_2;
    }

    // simple as call arg
    if (shrub(ˆvalue_1)) {
      ni;
      break ˆmatch_2;
    }

    // nested unary
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"spam\\": ˆp_3
      } = ˆvalue_1;

      // nested unary
      if (!ˆp_3) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested binary
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"spam\\": ˆp_4
      } = ˆvalue_1;

      // nested binary
      if (ˆp_4 > 123) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested call
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"spam\\": ˆp_5
      } = ˆvalue_1;

      // nested call
      if (ˆp_5()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested member call
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"spam\\": ˆp_6
      } = ˆvalue_1;

      // nested member call
      if (ˆp_6.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested as call arg
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"spam\\": ˆp_7
      } = ˆvalue_1;

      // nested as call arg
      if (is_foo(ˆp_7)) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested unary
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_8] = ˆvalue_1;

      // nested unary
      if (!ˆa_8) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested binary
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_9] = ˆvalue_1;

      // nested binary
      if (ˆa_9 > 123) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested call
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_10] = ˆvalue_1;

      // nested call
      if (ˆa_10()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested member call
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_11] = ˆvalue_1;

      // nested member call
      if (ˆa_11.is_foo()) {
        ni;
        break ˆmatch_2;
      }
    }

    // nested as call arg
    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null && typeof ˆvalue_1[Symbol.iterator] === \\"function\\") {
      const [ˆa_12] = ˆvalue_1;

      // nested as call arg
      if (is_foo(ˆa_12)) {
        ni;
        break ˆmatch_2;
      }
    }
  }
}
Object.assign(module.exports, {});"
`;

exports[`match compiles without else 1`] = `
"{
  ˆmatch_2: {
    const ˆvalue_1 = shrub;

    if (ˆvalue_1 !== undefined && ˆvalue_1 !== null) {
      const {
        \\"foo\\": ˆp_3,
        \\"ni\\": ˆp_4
      } = ˆvalue_1;
      if (ˆp_3 === 4) if (ˆp_4 === ni) {
        spam + ni;
        break ˆmatch_2;
      }
    }

    if (ˆvalue_1 === 123) {
      spam;
      break ˆmatch_2;
    }
  }
}
Object.assign(module.exports, {});"
`;
