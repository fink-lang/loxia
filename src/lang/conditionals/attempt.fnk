{
  tryStatement, blockStatement, catchClause, arrayExpression,
  expressionStatement, doExpression, nullLiteral, isDoExpression
} = import '@babel/types'

{transform_block} = import '../block'


transform_attempt = fn node, ctx:
  block = transform_block:: node, ctx
  body = match block:
    isDoExpression:: ?: block.body.body
    else: [block]

  [...expressions, last_expr] = body
  err = ctx.unique_ident:: 'error'

  try_block = blockStatement:: [
    ...expressions,
    expressionStatement::
      arrayExpression:: [nullLiteral(), last_expr.expression || last_expr]
  ]

  catch_block = catchClause::
    err,
    blockStatement:: [
      expressionStatement::
        # TODO: should return undef
        arrayExpression:: [err, nullLiteral()]
    ]

  doExpression::
    blockStatement:: [
      tryStatement::
        try_block,
        catch_block
    ]

