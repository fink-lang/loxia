babel_types = import '@babel/types'
{
  tryStatement, blockStatement, catchClause, arrayExpression
  expressionStatement, doExpression, isDoExpression
} = babel_types

{false_, unique_ident} = import '../../js/types.fnk'

{transform_block} = import '../block/init.fnk'



transform_try = fn node, ctx:
  [block, next_ctx] = transform_block node, ctx

  body = match block:
    isDoExpression ?: block.body.body
    else: [block]

  [...expressions, last_expr] = body
  [err, end_ctx] = unique_ident 'error', next_ctx

  try_block = blockStatement list:
    ...expressions
    expressionStatement
      arrayExpression list:
        false_ _
        last_expr.expression or last_expr

  catch_block = catchClause
    err
    blockStatement list:
      expressionStatement
        arrayExpression [err]

  js = doExpression
    blockStatement list:
      tryStatement
        try_block
        catch_block

  [js, end_ctx]

