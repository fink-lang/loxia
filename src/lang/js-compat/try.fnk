{
  tryStatement, blockStatement, catchClause, arrayExpression
  expressionStatement, doExpression, isDoExpression
} = import '@babel/types'

{false_} = import '../../js/types.fnk'

{transform_block} = import '../block/index.fnk'



transform_try = fn node, ctx:
  block = transform_block node, ctx
  body = match block:
    isDoExpression ?: block.body.body
    else: [block]

  [...expressions, last_expr] = body
  err = ctx.unique_ident 'error'

  try_block = blockStatement list:
    ...expressions
    expressionStatement
      arrayExpression list:
        false_ _
        last_expr.expression or last_expr

  catch_block = catchClause
    err
    blockStatement list:
      expressionStatement
        arrayExpression [err]


  doExpression
    blockStatement list:
      tryStatement
        try_block
        catch_block


