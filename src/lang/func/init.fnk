babel_types = import '@babel/types'
{arrowFunctionExpression} = babel_types

{unique_ident} = import '../../js/types.fnk'
{transform_left} = import '../../js/left.fnk'
{add, any} = import '../context.fnk'
{transform_block} = import '../block/init.fnk'
{transform, map_with_ctx, collect_with_ctx} = import '../transform.fnk'



transform_arg = fn arg, ctx:
  match arg:
    {type: 'empty'}:
      unique_ident '', ctx
    else:
      [t_arg, next_ctx] = transform arg, ctx
      js_arg = transform_left t_arg
      [js_arg, next_ctx]



transform_func = fn node, ctx:
  [params, next_ctx] = pipe node.args:
    map_with_ctx transform_arg
    collect_with_ctx ctx

  [body, end_ctx] = transform_block node, next_ctx
  js = arrowFunctionExpression params, body

  [js, end_ctx]


add_func = fn ctx:
  pipe ctx:
    add any, 'fn', transform_func
