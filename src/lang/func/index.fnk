{arrowFunctionExpression} = import '@babel/types'

{add, any} = import '../context'
{transform_left} = import '../generic/left'
{transform_block} = import '../block'


transform_func = fn node, ctx:
  params = node.args.map(fn arg: transform_left(ctx.transform(arg)))
  body = transform_block(node, ctx)
  arrowFunctionExpression(params, body)



add_func = fn ctx:
  pipe ctx:
    add:: any, 'fn', transform_func

