{
  file, program, objectExpression, objectProperty, identifier,
  expressionStatement
} = import '@babel/types'

{call, member, ident} = import '../../js/types'
{add, any} = import '../context'

{block_statement} = import '../block'
{transform_import} = import './import'


transform_module = fn node, ctx:
  [...exported] = pipe node.exprs:
    filter expr:
      match expr:
        {left: {type: 'ident'}}: true
        {type: 'comment'} : false
        else: false

    map {left: {value}}:
      # TODO: wrap with loc?
      id = ident(value)
      objectProperty(id, id, false, true)

  body = pipe node.exprs:
    # filter {type}: type != 'comment'
    map expr: block_statement(ctx)(expr)

  # TODO: use individual exports?
  exports = expressionStatement(
    call(member(identifier('Object'))(identifier('assign')))(
      member(identifier('module'))(identifier('exports')),
      objectExpression(exported)
    )
  )

  file(program([...body, exports], [], 'module'))


add_module = fn ctx:
  pipe ctx:
    add('module', any, transform_module)
    add('import', any, transform_import)

