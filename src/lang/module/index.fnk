{
  file, program, objectProperty, identifier,
  callExpression, objectExpression, memberExpression,
  expressionStatement
} = import '@babel/types'

{call, member, ident} = import '../../js/types'
{add, any} = import '../context'

{block_statement} = import '../block'
{transform_import} = import './import'


transform_module = fn node, ctx:
  [...exported] = pipe node.exprs:
    filter expr:
      match expr:
        {left: {type: 'ident'}}: true
        else: false

    map {left: {value}}:
      # TODO: wrap with loc?
      id = ident:: value
      objectProperty:: id, id, false, true

  body = pipe node.exprs:
    map expr: block_statement(ctx)(expr)


  # TODO: use individual exports?
  obj = identifier:: 'Object'
  obj_assign = memberExpression:: obj, identifier:: 'assign'
  mod = identifier:: 'module'
  mod_exports = memberExpression:: mod, identifier:: 'exports'

  exports = expressionStatement::
    callExpression::
      obj_assign,
      [mod_exports, objectExpression:: exported]

  file::
    program::
      [...body, exports]
      []
      'module'


add_module = fn ctx:
  pipe ctx:
    add('module', any, transform_module)
    add('import', any, transform_import)

