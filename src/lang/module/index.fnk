{
  file, program, interpreterDirective, stringLiteral
  importDeclaration, importSpecifier, importDefaultSpecifier
  exportNamedDeclaration, exportDefaultDeclaration, identifier
} = import '@babel/types'

{add, any} = import '../context'

{wrap_with_comment_loc} = import '../comments'
{block_statement} = import '../block'
{transform_import: transform_async_import} = import './import'


# TODO should larix handle shebang as special expr?
get_shebang = fn expr:
  {comments} = expr
  match comments:
    {leading: [{op: '#', loc: {start: {line: 1}}, value: ?.startsWith '!'}]}:
      [first, ...rest] = comments.leading
      shebang = interpreterDirective '${first.value.slice 1}'
      [[shebang], {...expr, comments: {...comments, leading: rest}}]
    else:
      [[], expr]


transform_import = fn node, {transform}:
  [...imports] = match node.left:
    {type: 'ident'}:
      [importDefaultSpecifier transform node.left]

    {type: 'object'}:
      pipe node.left.exprs:
        map prop:
          match prop:
            {left: {value: 'default'}}:
              importSpecifier
                transform prop.right
                identifier prop.left.value
            else:
              importSpecifier
                transform prop.right
                transform prop.left

  {right: {right: {exprs: [url]}}} = node

  importDeclaration imports, stringLiteral url.value



transform_module = fn node, ctx:
  [maybe_shebang, ...rest] = node.exprs
  [interpreter, first] = get_shebang maybe_shebang

  [...body] = pipe [first, ...rest]:
    map expr:
      match expr:
        {op: 'import'}:
          {right: {exprs: [url]}} = expr
          wrap_with_comment_loc
            importDeclaration [], stringLiteral url.value
            expr

        {right: {op: 'import'}}:
          wrap_with_comment_loc
            transform_import expr, ctx
            expr

        {type: 'assign', left: {type: 'ident', value: 'default'}}:
          wrap_with_comment_loc
            exportDefaultDeclaration ctx.transform expr.right
            expr

        {type: 'assign', left: {type: 'ident'}}:
          # TODO: we don't want to double up on comments?
          {comments, ...decl} = expr
          wrap_with_comment_loc
            exportNamedDeclaration block_statement decl, ctx
            expr
        else:
          block_statement expr, ctx

  file
    program
      body
      []
      'module'
      ...interpreter


add_module = fn ctx:
  pipe ctx:
    add 'module', any, transform_module
    add 'import', any, transform_async_import

