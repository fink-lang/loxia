babel_types = import '@babel/types'
{
  file, program, interpreterDirective, stringLiteral
  importDeclaration, importSpecifier, importDefaultSpecifier
  exportNamedDeclaration, exportDefaultDeclaration, identifier
} = babel_types
{starts_with, slice} = import '@fink/std-lib/str.fnk'

{add, any} = import '../context.fnk'
{wrap_with_comment_loc} = import '../comments/init.fnk'
{block_statement} = import '../block/init.fnk'
{transform, is_ignorable_import} = import '../transform.fnk'
{map_with_ctx, drop_if, collect_with_ctx} = import '../transform.fnk'

{transform_import: transform_async_import, resolve_ext} = import './import.fnk'
{set_runtime_impl, is_runtime_fn, get_runtime_imports} = import '../runtime.fnk'




# TODO should larix handle shebang as special expr?
get_hashbang = fn expr:
  {comments} = expr
  match comments:
    {leading: [{op: '#', loc: {start: {line: 1}}, value: starts_with ?, '!'}]}:
      [first, ...rest] = comments.leading
      shebang = interpreterDirective '${slice first.value, 1}'
      [[shebang], {...expr, comments: {...comments, leading: rest}}]
    else:
      [[], expr]



ignorable_import = fn expr, ctx:
  match expr:
    {type: 'assign', right: is_ignorable_import ?, ctx}:
      true
    else:
      false



add_runtime_fn_overrides = fn expr, ctx:
  match expr:
    {type: 'assign', right: {op: 'import'}, left: {type: 'rec'}}:
      {right: {right: {exprs: [{value: uri}]}}} = expr

      next_ctx = pipe expr.left.exprs:
        filter {left, right}:
          match right:
            false: is_runtime_fn left.value, ctx
            else: is_runtime_fn right.value, ctx

        fold {left, right}, override_ctx=ctx:
          name = match right:
            false: left.value
            else: right.value
          set_runtime_impl name, uri, override_ctx

      [expr, next_ctx]
    else:
      [expr, ctx]



imported_specs = fn exprs, ctx:
  pipe exprs:
    map prop, , imp_ctx:

      [right, left_ctx] = match prop:
        {right: false}:
          transform prop.left, imp_ctx
        else:
          transform prop.right, imp_ctx

      match prop:
        {left: {value: 'default'}}:
          imp = importSpecifier right, identifier prop.left.value
          [imp, ,left_ctx]

        else:
          [left, next_ctx] = transform prop.left, left_ctx
          imp = importSpecifier right, left
          [imp, , next_ctx]

    collect_with_ctx ctx



transform_import = fn node, ctx:
  {options} = ctx
  {right: {right: {exprs: [{value: url}]}}} = node

  [imports, end_ctx] = match node.left:
    {type: 'ident'}:
      [imp, next_ctx] = transform node.left, ctx
      [[importDefaultSpecifier imp], next_ctx]

    {type: 'rec'}:
      imported_specs node.left.exprs, ctx

  js = importDeclaration
    imports
    wrap_with_comment_loc
      stringLiteral resolve_ext url, options
      node.right.right

  [js, end_ctx]



transform_body_expr = fn expr, expr_ctx:
  match expr:
    {op: 'import'}:
      {right: {exprs: [url]}} = expr
      js = wrap_with_comment_loc
        importDeclaration
          [], stringLiteral resolve_ext url.value, expr_ctx.options
        expr
      [js, expr_ctx]

    {right: {op: 'import'}}:
      [imp, next_ctx] = transform_import expr, expr_ctx
      js = wrap_with_comment_loc imp, expr
      [js, next_ctx]

    {type: 'assign', left: {type: 'ident', value: 'default'}}:
      [decl, next_ctx] = transform expr.right, expr_ctx
      js = wrap_with_comment_loc
        exportDefaultDeclaration decl
        expr
      [js, next_ctx]

    {type: 'assign', left: {type: 'ident'}}:
      # we don't want to double up on comments?
      {comments: _, ...decl} = expr
      [decl_st, next_ctx] = block_statement decl, expr_ctx
      js = wrap_with_comment_loc
        exportNamedDeclaration decl_st
        expr
      [js, next_ctx]

    else:
      block_statement expr, expr_ctx



insert_imports = fn [body, ctx]:
  [imports, end_ctx] = pipe ctx:
    get_runtime_imports ?
    drop_if ignorable_import
    map_with_ctx transform_body_expr
    collect_with_ctx ctx

  [[...imports, ...body], end_ctx]



transform_module = fn node, ctx:
  [maybe_shebang_or_pragmas, ...rest] = node.exprs
  [interpreter, first] = get_hashbang maybe_shebang_or_pragmas

  [body, end_ctx] = pipe [first, ...rest]:
    map_with_ctx add_runtime_fn_overrides
    drop_if ignorable_import
    map_with_ctx transform_body_expr
    collect_with_ctx ctx
    insert_imports

  js = file
    program
      body
      []
      'module'
      ...interpreter

  [js, end_ctx]



add_module = fn ctx:
  pipe ctx:
    add 'module', any, transform_module
    add 'import', any, transform_async_import

