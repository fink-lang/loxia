{logicalExpression, unaryExpression} = import '@babel/types'
{add, any} = import '../context'


transform_op = {
  '&&': '&&'
  '||': '||'
  '!': '!'
  'and': '&&'
  'or': '||'
  'not': '!'
}


transform_not = fn node, {transform}:
  {(node.op): op} = transform_op
  right = transform:: node.right

  unaryExpression:: op, right


transform_logical = fn node, {transform}:
  {(node.op): op} = transform_op
  left = transform:: node.left
  right = transform:: node.right

  logicalExpression:: op, left, right


add_logical = fn ctx:
  pipe ctx:
    add:: any, '&&', transform_logical
    add:: any, '||', transform_logical
    add:: any, '!', transform_not

    add:: any, 'and', transform_logical
    add:: any, 'or', transform_logical
    add:: any, 'not', transform_not

