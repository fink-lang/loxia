babel_types = import '@babel/types'
{identifier, optionalCallExpression, optionalMemberExpression, memberExpression, callExpression, logicalExpression} = babel_types

{transform} = import '../transform.fnk'



transform_in = fn node, ctx:
  {left, right} = node
  [js_right, next_ctx] = transform right, ctx
  [js_left, end_ctx] = transform left, next_ctx


  js = match right:
    {type: 'list'}:
      callExpression
        memberExpression
          js_right
          identifier 'includes'
        [js_left]

    {type: 'string'}:
      callExpression
        memberExpression
          js_right
          identifier 'includes'
        [js_left]

    {type: 'rec'}:
      callExpression
        memberExpression
          js_right
          identifier 'hasOwnProperty'
        [js_left]

    else:
      logicalExpression
        '??'
        optionalCallExpression
          optionalMemberExpression
            js_right
            identifier 'includes'
            false
            true
          [js_left]
          true

        logicalExpression
          '??'
          optionalCallExpression
            optionalMemberExpression
              js_right
              identifier 'has'
              false
              true
            [js_left]
            true

          logicalExpression
            '??'
            optionalCallExpression
              optionalMemberExpression
                js_right
                identifier 'hasOwnProperty'
                false
                true
              [js_left]
              true
            identifier 'false'

  [js, end_ctx]
