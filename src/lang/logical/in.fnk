babel_types = import '@babel/types'
{identifier, optionalCallExpression, optionalMemberExpression, memberExpression, callExpression, logicalExpression} = babel_types


transform_in = fn node, ctx:
  {transform} = ctx

  {left, right} = node
  match right:
    {type: ? in ['array', 'list']}:
      callExpression
        memberExpression
          transform right
          identifier 'includes'
        [transform left]

    {type: 'string'}:
      callExpression
        memberExpression
          transform right
          identifier 'includes'
        [transform left]

    {type: ? in ['object', 'rec']}:
      callExpression
        memberExpression
          transform right
          identifier 'hasOwnProperty'
        [transform left]

    else:
      logicalExpression
        '??'
        optionalCallExpression
          optionalMemberExpression
            transform right
            identifier 'includes'
            false
            true
          [transform left]
          true

        logicalExpression
          '??'
          optionalCallExpression
            optionalMemberExpression
              transform right
              identifier 'has'
              false
              true
            [transform left]
            true

          logicalExpression
            '??'
            optionalCallExpression
              optionalMemberExpression
                transform right
                identifier 'hasOwnProperty'
                false
                true
              [transform left]
              true
            identifier 'false'

