babel_types = import '@babel/types'
{logicalExpression, unaryExpression} = babel_types

{add, add_with_runtime, any} = import '../context.fnk'
{transform} = import '../transform.fnk'

{transform_in} = import './in.fnk'



transform_op = rec:
  'and': '&&'
  'or': '||'
  'not': '!'



transform_not = fn node, ctx:
  {(node.op): op} = transform_op
  [right, next_ctx] = transform node.right, ctx
  js = unaryExpression op, right
  [js, next_ctx]



transform_logical = fn node, ctx:
  {(node.op): op} = transform_op

  [left, next_ctx] = transform node.left, ctx
  [right, end_ctx] = transform node.right, next_ctx
  js = logicalExpression op, left, right

  [js, end_ctx]



add_logical = fn ctx:
  pipe ctx:
    add any, 'and', transform_logical
    add any, 'or', transform_logical
    add any, 'not', transform_not
    # TODO: should this live in iterables?
    add_with_runtime any, 'in', transform_in
