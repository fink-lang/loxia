// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`await compiles 1`] = `
"export const task1 = async (foo) => -(await foo);
export const task2 = async (foo) => await (foo + 4);
export const task3 = async (foo) => {
  const bar = await foo();
  const spam = await foo();
  return bar + 123;
};
export const a_gen = async function* unfold(ˆinitial_2) {
  let ˆaccu_3 = 0;

  while (true) {
    const curr = ˆaccu_3;

    let _do_result;

    ˆmatch_5: {
      const ˆvalue_4 = shrub;

      if (ˆvalue_4 === spam) {
        _do_result = await ni(curr);
        break ˆmatch_5;
      }

      {
        _do_result = curr + 1;
        break ˆmatch_5;
      }
    }

    const ˆresult_1 = _do_result;
    _do_result = undefined;
    yield ˆresult_1;
    ˆaccu_3 = ˆresult_1;
  }
};
await ni;"
`;

exports[`await handles awaiting async iterables 1`] = `
"let _do_result;

{
  let _do_result2;

  {
    let ˆpipe_result_3 = undefined;

    _do_result2 = ˆpipe_result_3 = async function* unfold(ˆinitial_5) {
      let ˆaccu_6 = 0;

      while (true) {
        const cntr = ˆaccu_6;
        const ˆresult_4 = (await cntr) + 1;
        yield ˆresult_4;
        ˆaccu_6 = ˆresult_4;
      }
    }(ˆpipe_result_3);
  }
  const ˆitems_1 = _do_result2;
  _do_result2 = undefined;
  const ˆiter_2 = (ˆitems_1[Symbol.asyncIterator] || ˆitems_1[Symbol.iterator]).call(ˆitems_1);
  _do_result = [(await ˆiter_2.next()).value, (await ˆiter_2.next()).value];
}
const [foo, bar] = _do_result;
_do_result = undefined;"
`;
