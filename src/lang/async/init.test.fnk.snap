// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`await compiles 1`] = `
"export const task1 = async (foo) => -(await foo);
export const task2 = async (foo) => await (foo + 4);
export const task3 = async (foo) => {
  const bar = await foo();
  const spam = await foo();
  return bar + 123;
};
export const a_gen = function unfold(ˆinitial_5) {
  return {
    async *[Symbol.asyncIterator]() {
      let ˆitem_1 = ˆinitial_5;

      while (true) {
        const curr = ˆitem_1 === undefined ? 0 : ˆitem_1;

        let _do_result;

        ˆmatch_4: {
          const ˆvalue_3 = shrub;

          if (ˆvalue_3 === spam) {
            _do_result = await ni(curr);
            break ˆmatch_4;
          }

          {
            _do_result = curr + 1;
            break ˆmatch_4;
          }
        }

        const ˆresult_2 = _do_result;
        _do_result = undefined;
        yield ˆresult_2;
        ˆitem_1 = ˆresult_2;
      }
    }

  };
};
await ni;"
`;

exports[`await handles awaiting async iterables 1`] = `
"let _do_result;

{
  let _do_result2;

  {
    let ˆpipe_result_3 = undefined;

    _do_result2 = ˆpipe_result_3 = function unfold(ˆinitial_6) {
      return {
        async *[Symbol.asyncIterator]() {
          let ˆitem_4 = ˆinitial_6;

          while (true) {
            const cntr = ˆitem_4 === undefined ? 0 : ˆitem_4;
            const ˆresult_5 = (await cntr) + 1;
            yield ˆresult_5;
            ˆitem_4 = ˆresult_5;
          }
        }

      };
    }(ˆpipe_result_3);
  }
  const ˆitems_1 = _do_result2;
  _do_result2 = undefined;
  const ˆiter_2 = (
  /*istanbul ignore next*/
  ˆitems_1[Symbol.asyncIterator] || ˆitems_1[Symbol.iterator]).call(ˆitems_1);
  _do_result = [(await ˆiter_2.next()).value, (await ˆiter_2.next()).value];
}
const [foo, bar] = _do_result;
_do_result = undefined;"
`;
