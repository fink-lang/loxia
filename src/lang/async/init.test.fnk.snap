// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`await compiles 1`] = `
"export const task1 = async foo => -(await foo);
export const task2 = async foo => await (foo + 4);
export const task3 = async foo => {
  const spam = await foo();
  return bar + 123;
};
export const a_gen = unfold(async (curr = 0) => {
  const ˆvalue_1 = shrub;

  /* istanbul ignore else */
  if (ˆvalue_1 === spam) {
    return await ni(curr);
  }

  {
    return curr + 1;
  }
});
await ni;"
`;

exports[`await handles awaiting async iterables 1`] = `
"let _do_result;

{
  let _do_result2;

  {
    let ˆpipe_result_3 = undefined;
    _do_result2 = ˆpipe_result_3 = unfold(async (cntr = 0) => (await cntr) + 1)(ˆpipe_result_3);
  }
  const ˆitems_1 = _do_result2;
  _do_result2 = undefined;
  const ˆiter_2 = (
  /*istanbul ignore next*/
  ˆitems_1[Symbol.asyncIterator] || ˆitems_1[Symbol.iterator]).call(ˆitems_1);
  _do_result = [(await ˆiter_2.next()).value, (await ˆiter_2.next()).value];
}
const [foo, bar] = _do_result;
_do_result = undefined;"
`;
