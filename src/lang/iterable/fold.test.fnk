{fink2js} = import '../../testing/generate.fnk'
{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'



describe 'gen 2', fn:
  it 'compiles', fn:
    expect
      fink2js '
        {_fold_} = import "@fink/js-interop/iter.js"
        fold item, prev=0:
          ni = item + prev
          item * ni
      '
      to_match_snapshot

    expect
      fink2js '
        {_fold_} = import "@fink/js-interop/iter.js"
        fold item, prev=0, acc=1:
          [item * acc + prev, acc + 1]
      '
      to_match_snapshot

    expect
      fink2js '
        {_fold_} = import "@fink/js-interop/iter.js"
        fold item:
          item
      '
      to_match_snapshot




describe 'fold', fn:
  it 'compiles', fn:
    expect
      fink2js '
        fold item, prev=0:
          ni = item + prev
          item * ni
      '
      to_match_snapshot


   it 'compiles with accu', fn:
    expect
      fink2js '
        fold item, prev=0, acc=1:
          [item * acc + prev, acc + 1]
      '
      to_match_snapshot


  it 'compiles without using prev result', fn:
    expect
      fink2js '
        fold item:
          item
      '
      to_match_snapshot


  it 'destructuring item', fn:
    expect
      fink2js '
        fold [foo, ...bar], prev=[]:
          [[foo, bar], ...prev]

        fold [...foo, bar], prev=[]:
          [[foo, bar], ...prev]
      '
      to_match_snapshot


  it 'destructuring prev result', fn:
    expect
      fink2js '
        fold item, [foo, ...bar]=[]:
          [item, bar, foo]

        fold item, [...foo, bar]=[]:
          [item, bar, foo]
      '
      to_match_snapshot



describe 'fold async', fn:
  it 'compiles', fn:
    expect
      fink2js '
        fold item, acc=0:
          ni = await item + acc
          item * acc
      '
      to_match_snapshot
