{returnStatement, ifStatement} = import'@babel/types'

{generator, for_of, yields, consts, eq, true_} = import '../../js/types'

{block_statement} = import '../block'
{transform_init} = import './common'



transform_until = fn node, ctx:
  {transform, unique_ident} = ctx

  item = unique_ident 'item'
  [item_val] = node.args;
  item_init = transform_init item_val, item, ctx

  items = unique_ident 'items'
  result = unique_ident 'result'

  [...expressions, last_expr] = node.exprs

  generator 'filter_until', [items],
    for_of [item, items],
      # should we yield before executing the condition?
      yields item

      item_init

      ...pipe expressions:
        map expr: block_statement expr, ctx

      consts result, transform last_expr

      ifStatement
        eq result, true_()
        returnStatement()



