{length} = import '@fink/std-lib/iter.fnk'

{consts, yields, lets, assign} = import '../../js/types.fnk'
{block_statement} = import '../block/init.fnk'



transform_init = fn left, right, {transform}:

  item_init = transform dict:
    type: 'assign'
    op: '='
    left
    right: {type: 'ident', value: right.name, loc: left.loc}
    loc: left.loc

  consts item_init.left, item_init.right



yield_expr = fn result, expr, {transform}:
  [yield_value, is_spread] = match expr:
    {type: 'spread'}: [expr.right, true]
    else: [expr, false]

  list:
    consts result, transform yield_value
    yields
      result
      is_spread



get_accs = fn node, last_expr, ctx:
  {unique_ident, transform} = ctx
  [, acc_arg] = node.args

  match node.args:
    2 == length ?:
      acc = unique_ident 'accu'
      acc_init = lets acc, transform acc_arg.right

      acc_assign = transform_init acc_arg.left, acc, ctx

      [result_expr, acc_expr] = last_expr.exprs
      next_acc_assign = assign acc, transform acc_expr

      [[acc_init], [acc_assign], result_expr, [next_acc_assign], acc]

    else:
      [[], [], last_expr, []]



get_item = fn node, ctx:
  {unique_ident} = ctx

  [item_arg] = node.args
  item = unique_ident 'item'

  match item_arg:
    {type: 'empty'}:
      [item, []]
    else:
      item_init = transform_init item_arg, item, ctx
      [item, [item_init]]



get_iter_helpers = fn node, ctx:
  {unique_ident, transform} = ctx

  [item, item_init] = get_item node, ctx

  # TODO move next line into get_accs?
  [...exprs, last_expr] = node.exprs
  [acc_init, acc_assign, result_expr1, next_accu, accu] = get_accs node, last_expr, ctx

  items = unique_ident 'items'
  result = unique_ident 'result'

  item_acc_assign = [...item_init, ...acc_assign]

  [result_expr, result_is_spread] = match result_expr1:
    {type: 'spread'}: [result_expr1.right, true]
    else: [result_expr1, false]

  expressions = pipe exprs:
    map expr: block_statement expr, ctx
    [...?, consts result, transform result_expr]

  dict:
    accu, acc_init
    item, items
    item_acc_assign
    expressions
    result, result_is_spread
    next_accu


