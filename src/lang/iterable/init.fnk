{map, length, zip} = import '@fink/std-lib/iter.fnk'

{transform} = import '../transform.fnk'
{add_with_runtime, any} = import '../context.fnk'
{use_runtime_fn} = import '../runtime.fnk'


get_initial_values = fn node, args:
  [plain_args, initial_args] = match node:
    {args: 0 == length ?}:
      [[], []]
    else:
      [item_arg, ...rest] = args
      [[item_arg], rest]

  [rest_args, initial_values] = pipe initial_args:
    map fn arg: match arg:
      {type: 'assign'}:
        {left, right} = arg
        [left, right]
      else:
        [arg, {type: 'empty', loc: arg.loc}]
    zip ...?

  [[...plain_args, ...rest_args], initial_values]



transform_with_runtime_lib = fn iter_fn, node, ctx:
  args_len = length node.args

  [use_spread, exprs] = match node:
    {op: not ? in ['map', 'unfold']}:
      [[], node.exprs]

    {exprs: [..., {type: 'spread'}]}:
      spread = {type: 'literal', value: 'true', loc: node.loc}
      [...exprs, last] = node.exprs
      [[spread], [...exprs, last.right]]

    else:
      spread = {type: 'literal', value: 'false', loc: node.loc}
      [[spread], node.exprs]

  [is_async, args] = match node.args:
    --- istanbul ignore else ---
    [{op: 'await'}]:
      async = {type: 'literal', value: 'true', loc: node.loc}
      [{right}, ...rest] = node.args
      [async, [right, ...rest]]

    else:
      async = {type: 'literal', value: 'false', loc: node.loc}
      [async, node.args]

  [final_args, initial_values] = get_initial_values node, args

  [result, end_ctx] = transform
    rec:
      type: 'call'
      callee: {type: 'ident', value : iter_fn}
      args: list:
        rec:
          type: 'block'
          op: 'fn'
          args: final_args
          exprs: exprs
          loc: node.loc
        {type: 'number', value: '${args_len}', loc: node.loc}
        is_async
        ...use_spread
        ...initial_values
      loc: node.loc
    ctx

  [result, end_ctx]



transform_using_runtime = fn node, ctx:
  runtime_fn = '_${node.op}_'
  next_ctx = use_runtime_fn runtime_fn, ctx
  transform_with_runtime_lib runtime_fn, node, next_ctx



add = fn op: fn ctx:
  pipe ctx:
    add_with_runtime any, op, transform_using_runtime



add_iterables = fn ctx:
  pipe ctx:
    add 'fold'
    add 'unfold'
    add 'map'
    add 'filter'
    add 'while'
    add 'until'
