// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gen 2 compiles 1`] = `
"import { _map_ } from \\"@fink/js-interop/iter.js\\";

_map_((item) => item * 2, false, false);"
`;

exports[`gen 2 compiles 2`] = `
"import { _map_ } from \\"@fink/js-interop/iter.js\\";

_map_((item, acc = 0) => [item * 2 * acc, acc + 1], true, false);"
`;

exports[`gen 2 uses custom iterable impl. 1`] = `
"import { _map_ } from \\"@fink/js-interop/iter.js\\";

_map_((item) => [item, item * 2], false, true);"
`;

exports[`gen 2 uses legacy iterables 1`] = `
"{
  let ˆpipe_result_1 = [1, 2, 3];

  ˆpipe_result_1 = function map(ˆitems_4) {
    return {
      *[Symbol.iterator]() {
        for (const ˆitem_2 of ˆitems_4) {
          const item = ˆitem_2;
          const ˆresult_3 = item * 2;
          yield ˆresult_3;
        }
      }

    };
  }(ˆpipe_result_1);

  ˆpipe_result_1 = function map(ˆitems_7) {
    return {
      *[Symbol.iterator]() {
        for (const ˆitem_5 of ˆitems_7) {
          const item = ˆitem_5;
          const ˆresult_6 = item / 2;
          yield ˆresult_6;
        }
      }

    };
  }(ˆpipe_result_1);

  ˆpipe_result_1 = function filter(ˆitems_10) {
    return {
      *[Symbol.iterator]() {
        for (const ˆitem_8 of ˆitems_10) {
          const item = ˆitem_8;
          const ˆresult_9 = item % 2 === 0;
          if (ˆresult_9) yield ˆitem_8;
        }
      }

    };
  }(ˆpipe_result_1);
}"
`;

exports[`gen 2 uses multiple custom iterable impl. 1`] = `
"import { _map_, _filter_ } from \\"@fink/js-interop/iter.js\\";
{
  let ˆpipe_result_1 = [1, 2, 3];
  ˆpipe_result_1 = _map_((item) => item * 2, false, false)(ˆpipe_result_1);
  ˆpipe_result_1 = _map_((item) => item / 2, false, false)(ˆpipe_result_1);
  ˆpipe_result_1 = _filter_((item) => item % 2 === 0, false, false)(ˆpipe_result_1);
}"
`;

exports[`map async compiles 1`] = `
"(function map(ˆitems_3) {
  return {
    async *[Symbol.asyncIterator]() {
      for await (const ˆitem_1 of ˆitems_3) {
        const item = ˆitem_1;
        const ˆresult_2 = (await item) * 2;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles as flat map 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const [x, y] = ˆitem_1;
        const ˆresult_2 = [x, y];
        yield* ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles destructuring 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const [x, ...rest] = ˆitem_1;
        const ˆresult_2 = rest;
        yield ˆresult_2;
      }
    }

  };
});

(function map(ˆitems_7) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_4 of ˆitems_7) {
        let _do_result;

        {
          const [...ˆitems_5] = ˆitem_4;
          _do_result = [ˆitems_5.slice(0, -1), ˆitems_5.slice(-1)];
        }
        const [ignored, [last]] = _do_result;
        _do_result = undefined;
        const ˆresult_6 = last;
        yield ˆresult_6;
      }
    }

  };
});"
`;

exports[`map compiles multi line 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const item = ˆitem_1;
        const ni = foo(item);
        const ˆresult_2 = ni + 2;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles single line 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const item = ˆitem_1;
        const ˆresult_2 = item * 2;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles single line with default value 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const item = ˆitem_1 === undefined ? 123 : ˆitem_1;
        const ˆresult_2 = item * 2;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles single line with destructured list 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const [x, y] = ˆitem_1;
        const ˆresult_2 = x + y;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles single line with destructured obj 1`] = `
"(function map(ˆitems_3) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_3) {
        const {
          item
        } = ˆitem_1;
        const ˆresult_2 = item * 2;
        yield ˆresult_2;
      }
    }

  };
});"
`;

exports[`map compiles with acc 1`] = `
"(function map(ˆitems_5) {
  return {
    *[Symbol.iterator]() {
      let ˆaccu_2 = 0;

      for (const ˆitem_1 of ˆitems_5) {
        const {
          foo
        } = ˆitem_1;
        const acc = ˆaccu_2;
        const [ˆresult_3, ˆnext_accu_4] = [foo + acc, acc + 1];
        ˆaccu_2 = ˆnext_accu_4;
        yield ˆresult_3;
      }
    }

  };
});"
`;

exports[`map compiles with acc 2`] = `
"(function map(ˆitems_5) {
  return {
    *[Symbol.iterator]() {
      let ˆaccu_2 = 0;

      for (const ˆitem_1 of ˆitems_5) {
        const {
          foo
        } = ˆitem_1;
        const acc = ˆaccu_2;
        const [ˆresult_3, ˆnext_accu_4] = [[acc, foo], acc + 1];
        ˆaccu_2 = ˆnext_accu_4;
        yield* ˆresult_3;
      }
    }

  };
});"
`;

exports[`map compiles with foo 1`] = `
"(function map(ˆitems_5) {
  return {
    *[Symbol.iterator]() {
      for (const ˆitem_1 of ˆitems_5) {
        const {
          foo
        } = ˆitem_1;

        let _do_result;

        ˆmatch_4: {
          const ˆvalue_3 = foo;

          if (ˆvalue_3 === bar) {
            _do_result = spam;
            break ˆmatch_4;
          }
        }

        const ˆresult_2 = _do_result;
        _do_result = undefined;
        yield ˆresult_2;
      }
    }

  };
});"
`;
