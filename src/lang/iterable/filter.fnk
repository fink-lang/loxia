{returnStatement, ifStatement, expressionStatement} = import'@babel/types'

{generator, for_of, split_last, yields, consts} = import '../../js/types'

{block_statement} = import '../block'
{transform_init} = import './init'


transform_filter = fn node, ctx:
  {transform, unique_ident} = ctx

  item = unique_ident:: 'item'
  [item_val] = node.args;
  item_init = transform_init:: item_val, item, ctx

  items = unique_ident:: 'items'
  result = unique_ident:: 'result'

  [expressions, last_expr] = split_last:: node.exprs

  generator('filter')(items)::
    for_of(item, items)::
      item_init

      ...expressions.map:: block_statement:: {transform}

      consts:: result, transform:: last_expr

      ifStatement::
        result
        yields:: item
