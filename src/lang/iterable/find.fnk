{returnStatement, ifStatement} = import'@babel/types'

{for_of, split_last, func, consts, undef} = import '../../js/types'
{block_statement} = import '../block'
{transform_init} = import './init'


transform_find = fn node, ctx:
  {transform, unique_ident} = ctx

  item = unique_ident:: 'item'
  [item_val] = node.args;
  item_init = transform_init:: item_val, item, ctx

  items = unique_ident:: 'items'
  found = unique_ident:: 'found'

  [expressions, last_expr] = split_last:: node.exprs

  func(items)::

    for_of(item, items)::
      item_init

      ...expressions.map:: block_statement:: {transform}

      consts:: found, transform:: last_expr

      ifStatement::
        found
        returnStatement:: item

    undef()


