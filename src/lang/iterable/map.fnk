{generator, for_of, yields} = import '../../js/types'

{block_statement} = import '../block'
{transform_init} = import './init'


yield_expr = fn expr, {transform}:
  [yield_value, is_spread] = match expr:
    {type: 'spread'}: [expr.right, true]
    else: [expr, false]

  yields
    transform yield_value
    is_spread


transform_map = fn node, ctx:
  {unique_ident} = ctx

  item = unique_ident 'item'
  [item_val] = node.args;
  item_init = transform_init item_val, item, ctx

  items = unique_ident 'items'

  [...expressions, last_expr] = node.exprs

  generator 'map', [items],
    for_of [item, items],
      item_init

      ...pipe expressions:
        map expr: block_statement expr, ctx

      yield_expr last_expr, ctx