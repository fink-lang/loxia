{generator, for_of, yields} = import '../../js/types'

{block_statement} = import '../block'
{transform_init} = import './init'



transform_any = fn flatten: fn node, ctx:
  {transform, unique_ident} = ctx

  item = unique_ident:: 'item'
  [item_val] = node.args;
  item_init = transform_init:: item_val, item, ctx

  items = unique_ident:: 'items'

  [...expressions, last_expr] = node.exprs
  last_is_spread = last_expr.type == 'spread'

  yield_value = match last_is_spread:
    true: last_expr.right
    else: last_expr


  generator('map')(items)::
    for_of(item, items)::
      item_init

      ...pipe expressions:
        map expr: block_statement:: expr, ctx

      yields::
        transform:: yield_value
        flatten || last_is_spread


transform_map = transform_any:: false


transform_flat_map = transform_any:: true
