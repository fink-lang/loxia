{
  assign, generator, for_of, split_last, yield_or_stop,
  params, consts, yields, true_
} = import '../../js/types'
{whileStatement, blockStatement} = import '@babel/types'
{block_statement} = import '../block'
{transform_left} = import '../generic/left'


loop = fn ...body:
  whileStatement:: true_(), blockStatement:: body


get_acc = fn inputs:
  match inputs:
    {length: ? > 0}:
      [acc_init] = params:: inputs
      acc_id = acc_init.left || acc_init
      [acc_id, [acc_init]]
    else:
      [null, []]


transform_unfold = fn node, {transform, unique_ident}:
  [acc_id, acc_init] = get_acc::
    node.args.map(fn arg: transform_left:: transform:: arg)

  [expressions, last_expr] = split_last:: node.exprs

  [result, next_value] = match last_expr:
    {type: 'group'}: last_expr.exprs
    else: [last_expr, null]

  result_id = unique_ident:: 'result'

  acc_assign = match {acc_id, next_value}:
    {acc_id: null, next_value: null}: []
    {next_value: null}:
      acca = assign:: acc_id, result_id
      [acca]
    else:
      acca = assign:: acc_id, transform:: next_value
      [acca]


  generator('unfold')(...acc_init)(
    loop::
      ...expressions.map(block_statement:: {transform}),

      consts(result_id, transform:: result),

      yields(result_id),

      ...acc_assign
  )
