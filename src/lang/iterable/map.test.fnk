{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'

{fink2js} = import '../../testing/generate.fnk'



describe 'map', fn:

  it 'uses default runtime', fn:
    expect
      fink2js '
        pipe [1, 2, 3]:
          map item:
            item * 2

          map item, acc=0:
            [item + acc, acc + 1]

          map item, acc=0, shared_acc=0:
            [item + acc + shared_acc, acc + 1, shared_acc + 1]

          map item:
            ...item
      '
      to_match_snapshot


  it 'handles await', fn:
    expect
      fink2js '
        pipe [1, 2, 3]:
          map await item:
            item * 2
      '
      to_match_snapshot


  it 'handles initial args transform (ctx bug)', fn:
    expect
      fink2js '
        foo = map item, acc:
          true in spam
      '
      to_match_snapshot



describe 'custom runtime', fn:

  it 'uses multiple custom runtimes', fn:
    expect
      fink2js '
        {_map_} = import "./iter.fnk"
        {_filter_} = import "./iter-filter.fnk"
        pipe [1, 2, 3]:
          map item: item * 2
          map item: item / 2
          filter item: item % 2 == 0
      '
      to_match_snapshot



describe 'map legacy', fn:
  it 'compiles single line', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map item: item * 2
      '
      to_match_snapshot


  it 'compiles multi line', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map item:
          ni = foo item
          ni + 2
      '
      to_match_snapshot


  it 'compiles single line with default value', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map item=123: item * 2
      '
      to_match_snapshot


  it 'compiles single line with destructured obj', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map {item}: item * 2
      '
      to_match_snapshot


  it 'compiles single line with destructured list', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map [x, y]: x + y
      '
      to_match_snapshot


  it 'compiles as flat map', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map [x, y]:
          ...[x, y]
      '
      to_match_snapshot


  it 'compiles with foo', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map {foo}:
          match foo:
            bar: spam
      '
      to_match_snapshot


  it 'compiles with acc', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map {foo}, acc=0:
          [foo + acc, acc+1]
      '
      to_match_snapshot

    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map {foo}, acc=0:
          ...[[acc, foo], acc+1]
      '
      to_match_snapshot


  it 'compiles destructuring', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map [x, ...rest]:
         rest

        map [...ignored, last]:
         last
      '
      to_match_snapshot


  it 'compiles async', fn:
    expect
      fink2js '
        {_map_} = import "@fink/loxia:iter:legacy"
        map item:
          await item * 2
      '
      to_match_snapshot


