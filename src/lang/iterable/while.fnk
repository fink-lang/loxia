{returnStatement, ifStatement} = import'@babel/types'

{
  params, generator, for_of, split_last, yields, consts, neq, true_
} = import '../../js/types'
{is_call, is_calling} = import '../call/call'
{block_statement} = import '../block'


transform_while = fn node, {transform, unique_ident}:
  [item_param] = params:: node.args.map:: transform

  [expressions, last_expr] = split_last:: node.exprs

  item = unique_ident:: 'item'
  items = unique_ident:: 'items'
  result = unique_ident:: 'result'

  generator('filter_while')(items)::
    for_of(item, items)::
      consts:: item_param, item

      ...expressions.map:: block_statement:: {transform}

      consts:: result, transform:: last_expr

      ifStatement::
        neq:: result, true_()
        returnStatement()

      yields:: item

