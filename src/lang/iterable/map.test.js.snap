// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`flat_map compiles 1`] = `
"(function* map(ˆitems_1) {
  for (const item of ˆitems_1) {
    const ˆresult_2 = [spam + item];
    yield* ˆresult_2;
  }
});

(function* map(ˆitems_3) {
  for (const item of ˆitems_3) {
    const ˆresult_4 = [spam];
    yield* ˆresult_4;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles as flat map 1`] = `
"(function* map(ˆitems_1) {
  for (const [x, y] of ˆitems_1) {
    const ˆresult_2 = [x, y];
    yield* ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles multi line 1`] = `
"(function* map(ˆitems_1) {
  for (const item of ˆitems_1) {
    const ˆresult_2 = item * 2;
    yield ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles single line 1`] = `
"(function* map(ˆitems_1) {
  for (const item of ˆitems_1) {
    const ˆresult_2 = item * 2;
    yield ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles single line with default value 1`] = `
"(function* map(ˆitems_1) {
  for (const item = 123 of ˆitems_1) {
    const ˆresult_2 = item * 2;
    yield ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles single line with destructured array 1`] = `
"(function* map(ˆitems_1) {
  for (const [x, y] of ˆitems_1) {
    const ˆresult_2 = x + y;
    yield ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;

exports[`map compiles single line with destructured obj 1`] = `
"(function* map(ˆitems_1) {
  for (const {
    \\"item\\": item
  } of ˆitems_1) {
    const ˆresult_2 = item * 2;
    yield ˆresult_2;
  }
});

Object.assign(module.exports, {});"
`;
