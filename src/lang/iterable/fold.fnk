{assign, for_of, func, lets, undef} = import '../../js/types'
{block_statement} = import '../block'
{transform_init} = import './common'



transform_fold = fn node, ctx:
  {transform, unique_ident} = ctx

  [item_arg, acc_arg] = node.args

  item = unique_ident 'item'
  item_init = transform_init item_arg, item, ctx

  acc = unique_ident 'accu'

  acc_init = match acc_arg:
    {}: transform acc_arg.right
    else: undef _

  acc_assign = match acc_arg:
    {}: [transform_init acc_arg.left, acc, ctx]
    else: []


  items = unique_ident 'items'
  [...expressions, last_expr] = node.exprs

  func [items],
    lets acc, acc_init

    for_of [item, items],
      ...acc_assign
      item_init

      ...pipe expressions:
        map expr: block_statement expr, ctx

      assign acc, transform last_expr
    acc

