{replace_all, rx} = import '@fink/std-lib/regex.fnk'
{join} = import '@fink/std-lib/iter.fnk'



a2s = fn [arg=false, ...args], out=[]:
  match arg:
    false: match out:
      [?]: ' ${out | join ', '}'
      else: ''
    {i: ?}: a2s args, [...out, arg.i]
    else: a2s args, [...out, arg]



raw = fn s:
  replace_all s, rx'(\n)', '\\n'



serialize = fn [curr=false, ...rest], out='', indent='':
  match curr:
    false:
      out

    [{f: 'str'}]:
      [{f, args: [val]}, ids] = curr
      serialize
        rest
        '${out}\n${indent}${f} \'${raw val}\' >>${a2s ids}:'
        '  ${indent}'

    [{f: ? in ['cn', 'fn', 'fnr']}]:
      [{f: op, args: [args, body]}, ids] = curr
      serialize
        rest
        '${out}\n${indent}${op}${a2s args}:${serialize body, '', '  ${indent}'}
          ${indent}>>${a2s ids}:'
        '  ${indent}'

    [{f: ? in ['cc', 'cif', 'cf']}]:
      [{f: op, args}] = curr
      serialize
        rest
        '${out}\n${indent}${op}${a2s args}'
        '  ${indent}'

    [, [?]]:
      [{f, args}, ids] = curr
      serialize
        rest
        '${out}\n${indent}${f}${a2s args} >>${a2s ids}:'
        '  ${indent}'

