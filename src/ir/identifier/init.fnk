{add, any} = import '../context.fnk'

{ir_fn} = import '../transform.fnk'



get_ident = fn id, [scope, ...scopes]=[]:
  match scope:
    {(id): ?}:
      scope.(id)
    ?:
      get_ident id, scopes
    else:
      {i: id, loc: {}}


let = fn id, res_id, {loc}:
  expr = ir_fn '=', [id], {loc}
  [expr, [res_id]]



transform_ident = fn {value, loc}, res_id, ctx:
  id = get_ident value, ctx.scopes
  [[let id, res_id, {loc}], ctx]



add_ident = fn ctx:
  pipe ctx:
    add 'ident', any, transform_ident




