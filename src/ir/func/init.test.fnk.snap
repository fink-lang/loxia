// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`func compiles 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            lst_h tail_1, fn d_0:
              lst_t tail_1, fn tail_2:
                id a_0, fn left_1:
                  id b_0, fn right_0:
                    add left_1, right_0, fn left_0:
                      id c, fn right_1:
                        add left_0, right_1, fn result_0:
                          cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        id (fn args_1, ret_1: #fn
          lst_h args_1, fn foo_0:
            lst_t args_1, fn tail_3:
              id (fn args_2, ret_2: #fn
                lst_h args_2, fn bar_0:
                  lst_t args_2, fn tail_4:
                    id foo_0, fn callee_0:
                      lst_e fn cargs_0:
                        id bar_0, fn arg_0:
                          lst_a cargs_0, arg_0, fn cargs_1:
                            af callee_0, cargs_1, fn result_2:
                              cc ret_2, result_2
              ), fn result_1:
                cc ret_1, result_1
        ), fn f2_0:
          str 'f2', fn key_1:
            rec_s exports_1, key_1, f2_0, fn exports_2:
              lst_e fn drctvs_0:
                mod exports_2, drctvs_0, fn mod_0:"
`;

exports[`func compiles defaults 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        int '12', fn flbk_0:
          lst_h tail_0, fn hdm_0:
            ifv hdm_0, hdm_0, flbk_0, fn b_0:
              lst_t tail_0, fn tail_1:
                lst_h tail_1, fn c_0:
                  lst_t tail_1, fn tail_2:
                    id shrub, fn callee_0:
                      lst_e fn cargs_0:
                        id a_0, fn sprd_0:
                          lst_c cargs_0, sprd_0, fn cargs_1:
                            af callee_0, cargs_1, fn result_0:
                              id bar, fn callee_1:
                                lst_e fn cargs_2:
                                  af callee_1, cargs_2, fn result_1:
                                    cc ret_0, result_1
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles destructuring args 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn items_0:
      lst_t args_0, fn tail_3:
        lst_h items_0, fn a_0:
          lst_t items_0, fn tail_0:
            lst_h tail_0, fn items_1:
              lst_t tail_0, fn tail_2:
                lst_h items_1, fn b_0:
                  lst_t items_1, fn tail_1:
                    lst_h tail_3, fn items_2:
                      lst_t tail_3, fn tail_5:
                        lst_h items_2, fn c_0:
                          lst_t items_2, fn tail_4:
                            lst_r tail_4, fn rtail_0:
                              lst_r rtail_0, fn d_0:
                                lst_e fn lst_1:
                                  id a_0, fn left_0:
                                    id b_0, fn right_0:
                                      add left_0, right_0, fn item_1:
                                        lst_a lst_1, item_1, fn lst_0:
                                          id c_0, fn item_0:
                                            lst_a lst_0, item_0, fn result_0:
                                              cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles destructuring recs 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn drec_0:
      lst_t args_0, fn tail_0:
        str 'a', fn key_0:
          rec_g drec_0, key_0, fn a_0:
            str 'b', fn key_1:
              rec_g drec_0, key_1, fn b_0:
                lst_h tail_0, fn items_0:
                  lst_t tail_0, fn tail_2:
                    lst_h items_0, fn c_0:
                      lst_t items_0, fn tail_1:
                        lst_r tail_1, fn rtail_0:
                          lst_r rtail_0, fn d_0:
                            lst_e fn lst_1:
                              id a_0, fn left_0:
                                id b_0, fn right_0:
                                  add left_0, right_0, fn item_1:
                                    lst_a lst_1, item_1, fn lst_0:
                                      id c_0, fn item_0:
                                        lst_a lst_0, item_0, fn result_0:
                                          cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_2:
      rec_s exports_0, key_2, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles empty arg 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn unused_0:
          lst_t tail_0, fn tail_1:
            lst_h tail_1, fn unused_1:
              lst_t tail_1, fn tail_2:
                lst_h tail_2, fn b_0:
                  lst_t tail_2, fn tail_3:
                    id b_0, fn result_0:
                      cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles empty arg 2`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn unused_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            id b_0, fn result_0:
              cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles func of func 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn c_0:
      lst_t args_0, fn tail_0:
        id (fn args_1, ret_1: #fn
          lst_h args_1, fn d_0:
            lst_t args_1, fn tail_1:
              lst_h tail_1, fn e_0:
                lst_t tail_1, fn tail_2:
                  lst_e fn lst_1:
                    id d_0, fn item_1:
                      lst_a lst_1, item_1, fn lst_0:
                        id e_0, fn item_0:
                          lst_a lst_0, item_0, fn value_0:
                            id (fn ret_2: #cn
                              id (fn: #cn
                                id (fn: #cn
                                  cc ret_2
                                ), fn else_0:
                                  is_l value_0, fn is_lst_0:
                                    id (fn: #cn
                                      lst_h value_0, fn itm_0:
                                        int '2', fn val_0:
                                          eq itm_0, val_0, fn cond_0:
                                            id (fn: #cn
                                              lst_t value_0, fn tail_3:
                                                lst_h tail_3, fn itm_1:
                                                  int '1', fn val_1:
                                                    eq itm_1, val_1, fn cond_1:
                                                      id (fn: #cn
                                                        int '1', fn left_0:
                                                          id c_0, fn right_0:
                                                            div left_0, right_0, fn result_2:
                                                              cc ret_2, result_2
                                                      ), fn match_res_0:
                                                        cif cond_1, match_res_0, else_0
                                            ), fn match_1:
                                              cif cond_0, match_1, else_0
                                    ), fn match_0:
                                      cif is_lst_0, match_0, else_0
                              ), fn match_lst_0:
                                is_l value_0, fn is_lst_1:
                                  id (fn: #cn
                                    lst_h value_0, fn itm_2:
                                      int '1', fn val_2:
                                        eq itm_2, val_2, fn cond_2:
                                          id (fn: #cn
                                            lst_t value_0, fn tail_5:
                                              lst_h tail_5, fn itm_3:
                                                int '2', fn val_3:
                                                  eq itm_3, val_3, fn cond_3:
                                                    id (fn: #cn
                                                      id c_0, fn result_3:
                                                        cc ret_2, result_3
                                                    ), fn match_res_1:
                                                      cif cond_3, match_res_1, match_lst_0
                                          ), fn match_3:
                                            cif cond_2, match_3, match_lst_0
                                  ), fn match_2:
                                    cif is_lst_1, match_2, match_lst_0
                            ), fn match_lst_1:
                              ac match_lst_1, fn result_1:
                                cc ret_1, result_1
        ), fn result_0:
          cc ret_0, result_0
  ), fn fun5_0:
    str 'fun5', fn key_0:
      rec_s exports_0, key_0, fun5_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles other 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn c_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn d_0:
          lst_t tail_0, fn tail_1:
            int '123', fn x_0:
              id ni, fn value_0:
                id (fn ret_1: #cn
                  id (fn: #cn
                    id (fn: #cn
                      cc ret_1
                    ), fn else_0:
                      id c_0, fn left_0:
                        int '1', fn right_0:
                          add left_0, right_0, fn val_0:
                            eq value_0, val_0, fn cond_0:
                              id (fn: #cn
                                id d_0, fn left_1:
                                  int '1', fn right_1:
                                    add left_1, right_1, fn result_2:
                                      cc ret_1, result_2
                              ), fn match_res_0:
                                cif cond_0, match_res_0, else_0
                  ), fn match_0:
                    id c_0, fn left_2:
                      id x_0, fn right_2:
                        add left_2, right_2, fn val_1:
                          eq value_0, val_1, fn cond_1:
                            id (fn: #cn
                              id d_0, fn result_3:
                                cc ret_1, result_3
                            ), fn match_res_1:
                              cif cond_1, match_res_1, match_0
                ), fn match_1:
                  ac match_1, fn result_1:
                    cc ret_0, result_1
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles recursive calls 1`] = `
"
rec_e fn exports_0:
  z (fn args_0, ret_0, fun_0_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            id a_0, fn value_0:
              id (fn ret_1: #cn
                id (fn: #cn
                  id fun_0_0, fn callee_0:
                    lst_e fn cargs_0:
                      id a_0, fn left_0:
                        int '1', fn right_0:
                          sub left_0, right_0, fn arg_0:
                            lst_a cargs_0, arg_0, fn cargs_1:
                              af callee_0, cargs_1, fn result_1:
                                cc ret_1, result_1
                ), fn else_0:
                  id b_0, fn val_0:
                    eq value_0, val_0, fn cond_0:
                      id (fn: #cn
                        id a_0, fn result_2:
                          cc ret_1, result_2
                      ), fn match_res_0:
                        cif cond_0, match_res_0, else_0
              ), fn match_0:
                ac match_0, fn result_0:
                  cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles spread 1`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            lst_r tail_1, fn rtail_0:
              lst_r rtail_0, fn c_0:
                lst_e fn lst_1:
                  id a_0, fn left_0:
                    id b_0, fn right_0:
                      add left_0, right_0, fn item_1:
                        lst_a lst_1, item_1, fn lst_0:
                          id c_0, fn item_0:
                            lst_a lst_0, item_0, fn result_0:
                              cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func compiles spread 2`] = `
"
rec_e fn exports_0:
  id (fn args_0, ret_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_r tail_0, fn rtail_0:
          lst_h rtail_0, fn c_0:
            lst_t rtail_0, fn tail_1:
              lst_r tail_1, fn b_0:
                lst_e fn lst_2:
                  id a_0, fn item_2:
                    lst_a lst_2, item_2, fn lst_1:
                      id b_0, fn item_1:
                        lst_a lst_1, item_1, fn lst_0:
                          id c_0, fn item_0:
                            lst_a lst_0, item_0, fn result_0:
                              cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func eliminates tail calls 1`] = `
"
rec_e fn exports_0:
  z (fn args_0, ret_0, fun_0_0: #fn
    lst_h args_0, fn a_0:
      lst_t args_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            id a_0, fn value_0:
              id (fn ret_1: #cn
                id (fn: #cn
                  id fun_0_0, fn callee_0:
                    lst_e fn cargs_0:
                      id a_0, fn left_0:
                        int '1', fn right_0:
                          sub left_0, right_0, fn arg_0:
                            lst_a cargs_0, arg_0, fn cargs_1:
                              af callee_0, cargs_1, fn result_1:
                                cc ret_1, result_1
                ), fn else_0:
                  id b_0, fn val_0:
                    eq value_0, val_0, fn cond_0:
                      id (fn: #cn
                        id a_0, fn result_2:
                          cc ret_1, result_2
                      ), fn match_res_0:
                        cif cond_0, match_res_0, else_0
              ), fn match_0:
                ac match_0, fn result_0:
                  cc ret_0, result_0
  ), fn fun_0:
    str 'fun', fn key_0:
      rec_s exports_0, key_0, fun_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`func handles mutually recursive calls 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        = bar_0 >> callee_0:
          lst >> cargs_0:
            = a_0 >> arg_0:
              lst_a cargs_0, arg_0 >> cargs_1:
                af callee_0, cargs_1 >> result_0:
                  cc ret_0, result_0
  >> foo_0:
    str 'foo' >> key_0
      rec_s exports_0, key_0, foo_0 >> exports_1:
        fn args_1, ret_1:
          lst_h args_1 >> b_0:
            lst_t args_1 >> tail_1:
              = foo_0 >> callee_1:
                lst >> cargs_2:
                  = b_0 >> arg_1:
                    lst_a cargs_2, arg_1 >> cargs_3:
                      af callee_1, cargs_3 >> result_1:
                        cc ret_1, result_1
        >> bar_0:
          str 'bar' >> key_1
            rec_s exports_1, key_1, bar_0 >> exports_2:
              lst >> drctvs_0:
                mod exports_2, drctvs_0 >> mod_0:"
`;
