// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`func compiles 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> b_0:
          lst_t tail_0 >> tail_1:
            lst_h tail_1 >> d_0:
              lst_t tail_1 >> tail_2:
                = a_0 >> left_1:
                  = b_0 >> right_0:
                    + left_1, right_0 >> left_0:
                      = c >> right_1:
                        + left_0, right_1 >> result_0:
                          cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        fn args_1, ret_1:
          lst_h args_1 >> foo_0:
            lst_t args_1 >> tail_3:
              fn args_2, ret_2:
                lst_h args_2 >> bar_0:
                  lst_t args_2 >> tail_4:
                    = foo_0 >> callee_0:
                      lst >> cargs_0:
                        = bar_0 >> arg_0:
                          lst_a cargs_0, arg_0 >> cargs_1:
                            af callee_0, cargs_1 >> result_2:
                              cc ret_2, result_2
              >> result_1:
                cc ret_1, result_1
        >> f2_0:
          str 'f2' >> key_1:
            rec_s exports_1, key_1, f2_0 >> exports_2:
              lst >> drctvs_0:
                mod exports_2, drctvs_0 >> mod_0:"
`;

exports[`func compiles defaults 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        int 12 >> flbk_0:
          lst_h tail_0 >> hdm_0:
            ifv hdm_0, hdm_0, flbk_0 >> b_0:
              lst_t tail_0 >> tail_1:
                lst_h tail_1 >> c_0:
                  lst_t tail_1 >> tail_2:
                    = shrub >> callee_0:
                      lst >> cargs_0:
                        = a_0 >> sprd_0:
                          lst_c cargs_0, sprd_0 >> cargs_1:
                            af callee_0, cargs_1 >> result_0:
                              = bar >> callee_1:
                                lst >> cargs_2:
                                  af callee_1, cargs_2 >> result_1:
                                    cc ret_0, result_1
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles destructuring args 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> items_0:
      lst_t args_0 >> tail_3:
        lst_h items_0 >> a_0:
          lst_t items_0 >> tail_0:
            lst_h tail_0 >> items_1:
              lst_t tail_0 >> tail_2:
                lst_h items_1 >> b_0:
                  lst_t items_1 >> tail_1:
                    lst_h tail_3 >> items_2:
                      lst_t tail_3 >> tail_5:
                        lst_h items_2 >> c_0:
                          lst_t items_2 >> tail_4:
                            lst_r tail_4 >> rtail_0:
                              lst_r rtail_0 >> d_0:
                                lst >> lst_1:
                                  = a_0 >> left_0:
                                    = b_0 >> right_0:
                                      + left_0, right_0 >> item_1:
                                        lst_a lst_1, item_1 >> lst_0:
                                          = c_0 >> item_0:
                                            lst_a lst_0, item_0 >> result_0:
                                              cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles destructuring recs 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> drec_0:
      lst_t args_0 >> tail_0:
        str 'a' >> key_0:
          rec_g drec_0, key_0 >> a_0:
            str 'b' >> key_1:
              rec_g drec_0, key_1 >> b_0:
                lst_h tail_0 >> items_0:
                  lst_t tail_0 >> tail_2:
                    lst_h items_0 >> c_0:
                      lst_t items_0 >> tail_1:
                        lst_r tail_1 >> rtail_0:
                          lst_r rtail_0 >> d_0:
                            lst >> lst_1:
                              = a_0 >> left_0:
                                = b_0 >> right_0:
                                  + left_0, right_0 >> item_1:
                                    lst_a lst_1, item_1 >> lst_0:
                                      = c_0 >> item_0:
                                        lst_a lst_0, item_0 >> result_0:
                                          cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_2:
      rec_s exports_0, key_2, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles empty arg 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> unused_0:
          lst_t tail_0 >> tail_1:
            lst_h tail_1 >> unused_1:
              lst_t tail_1 >> tail_2:
                lst_h tail_2 >> b_0:
                  lst_t tail_2 >> tail_3:
                    = b_0 >> result_0:
                      cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles empty arg 2`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> unused_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> b_0:
          lst_t tail_0 >> tail_1:
            = b_0 >> result_0:
              cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles func of func 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> c_0:
      lst_t args_0 >> tail_0:
        fn args_1, ret_1:
          lst_h args_1 >> d_0:
            lst_t args_1 >> tail_1:
              lst_h tail_1 >> e_0:
                lst_t tail_1 >> tail_2:
                  lst >> lst_1:
                    = d_0 >> item_1:
                      lst_a lst_1, item_1 >> lst_0:
                        = e_0 >> item_0:
                          lst_a lst_0, item_0 >> value_0:
                            cn ret_2:
                              cn:
                                cn:
                                  cc ret_2
                                >> else_0:
                                  is_l value_0 >> is_lst_0:
                                    cn:
                                      lst_h value_0 >> itm_0:
                                        int 2 >> val_0:
                                          == itm_0, val_0 >> cond_0:
                                            cn:
                                              lst_t value_0 >> tail_3:
                                                lst_h tail_3 >> itm_1:
                                                  int 1 >> val_1:
                                                    == itm_1, val_1 >> cond_1:
                                                      cn:
                                                        int 1 >> left_0:
                                                          = c_0 >> right_0:
                                                            / left_0, right_0 >> result_2:
                                                              cc ret_2, result_2
                                                      >> match_res_0:
                                                        cif cond_1, match_res_0, else_0
                                            >> match_1:
                                              cif cond_0, match_1, else_0
                                    >> match_0:
                                      cif is_lst_0, match_0, else_0
                              >> match_lst_0:
                                is_l value_0 >> is_lst_1:
                                  cn:
                                    lst_h value_0 >> itm_2:
                                      int 1 >> val_2:
                                        == itm_2, val_2 >> cond_2:
                                          cn:
                                            lst_t value_0 >> tail_5:
                                              lst_h tail_5 >> itm_3:
                                                int 2 >> val_3:
                                                  == itm_3, val_3 >> cond_3:
                                                    cn:
                                                      = c_0 >> result_3:
                                                        cc ret_2, result_3
                                                    >> match_res_1:
                                                      cif cond_3, match_res_1, match_lst_0
                                          >> match_3:
                                            cif cond_2, match_3, match_lst_0
                                  >> match_2:
                                    cif is_lst_1, match_2, match_lst_0
                            >> match_lst_1:
                              ac match_lst_1 >> result_1:
                                cc ret_1, result_1
        >> result_0:
          cc ret_0, result_0
  >> fun5_0:
    str 'fun5' >> key_0:
      rec_s exports_0, key_0, fun5_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles other 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> c_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> d_0:
          lst_t tail_0 >> tail_1:
            int 123 >> x_0:
              = ni >> value_0:
                cn ret_1:
                  cn:
                    cn:
                      cc ret_1
                    >> else_0:
                      = c_0 >> left_0:
                        int 1 >> right_0:
                          + left_0, right_0 >> val_0:
                            == value_0, val_0 >> cond_0:
                              cn:
                                = d_0 >> left_1:
                                  int 1 >> right_1:
                                    + left_1, right_1 >> result_2:
                                      cc ret_1, result_2
                              >> match_res_0:
                                cif cond_0, match_res_0, else_0
                  >> match_0:
                    = c_0 >> left_2:
                      = x_0 >> right_2:
                        + left_2, right_2 >> val_1:
                          == value_0, val_1 >> cond_1:
                            cn:
                              = d_0 >> result_3:
                                cc ret_1, result_3
                            >> match_res_1:
                              cif cond_1, match_res_1, match_0
                >> match_1:
                  ac match_1 >> result_1:
                    cc ret_0, result_1
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles spread 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> b_0:
          lst_t tail_0 >> tail_1:
            lst_r tail_1 >> rtail_0:
              lst_r rtail_0 >> c_0:
                lst >> lst_1:
                  = a_0 >> left_0:
                    = b_0 >> right_0:
                      + left_0, right_0 >> item_1:
                        lst_a lst_1, item_1 >> lst_0:
                          = c_0 >> item_0:
                            lst_a lst_0, item_0 >> result_0:
                              cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func compiles spread 2`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        lst_r tail_0 >> rtail_0:
          lst_h rtail_0 >> c_0:
            lst_t rtail_0 >> tail_1:
              lst_r tail_1 >> b_0:
                lst >> lst_2:
                  = a_0 >> item_2:
                    lst_a lst_2, item_2 >> lst_1:
                      = b_0 >> item_1:
                        lst_a lst_1, item_1 >> lst_0:
                          = c_0 >> item_0:
                            lst_a lst_0, item_0 >> result_0:
                              cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func eliminates tail calls 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        lst_h tail_0 >> b_0:
          lst_t tail_0 >> tail_1:
            = a_0 >> value_0:
              cn ret_1:
                cn:
                  = fun_0 >> callee_0:
                    lst >> cargs_0:
                      = a_0 >> left_0:
                        int 1 >> right_0:
                          - left_0, right_0 >> arg_0:
                            lst_a cargs_0, arg_0 >> cargs_1:
                              af callee_0, cargs_1 >> result_1:
                                cc ret_1, result_1
                >> else_0:
                  = b_0 >> val_0:
                    == value_0, val_0 >> cond_0:
                      cn:
                        = a_0 >> result_2:
                          cc ret_1, result_2
                      >> match_res_0:
                        cif cond_0, match_res_0, else_0
              >> match_0:
                ac match_0 >> result_0:
                  cc ret_0, result_0
  >> fun_0:
    str 'fun' >> key_0:
      rec_s exports_0, key_0, fun_0 >> exports_1:
        lst >> drctvs_0:
          mod exports_1, drctvs_0 >> mod_0:"
`;

exports[`func handles mutually recursive calls 1`] = `
"
rec >> exports_0:
  fn args_0, ret_0:
    lst_h args_0 >> a_0:
      lst_t args_0 >> tail_0:
        = bar_0 >> callee_0:
          lst >> cargs_0:
            = a_0 >> arg_0:
              lst_a cargs_0, arg_0 >> cargs_1:
                af callee_0, cargs_1 >> result_0:
                  cc ret_0, result_0
  >> foo_0:
    str 'foo' >> key_0
      rec_s exports_0, key_0, foo_0 >> exports_1:
        fn args_1, ret_1:
          lst_h args_1 >> b_0:
            lst_t args_1 >> tail_1:
              = foo_0 >> callee_1:
                lst >> cargs_2:
                  = b_0 >> arg_1:
                    lst_a cargs_2, arg_1 >> cargs_3:
                      af callee_1, cargs_3 >> result_1:
                        cc ret_1, result_1
        >> bar_0:
          str 'bar' >> key_1
            rec_s exports_1, key_1, bar_0 >> exports_2:
              lst >> drctvs_0:
                mod exports_2, drctvs_0 >> mod_0:"
`;
