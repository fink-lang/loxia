{add, any} = import '../context.fnk'
{transform} = import '../transform.fnk'
{unique_or_id, ir_fn, get_refs} = import '../context.fnk'
{transform_dl} = import '../assignment/init.fnk'
{bind_x} = import '../identifier/init.fnk'



cc = fn ret_id, res_id, name_or_id, {loc}, ctx:
  ir_fn 'cc', [ret_id, res_id], name_or_id, {loc}, ctx



fnc = fn args_id, res_id, body, name_or_id, {loc}, ctx:
  [ret_id, cc_ctx] = unique_or_id 'ret', {loc}, ctx
  [ret, , next_ctx] = cc ret_id, res_id, , {loc}, cc_ctx
  ir_fn 'fn', [[args_id, ret_id], [...body, ...ret]], name_or_id, {loc}, next_ctx



zfnc = fn args_id, self_id, res_id, body, name_or_id, {loc}, ctx:
  [ret_id, cc_ctx] = unique_or_id 'ret', {loc}, ctx
  [ret, , next_ctx] = cc ret_id, res_id, , {loc}, cc_ctx
  ir_fn 'fn', [[args_id, ret_id, self_id], [...body, ...ret]], name_or_id, {loc}, next_ctx



transform_exprs = fn [expr=false, ...rest], ctx, out, last_id:
  match expr:
    false:
      [out, last_id, ctx]
    {value: 'undefined'}:
      [foo, id, next_ctx] = transform expr, 'result', ctx
      transform_exprs rest, next_ctx, [...out, ...foo], id
    else:
      [foo, id, next_ctx] = transform expr, 'result', ctx
      transform_exprs rest, next_ctx, [...out, ...foo], id



transform_args = fn {args: exprs, loc}, ctx:
  [args_id, next_ctx] = unique_or_id 'args', {loc}, ctx
  [args, , end_ctx] = transform_dl exprs, args_id, next_ctx
  [args, args_id, end_ctx]



transform_func = fn expr, res_id, {scopes, self_name=false, ...ctx}:
  func_ctx = {...ctx, scopes: [{}, ...scopes]}

  [self_id, args_ctx] = match self_name:
    false:
      [false, func_ctx ]
    else:
      [self_id, bind_ctx] = unique_or_id '${res_id.i}', expr, func_ctx
      [self_id, bind_x {value: self_name}, self_id, bind_ctx]

  [args, args_id, body_ctx] = transform_args expr, args_ctx
  [exprs, fn_res_id, fn_ctx] = transform_exprs expr.exprs, body_ctx, []
  body = [...args, ...exprs]

  [fun, , end_ctx] = match self_id:
    ? != false and 0 < get_refs ?, fn_ctx:
      zfnc args_id, self_id, fn_res_id, body, res_id, expr, fn_ctx
    else:
      fnc args_id, fn_res_id, body, res_id, expr, fn_ctx

  [fun, {...end_ctx, scopes}]



add_func = fn ctx:
  pipe ctx:
    add any, 'fn', transform_func
