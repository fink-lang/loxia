{add, any} = import '../context.fnk'
{transform, ir_fn} = import '../transform.fnk'
{str} = import '../literals/string.fnk'



rec_g = fn rec_id, key_id, {loc}:
  ir_fn 'rec_g', [rec_id, key_id], {loc}



transform_member = fn {left, right, loc}, result, ctx:
  [left_exprs, left_id, key_ctx] = transform left, 'left', ctx

  [key, key_id, next_ctx] = match right:
    {type: 'ident'}:
      str right.value, 'key', right, key_ctx
    else:
      transform right, 'key', key_ctx

  out = rec_g left_id, key_id, {loc}

  [[...left_exprs, ...key, [out, [result]]], next_ctx]



add_member = fn ctx:
  pipe ctx:
    add any, '.', transform_member
