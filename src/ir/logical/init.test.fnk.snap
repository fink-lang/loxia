// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`logical compiles 1`] = `
"
rec_e fn exports_0:
  id a, fn left_0:
    id b, fn left_1:
      id c, fn right_1:
        or left_1, right_1, fn right_0:
          or left_0, right_0, fn foo_0:
            str 'foo', fn key_0:
              rec_s exports_0, key_0, foo_0, fn exports_1:
                id a, fn left_2:
                  id b, fn left_3:
                    id c, fn right_3:
                      and left_3, right_3, fn right_2:
                        and left_2, right_2, fn bar_0:
                          str 'bar', fn key_1:
                            rec_s exports_1, key_1, bar_0, fn exports_2:
                              id a, fn right_4:
                                not right_4, fn spam_0:
                                  str 'spam', fn key_2:
                                    rec_s exports_2, key_2, spam_0, fn exports_3:
                                      lst_e fn drctvs_0:
                                        mod exports_3, drctvs_0, fn mod_0:"
`;

exports[`logical compiles as partial 1`] = `
"ˆpartial => ˆpartial || foo(ˆpartial);

ˆpartial => ˆpartial && spam;

ˆpartial => !ˆpartial;"
`;

exports[`types infers bool 1`] = `
"
rec_e fn exports_0(rec):
  id foo, fn left_0(???):
    id bar, fn right_0(???):
      and left_0, right_0, fn a_0(bool):
        str 'a', fn key_0(str):
          rec_s exports_0, key_0, a_0, fn exports_1(rec{a: bool}):
            id foo, fn left_1(???):
              id bar, fn right_1(???):
                or left_1, right_1, fn b_0(bool):
                  str 'b', fn key_1(str):
                    rec_s exports_1, key_1, b_0, fn exports_2(rec{a: bool, b: bool}):
                      id foo, fn right_2(???):
                        not right_2, fn c_0(bool):
                          str 'c', fn key_2(str):
                            rec_s exports_2, key_2, c_0, fn exports_3(rec{a: bool, b: bool, c: bool}):
                              id foo, fn left_2(???):
                                lst_e fn lst_2(tpl):
                                  int '1', fn item_2(int):
                                    lst_a lst_2, item_2, fn lst_1(tpl[int]):
                                      int '2', fn item_1(int):
                                        lst_a lst_1, item_1, fn lst_0(tpl[int, int]):
                                          int '3', fn item_0(int):
                                            lst_a lst_0, item_0, fn right_3(tpl[int, int, int]):
                                              in left_2, right_3, fn d_0(bool):
                                                str 'd', fn key_3(str):
                                                  rec_s exports_3, key_3, d_0, fn exports_4(rec{a: bool, b: bool, c: bool, d: bool}):
                                                    lst_e fn drctvs_0(tpl):
                                                      mod exports_4, drctvs_0, fn mod_0(mod):"
`;
