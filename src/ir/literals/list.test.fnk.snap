// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`list compiles 1`] = `
"
rec_e fn exports_0:
  lst_e fn array1_0:
    str 'array1', fn key_0:
      rec_s exports_0, key_0, array1_0, fn exports_1:
        lst_e fn lst_0:
          int '1', fn item_0:
            lst_a lst_0, item_0, fn array2_0:
              str 'array2', fn key_1:
                rec_s exports_1, key_1, array2_0, fn exports_2:
                  lst_e fn lst_2:
                    int '1', fn item_2:
                      lst_a lst_2, item_2, fn lst_1:
                        int '2', fn item_1:
                          lst_a lst_1, item_1, fn array3_0:
                            str 'array3', fn key_2:
                              rec_s exports_2, key_2, array3_0, fn exports_3:
                                lst_e fn lst_5:
                                  int '1', fn item_4:
                                    lst_a lst_5, item_4, fn lst_4:
                                      lst_a lst_4, _, fn lst_3:
                                        int '2', fn item_3:
                                          lst_a lst_3, item_3, fn array4_0:
                                            str 'array4', fn key_3:
                                              rec_s exports_3, key_3, array4_0, fn exports_4:
                                                lst_e fn lst_10:
                                                  id a, fn left_5:
                                                    int '1', fn right_2:
                                                      add left_5, right_2, fn left_4:
                                                        int '45', fn right_3:
                                                          add left_4, right_3, fn left_3:
                                                            id b, fn right_4:
                                                              add left_3, right_4, fn left_2:
                                                                id c, fn right_5:
                                                                  add left_2, right_5, fn item_9:
                                                                    lst_a lst_10, item_9, fn lst_7:
                                                                      lst_e fn lst_9:
                                                                        int '1', fn item_8:
                                                                          lst_a lst_9, item_8, fn lst_8:
                                                                            int '2', fn item_7:
                                                                              lst_a lst_8, item_7, fn item_6:
                                                                                lst_a lst_7, item_6, fn lst_6:
                                                                                  int '3', fn left_1:
                                                                                    int '3', fn right_0:
                                                                                      add left_1, right_0, fn left_0:
                                                                                        int '2', fn right_1:
                                                                                          mul left_0, right_1, fn item_5:
                                                                                            lst_a lst_6, item_5, fn array5_0:
                                                                                              str 'array5', fn key_4:
                                                                                                rec_s exports_4, key_4, array5_0, fn exports_5:
                                                                                                  lst_e fn drctvs_0:
                                                                                                    mod exports_5, drctvs_0, fn mod_0:"
`;

exports[`list compiles spread 1`] = `
"
rec_e fn exports_0:
  lst_e fn lst_2:
    int '1', fn item_1:
      lst_a lst_2, item_1, fn lst_1:
        int '2', fn item_0:
          lst_a lst_1, item_0, fn lst_0:
            id b, fn items_0:
              lst_c lst_0, items_0, fn array1_0:
                str 'array1', fn key_0:
                  rec_s exports_0, key_0, array1_0, fn exports_1:
                    lst_e fn lst_7:
                      int '1', fn item_5:
                        lst_a lst_7, item_5, fn lst_6:
                          int '2', fn item_4:
                            lst_a lst_6, item_4, fn lst_5:
                              id b, fn items_1:
                                lst_c lst_5, items_1, fn lst_4:
                                  int '3', fn item_3:
                                    lst_a lst_4, item_3, fn lst_3:
                                      int '4', fn item_2:
                                        lst_a lst_3, item_2, fn array2_0:
                                          str 'array2', fn key_1:
                                            rec_s exports_1, key_1, array2_0, fn exports_2:
                                              lst_e fn drctvs_0:
                                                mod exports_2, drctvs_0, fn mod_0:"
`;

exports[`optimizations ignores empty concats 1`] = `
"
rec_e fn exports_0:
  tpl, fn lst_0:
    lst_c lst_0, b, fn foo_0:
      str 'foo', fn key_0:
        rec_s exports_0, key_0, foo_0, fn exports_1:
          tpl, fn ham_0:
            str 'ham', fn key_1:
              rec_s exports_1, key_1, ham_0, fn exports_2:
                tpl foo_0, fn spam_0:
                  str 'spam', fn key_2:
                    rec_s exports_2, key_2, spam_0, fn exports_3:
                      tpl, fn drctvs_0:
                        mod exports_3, drctvs_0, fn mod_0:"
`;

exports[`optimizations optimizes spreads 1`] = `
"const y_0 = [1, 2];
log(1, y_0, lala, lala, [1, 2], 3);
export const y = y_0;"
`;

exports[`optimizations removes tails 1`] = `
"
rec_e fn exports_0:
  tpl, fn lst_0:
    lst_c lst_0, shrub, fn dlst_0:
      tpl_i dlst_0, 0, fn bar_0:
        tpl_i dlst_0, 1, fn spam_0:
          tpl_i dlst_0, 2, fn ham_0:
            add bar_0, spam_0, fn left_0:
              add left_0, ham_0, fn ni_0:
                str 'ni', fn key_0:
                  rec_s exports_0, key_0, ni_0, fn exports_1:
                    tpl, fn drctvs_0:
                      mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`optimizations reuses item refs 1`] = `
"
rec_e fn exports_0:
  int '1', fn item_3:
    int '2', fn item_2:
      int '3', fn item_1:
        tpl item_2, item_3, fn foo_0:
          str 'foo', fn key_0:
            rec_s exports_0, key_0, foo_0, fn exports_1:
              int '1', fn left_1:
                int '2', fn right_1:
                  add left_1, right_1, fn item_7:
                    tpl item_3, item_2, item_1, foo_0, item_7, item_2, item_3, fn cargs_7:
                      af log, cargs_7, fn mex_3:
                        tpl, fn drctvs_0:
                          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`types captures tpl items types 1`] = `
"
rec_e fn exports_0(rec):
  lst_e fn lst_1(tpl):
    int '1', fn item_1(int):
      lst_a lst_1, item_1, fn lst_0(tpl[int]):
        int '2', fn item_0(int):
          lst_a lst_0, item_0, fn a_0(tpl[int, int]):
            str 'a', fn key_0(str):
              rec_s exports_0, key_0, a_0, fn exports_1(rec{a: tpl[int, int]}):
                lst_e fn lst_4(tpl):
                  str 'bar', fn str_0(str):
                    strt str_0, fn item_4(str):
                      lst_a lst_4, item_4, fn lst_3(tpl[str]):
                        bool true, fn item_3(bool):
                          lst_a lst_3, item_3, fn lst_2(tpl[str, bool]):
                            bool false, fn item_2(bool):
                              lst_a lst_2, item_2, fn b_0(tpl[str, bool, bool]):
                                str 'b', fn key_1(str):
                                  rec_s exports_1, key_1, b_0, fn exports_2(rec{a: tpl[int, int], b: tpl[str, bool, bool]}):
                                    lst_e fn lst_7(tpl):
                                      id b_0, fn items_0(tpl[str, bool, bool]):
                                        lst_c lst_7, items_0, fn lst_6(tpl[str, bool, bool]):
                                          int '3', fn item_6(int):
                                            lst_a lst_6, item_6, fn lst_5(tpl[str, bool, bool, int]):
                                              int '4', fn item_5(int):
                                                lst_a lst_5, item_5, fn c_0(tpl[str, bool, bool, int, int]):
                                                  str 'c', fn key_2(str):
                                                    rec_s exports_2, key_2, c_0, fn exports_3(rec{a: tpl[int, int], b: tpl[str, bool, bool], c: tpl[str, bool, bool, int, int]}):
                                                      lst_e fn drctvs_0(tpl):
                                                        mod exports_3, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers destructured 1`] = `
"
rec_e fn exports_0(rec):
  lst_e fn lst_2(tpl):
    int '1', fn item_2(int):
      lst_a lst_2, item_2, fn lst_1(tpl[int]):
        bool true, fn item_1(bool):
          lst_a lst_1, item_1, fn lst_0(tpl[int, bool]):
            str 'foo', fn str_0(str):
              strt str_0, fn item_0(str):
                lst_a lst_0, item_0, fn dlst_0(tpl[int, bool, str]):
                  lst_h dlst_0, fn a_0(int):
                    lst_t dlst_0, fn tail_0(tpl[bool, str]):
                      lst_h tail_0, fn b_0(bool):
                        lst_t tail_0, fn tail_1(tpl[str]):
                          lst_h tail_1, fn c_0(str):
                            lst_t tail_1, fn tail_2(tpl):
                              lst_e fn drctvs_0(tpl):
                                mod exports_0, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers destructured list 1`] = `
"
rec_e fn exports_0(rec):
  id foo, fn dlst_0(???):
    lst_h dlst_0, fn a_0(???):
      lst_t dlst_0, fn tail_0(lst):
        lst_h tail_0, fn b_0(???):
          lst_t tail_0, fn tail_1(lst):
            lst_h tail_1, fn c_0(???):
              lst_t tail_1, fn tail_2(lst):
                lst_e fn drctvs_0(tpl):
                  mod exports_0, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers tpl and lst 1`] = `
"
rec_e fn exports_0(rec):
  lst_e fn a_0(tpl):
    str 'a', fn key_0(str):
      rec_s exports_0, key_0, a_0, fn exports_1(rec{a: tpl}):
        lst_e fn lst_1(tpl):
          int '1', fn item_1(int):
            lst_a lst_1, item_1, fn lst_0(tpl[int]):
              int '2', fn item_0(int):
                lst_a lst_0, item_0, fn b_0(tpl[int, int]):
                  str 'b', fn key_1(str):
                    rec_s exports_1, key_1, b_0, fn exports_2(rec{a: tpl, b: tpl[int, int]}):
                      lst_e fn lst_4(tpl):
                        id b_0, fn items_0(tpl[int, int]):
                          lst_c lst_4, items_0, fn lst_3(tpl[int, int]):
                            int '3', fn item_3(int):
                              lst_a lst_3, item_3, fn lst_2(tpl[int, int, int]):
                                int '4', fn item_2(int):
                                  lst_a lst_2, item_2, fn c_0(tpl[int, int, int, int]):
                                    str 'c', fn key_2(str):
                                      rec_s exports_2, key_2, c_0, fn exports_3(rec{a: tpl, b: tpl[int, int], c: tpl[int, int, int, int]}):
                                        lst_e fn lst_6(tpl):
                                          id foo, fn items_2(???):
                                            lst_c lst_6, items_2, fn lst_5(lst[...]):
                                              id b_0, fn items_1(tpl[int, int]):
                                                lst_c lst_5, items_1, fn d_0(lst[..., int, int]):
                                                  str 'd', fn key_3(str):
                                                    rec_s exports_3, key_3, d_0, fn exports_4(rec{a: tpl, b: tpl[int, int], c: tpl[int, int, int, int], d: lst[..., int, int]}):
                                                      lst_e fn lst_8(tpl):
                                                        id d_0, fn items_4(lst[..., int, int]):
                                                          lst_c lst_8, items_4, fn lst_7(lst[...]):
                                                            id d_0, fn items_3(lst[..., int, int]):
                                                              lst_c lst_7, items_3, fn e_0(lst[...]):
                                                                str 'e', fn key_4(str):
                                                                  rec_s exports_4, key_4, e_0, fn exports_5(rec{a: tpl, b: tpl[int, int], c: tpl[int, int, int, int], d: lst[..., int, int], e: lst[...]}):
                                                                    lst_e fn lst_10(tpl):
                                                                      id foo, fn items_5(???):
                                                                        lst_c lst_10, items_5, fn lst_9(lst[...]):
                                                                          int '5', fn item_4(int):
                                                                            lst_a lst_9, item_4, fn f_0(lst[..., int]):
                                                                              str 'f', fn key_5(str):
                                                                                rec_s exports_5, key_5, f_0, fn exports_6(rec{a: tpl, b: tpl[int, int], c: tpl[int, int, int, int], d: lst[..., int, int], e: lst[...], f: lst[..., int]}):
                                                                                  lst_e fn drctvs_0(tpl):
                                                                                    mod exports_6, drctvs_0, fn mod_0(mod):"
`;

exports[`unpacking list destructures recs 1`] = `
"
rec_e fn exports_0:
  id ni, fn dlst_0:
    lst_h dlst_0, fn drec_0:
      lst_t dlst_0, fn tail_0:
        str 'a', fn key_0:
          rec_g drec_0, key_0, fn a_0:
            str 'b', fn key_1:
              rec_g drec_0, key_1, fn b_0:
                lst_h tail_0, fn c_0:
                  lst_t tail_0, fn tail_1:
                    lst_e fn drctvs_0:
                      mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking list destructures simple 1`] = `
"
rec_e fn exports_0:
  lst_e fn lst_3:
    int '1', fn item_3:
      lst_a lst_3, item_3, fn lst_0:
        lst_e fn lst_2:
          int '2', fn item_2:
            lst_a lst_2, item_2, fn lst_1:
              int '3', fn item_1:
                lst_a lst_1, item_1, fn item_0:
                  lst_a lst_0, item_0, fn dlst_0:
                    lst_h dlst_0, fn a_0:
                      lst_t dlst_0, fn tail_0:
                        lst_h tail_0, fn dlst_1:
                          lst_t tail_0, fn tail_1:
                            lst_h dlst_1, fn b_0:
                              lst_t dlst_1, fn tail_2:
                                lst_h tail_2, fn c_0:
                                  lst_t tail_2, fn tail_3:
                                    lst_e fn lst_5:
                                      id b_0, fn item_5:
                                        lst_a lst_5, item_5, fn lst_4:
                                          id a_0, fn item_4:
                                            lst_a lst_4, item_4, fn foo_0:
                                              str 'foo', fn key_0:
                                                rec_s exports_0, key_0, foo_0, fn exports_1:
                                                  lst_e fn lst_7:
                                                    int '1', fn left_1:
                                                      int '2', fn right_1:
                                                        add left_1, right_1, fn item_7:
                                                          lst_a lst_7, item_7, fn lst_6:
                                                            int '3', fn left_0:
                                                              int '4', fn right_0:
                                                                mul left_0, right_0, fn item_6:
                                                                  lst_a lst_6, item_6, fn dlst_2:
                                                                    lst_h dlst_2, fn z_0:
                                                                      lst_t dlst_2, fn tail_4:
                                                                        id foo_0, fn dlst_3:
                                                                          lst_h dlst_3, fn x_0:
                                                                            lst_t dlst_3, fn tail_5:
                                                                              lst_h tail_5, fn y_0:
                                                                                lst_t tail_5, fn tail_6:
                                                                                  lst_e fn drctvs_0:
                                                                                    mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`unpacking list destructures spread 1`] = `
"
rec_e fn exports_0:
  id ni, fn dlst_0:
    lst_h dlst_0, fn a_0:
      lst_t dlst_0, fn tail_0:
        lst_h tail_0, fn b_0:
          lst_t tail_0, fn tail_1:
            lst_h tail_1, fn c_0:
              lst_t tail_1, fn tail_2:
                id ni, fn dlst_1:
                  lst_h dlst_1, fn unused_0:
                    lst_t dlst_1, fn tail_3:
                      lst_h tail_3, fn unused_1:
                        lst_t tail_3, fn tail_4:
                          lst_h tail_4, fn d_0:
                            lst_t tail_4, fn tail_5:
                              id ni, fn dlst_2:
                                lst_h dlst_2, fn head_0:
                                  lst_t dlst_2, fn tail_6:
                                    lst_r tail_6, fn rtail_0:
                                      lst_r rtail_0, fn tail_7:
                                        str '1234', fn str_0:
                                          strt str_0, fn dlst_3:
                                            lst_r dlst_3, fn rtail_1:
                                              lst_h rtail_1, fn last_0:
                                                lst_t rtail_1, fn tail_8:
                                                  lst_r tail_8, fn items_0:
                                                    str '123', fn str_1:
                                                      strt str_1, fn dlst_4:
                                                        lst_h dlst_4, fn first_0:
                                                          lst_t dlst_4, fn tail_9:
                                                            lst_h tail_9, fn second_0:
                                                              lst_t tail_9, fn tail_10:
                                                                lst_r tail_10, fn rtail_2:
                                                                  lst_h rtail_2, fn end_0:
                                                                    lst_t rtail_2, fn tail_11:
                                                                      lst_h tail_11, fn penultimate_0:
                                                                        lst_t tail_11, fn tail_12:
                                                                          lst_r tail_12, fn middle_0:
                                                                            str '123', fn str_2:
                                                                              strt str_2, fn dlst_5:
                                                                                lst_h dlst_5, fn ni_0:
                                                                                  lst_t dlst_5, fn tail_13:
                                                                                    lst_r tail_13, fn rtail_3:
                                                                                      lst_h rtail_3, fn nu_0:
                                                                                        lst_t rtail_3, fn tail_14:
                                                                                          str '123', fn str_3:
                                                                                            strt str_3, fn dlst_6:
                                                                                              lst_r dlst_6, fn rtail_4:
                                                                                                lst_h rtail_4, fn nuna_0:
                                                                                                  lst_t rtail_4, fn tail_15:
                                                                                                    lst_e fn drctvs_0:
                                                                                                      mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking list destructures with defaults 1`] = `
"
rec_e fn exports_0:
  id foo, fn dlst_0:
    int '12', fn flbk_0:
      lst_h dlst_0, fn hdm_0:
        ifv hdm_0, hdm_0, flbk_0, fn a_0:
          lst_t dlst_0, fn tail_0:
            int '34', fn flbk_1:
              lst_h tail_0, fn hdm_1:
                ifv hdm_1, hdm_1, flbk_1, fn b_0:
                  lst_t tail_0, fn tail_1:
                    lst_e fn lst_1:
                      id a_0, fn item_1:
                        lst_a lst_1, item_1, fn lst_0:
                          id b_0, fn item_0:
                            lst_a lst_0, item_0, fn out_0:
                              str 'out', fn key_0:
                                rec_s exports_0, key_0, out_0, fn exports_1:
                                  lst_e fn drctvs_0:
                                    mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`unpacking list destructures with defaults 2`] = `
"
rec_e fn exports_0:
  id foo, fn dlst_0:
    lst_e fn lst_1:
      int '1', fn item_1:
        lst_a lst_1, item_1, fn lst_0:
          int '2', fn item_0:
            lst_a lst_0, item_0, fn flbk_0:
              lst_h dlst_0, fn hdm_0:
                ifv hdm_0, hdm_0, flbk_0, fn dlst_1:
                  lst_t dlst_0, fn tail_0:
                    lst_h dlst_1, fn a_0:
                      lst_t dlst_1, fn tail_1:
                        int '0', fn flbk_1:
                          lst_h tail_1, fn hdm_1:
                            ifv hdm_1, hdm_1, flbk_1, fn b_0:
                              lst_t tail_1, fn tail_2:
                                int '34', fn flbk_2:
                                  lst_h tail_0, fn hdm_2:
                                    ifv hdm_2, hdm_2, flbk_2, fn c_0:
                                      lst_t tail_0, fn tail_3:
                                        lst_e fn lst_4:
                                          id a_0, fn item_4:
                                            lst_a lst_4, item_4, fn lst_3:
                                              id b_0, fn item_3:
                                                lst_a lst_3, item_3, fn lst_2:
                                                  id c_0, fn item_2:
                                                    lst_a lst_2, item_2, fn out_0:
                                                      str 'out', fn key_0:
                                                        rec_s exports_0, key_0, out_0, fn exports_1:
                                                          lst_e fn drctvs_0:
                                                            mod exports_1, drctvs_0, fn mod_0:"
`;
