{reverse} = import '@fink/std-lib/iter.fnk'
{transform} = import '../transform.fnk'
{unique_ident} = import '../context.fnk'



transform_item = fn expr, out_id, ctx:
  [tpl_id, item_ctx] = unique_ident 'lst', ctx
  match expr:
    {type: 'spread'}:
      [items, items_id, next_ctx] = transform expr.right, 'items', item_ctx
      [[...items, ['lst_c', [tpl_id, items_id], [out_id], {loc: expr.loc}]], tpl_id , next_ctx]

    {type: 'empty'}:
      [[['lst_a', [tpl_id, '_'], [out_id], {loc: expr.loc}]], tpl_id, item_ctx]

    else:
      [item, item_id, next_ctx] = transform expr, 'item', item_ctx
      [[...item, ['lst_a', [tpl_id, item_id], [out_id], {loc: expr.loc}]], tpl_id, next_ctx]



transform_items = fn [expr=false, ...rest], ctx, result_id, out=[]:
  match expr:
    false:
      [out, result_id, ctx]
    else:
      [item, list_id, next_ctx] = transform_item expr, result_id, ctx
      transform_items rest, next_ctx, list_id, [...item, ...out]



transform_list = fn node, result, ctx:
  exprs = reverse node.exprs
  [out, rec_id, next_ctx] = transform_items exprs, ctx, result
  [[['lst', [], [rec_id], {loc: node.loc}], ...out], next_ctx]

