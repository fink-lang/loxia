// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rec optimizations optimizes key-refs 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_2:
    str 'π', fn key_2:
      rec_s rec_2, key_2, π, fn rec_1:
        str 'ƒ', fn key_1:
          rec_s rec_1, key_1, ƒ, fn rec_0:
            str 'foo-bar', fn key_0:
              rec_s rec_0, key_0, foo-bar, fn foo_0:
                str 'foo', fn key_3:
                  rec_s exports_0, key_3, foo_0, fn exports_1:
                    tpl, fn drctvs_0:
                      mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles calculaged props 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_1:
    str 'spam', fn str_3:
      strt str_3, fn key_1:
        int '456', fn val_1:
          rec_s rec_1, key_1, val_1, fn rec_0:
            str 'spam-', fn str_0:
              id ham, fn sx_0:
                str '', fn str_1:
                  strt str_0, sx_0, str_1, fn key_0:
                    str 'ni', fn str_2:
                      strt str_2, fn val_0:
                        rec_s rec_0, key_0, val_0, fn foo_0:
                          str 'foo', fn key_2:
                            rec_s exports_0, key_2, foo_0, fn exports_1:
                              lst_e fn drctvs_0:
                                mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles key:val 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_2:
    str 'a', fn key_2:
      int '1', fn val_2:
        rec_s rec_2, key_2, val_2, fn rec_1:
          str 'b', fn key_1:
            int '123', fn val_1:
              rec_s rec_1, key_1, val_1, fn rec_0:
                str 'c-d-e', fn str_0:
                  strt str_0, fn key_0:
                    id cde, fn val_0:
                      rec_s rec_0, key_0, val_0, fn foo_0:
                        str 'foo', fn key_3:
                          rec_s exports_0, key_3, foo_0, fn exports_1:
                            lst_e fn drctvs_0:
                              mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles key:val 2`] = `
"
rec_e fn exports_0:
  rec_e fn rec_2:
    str 'a', fn key_2:
      int '123', fn val_2:
        rec_s rec_2, key_2, val_2, fn rec_1:
          str 'b', fn key_1:
            int '123', fn left_0:
              int '123', fn left_1:
                int '1345', fn right_1:
                  and left_1, right_1, fn right_0:
                    and left_0, right_0, fn val_1:
                      rec_s rec_1, key_1, val_1, fn rec_0:
                        str 'c', fn key_0:
                          id (fn args_0, ret_0: #fn
                            lst_h args_0, fn a_0:
                              lst_t args_0, fn tail_0:
                                lst_h tail_0, fn b_0:
                                  lst_t tail_0, fn tail_1:
                                    int '134', fn result_0:
                                      cc ret_0, result_0
                          ), fn val_0:
                            rec_s rec_0, key_0, val_0, fn obj7_0:
                              str 'obj7', fn key_3:
                                rec_s exports_0, key_3, obj7_0, fn exports_1:
                                  lst_e fn drctvs_0:
                                    mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles member expr as keys 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_5:
    id bar, fn sprd_1:
      rec_m rec_5, sprd_1, fn rec_2:
        str 'spam', fn key_1:
          rec_e fn rec_3:
            str 'ham', fn key_2:
              rec_e fn rec_4:
                str 'ni', fn key_3:
                  str 'ni', fn str_0:
                    strt str_0, fn val_3:
                      rec_s rec_4, key_3, val_3, fn val_2:
                        rec_s rec_3, key_2, val_2, fn val_1:
                          rec_s rec_2, key_1, val_1, fn rec_1:
                            str 'na', fn key_0:
                              int '1234', fn val_0:
                                rec_s rec_1, key_0, val_0, fn rec_0:
                                  id nu, fn sprd_0:
                                    rec_m rec_0, sprd_0, fn foo_0:
                                      str 'foo', fn key_4:
                                        rec_s exports_0, key_4, foo_0, fn exports_1:
                                          lst_e fn drctvs_0:
                                            mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles member expr as keys 2`] = `
"
rec_e fn exports_0:
  rec_e fn rec_5:
    id bar, fn sprd_1:
      rec_m rec_5, sprd_1, fn rec_1:
        str 'spam', fn key_0:
          rec_e fn rec_2:
            str 'ham', fn key_1:
              rec_e fn rec_3:
                str 'ni', fn key_2:
                  rec_e fn rec_4:
                    str 'na', fn key_3:
                      str 'ni', fn str_0:
                        strt str_0, fn val_3:
                          rec_s rec_4, key_3, val_3, fn val_2:
                            rec_s rec_3, key_2, val_2, fn val_1:
                              rec_s rec_2, key_1, val_1, fn val_0:
                                rec_s rec_1, key_0, val_0, fn rec_0:
                                  id nu, fn sprd_0:
                                    rec_m rec_0, sprd_0, fn foo_0:
                                      str 'foo', fn key_4:
                                        rec_s exports_0, key_4, foo_0, fn exports_1:
                                          lst_e fn drctvs_0:
                                            mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles shorthand 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_3:
    str 'foo', fn key_3:
      id foo, fn val_3:
        rec_s rec_3, key_3, val_3, fn rec_2:
          str 'π', fn key_2:
            id π, fn val_2:
              rec_s rec_2, key_2, val_2, fn rec_1:
                str 'ƒ', fn key_1:
                  id ƒ, fn val_1:
                    rec_s rec_1, key_1, val_1, fn rec_0:
                      str 'foo-bar', fn key_0:
                        id foo-bar, fn val_0:
                          rec_s rec_0, key_0, val_0, fn shrub_0:
                            str 'shrub', fn key_4:
                              rec_s exports_0, key_4, shrub_0, fn exports_1:
                                lst_e fn drctvs_0:
                                  mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles shorthand 2`] = `
"
rec_e fn exports_0:
  rec_e fn rec_3:
    str 'a', fn key_3:
      id a, fn val_3:
        rec_s rec_3, key_3, val_3, fn rec_2:
          str 'delete', fn key_2:
            id delete, fn val_2:
              rec_s rec_2, key_2, val_2, fn rec_1:
                str 'true', fn key_1:
                  id true, fn val_1:
                    rec_s rec_1, key_1, val_1, fn rec_0:
                      str 'false', fn key_0:
                        id false, fn val_0:
                          rec_s rec_0, key_0, val_0, fn foo_0:
                            str 'foo', fn key_4:
                              rec_s exports_0, key_4, foo_0, fn exports_1:
                                lst_e fn drctvs_0:
                                  mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles shorthand 3`] = `
"
rec_e fn exports_0:
  rec_e fn rec_0:
    str 'foo', fn str_0:
      strt str_0, fn key_0:
        rec_s rec_0, key_0, key_0, fn foo_0:
          str 'foo', fn key_1:
            rec_s exports_0, key_1, foo_0, fn exports_1:
              lst_e fn drctvs_0:
                mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles simple 1`] = `
"
rec_e fn exports_0:
  rec_e fn foo_0:
    str 'foo', fn key_0:
      rec_s exports_0, key_0, foo_0, fn exports_1:
        lst_e fn drctvs_0:
          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`record compiles spread 1`] = `
"
rec_e fn exports_0:
  rec_e fn rec_2:
    str 'a', fn key_1:
      id a, fn val_1:
        rec_s rec_2, key_1, val_1, fn rec_1:
          str 'b', fn key_0:
            id b, fn val_0:
              rec_s rec_1, key_0, val_0, fn rec_0:
                id c, fn sprd_0:
                  rec_m rec_0, sprd_0, fn foo_0:
                    str 'foo', fn key_2:
                      rec_s exports_0, key_2, foo_0, fn exports_1:
                        lst_e fn drctvs_0:
                          mod exports_1, drctvs_0, fn mod_0:"
`;

exports[`types captures kv types 1`] = `
"
rec_e fn exports_0(rec):
  int '123', fn foo_0(int):
    str 'foo', fn key_0(str):
      rec_s exports_0, key_0, foo_0, fn exports_1(rec{foo: int}):
        rec_e fn rec_1(rec):
          str 'foo', fn key_2(str):
            id foo_0, fn val_1(int):
              rec_s rec_1, key_2, val_1, fn rec_0(rec{foo: int}):
                str 'bar', fn key_1(str):
                  bool true, fn val_0(bool):
                    rec_s rec_0, key_1, val_0, fn bar_0(rec{foo: int, bar: bool}):
                      str 'bar', fn key_3(str):
                        rec_s exports_1, key_3, bar_0, fn exports_2(rec{foo: int, bar: rec{foo: int, bar: bool}}):
                          rec_e fn rec_3(rec):
                            str 'spam', fn key_4(str):
                              str 'ham', fn str_0(str):
                                strt str_0, fn val_2(str):
                                  rec_s rec_3, key_4, val_2, fn rec_2(rec{spam: str}):
                                    id bar_0, fn sprd_0(rec{foo: int, bar: bool}):
                                      rec_m rec_2, sprd_0, fn ni_0(rec{spam: str, foo: int, bar: bool}):
                                        str 'ni', fn key_5(str):
                                          rec_s exports_2, key_5, ni_0, fn exports_3(rec{foo: int, bar: rec{foo: int, bar: bool}, ni: rec{spam: str, foo: int, bar: bool}}):
                                            lst_e fn drctvs_0(tpl):
                                              mod exports_3, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers destructured types 1`] = `
"
rec_e fn exports_0(rec):
  rec_e fn rec_3(rec):
    str 'foo', fn key_3(str):
      int '123', fn val_3(int):
        rec_s rec_3, key_3, val_3, fn rec_2(rec{foo: int}):
          str 'bar', fn key_2(str):
            bool true, fn val_2(bool):
              rec_s rec_2, key_2, val_2, fn rec_0(rec{foo: int, bar: bool}):
                str 'spam', fn key_0(str):
                  rec_e fn rec_1(rec):
                    str 'ham', fn key_1(str):
                      str 'ni', fn str_0(str):
                        strt str_0, fn val_1(str):
                          rec_s rec_1, key_1, val_1, fn val_0(rec{ham: str}):
                            rec_s rec_0, key_0, val_0, fn drec_0(rec{foo: int, bar: bool, spam: rec{ham: str}}):
                              str 'foo', fn key_4(str):
                                rec_g drec_0, key_4, fn foo_0(int):
                                  str 'bar', fn key_5(str):
                                    rec_g drec_0, key_5, fn bar_0(bool):
                                      str 'spam', fn key_6(str):
                                        rec_g drec_0, key_6, fn val_4(rec{ham: str}):
                                          str 'ham', fn key_7(str):
                                            rec_g val_4, key_7, fn ham_0(str):
                                              lst_e fn drctvs_0(tpl):
                                                mod exports_0, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers hmap 1`] = `
"
rec_e fn exports_0(rec):
  rec_e fn rec_0(rec):
    str 'spam', fn key_0(str):
      bool true, fn val_0(bool):
        rec_s rec_0, key_0, val_0, fn a_0(rec{spam: bool}):
          str 'a', fn key_1(str):
            rec_s exports_0, key_1, a_0, fn exports_1(rec{a: rec{spam: bool}}):
              rec_e fn rec_1(rec):
                id shrub, fn callee_0(???):
                  lst_e fn cargs_0(tpl):
                    af callee_0, cargs_0, fn key_2:
                      int '123', fn val_1(int):
                        rec_s rec_1, key_2, val_1, fn b_0(hmap):
                          str 'b', fn key_3(str):
                            rec_s exports_1, key_3, b_0, fn exports_2(rec{a: rec{spam: bool}, b: hmap}):
                              rec_e fn rec_4(rec):
                                id a_0, fn sprd_1(rec{spam: bool}):
                                  rec_m rec_4, sprd_1, fn rec_3(rec{spam: bool}):
                                    id b_0, fn sprd_0(hmap):
                                      rec_m rec_3, sprd_0, fn rec_2(hmap):
                                        str 'foo', fn key_4(str):
                                          bool false, fn val_2(bool):
                                            rec_s rec_2, key_4, val_2, fn c_0(hmap):
                                              str 'c', fn key_5(str):
                                                rec_s exports_2, key_5, c_0, fn exports_3(rec{a: rec{spam: bool}, b: hmap, c: hmap}):
                                                  lst_e fn drctvs_0(tpl):
                                                    mod exports_3, drctvs_0, fn mod_0(mod):"
`;

exports[`types infers rec 1`] = `
"
rec_e fn exports_0(rec):
  rec_e fn a_0(rec):
    str 'a', fn key_0(str):
      rec_s exports_0, key_0, a_0, fn exports_1(rec{a: rec}):
        rec_e fn rec_0(rec):
          str 'foo', fn key_1(str):
            id bar, fn val_0(???):
              rec_s rec_0, key_1, val_0, fn b_0(rec{foo: ???}):
                str 'b', fn key_2(str):
                  rec_s exports_1, key_2, b_0, fn exports_2(rec{a: rec, b: rec{foo: ???}}):
                    rec_e fn rec_2(rec):
                      str 'spam', fn key_3(str):
                        id spam, fn val_1(???):
                          rec_s rec_2, key_3, val_1, fn rec_1(rec{spam: ???}):
                            id b_0, fn sprd_0(rec{foo: ???}):
                              rec_m rec_1, sprd_0, fn c_0(rec{spam: ???, foo: ???}):
                                str 'c', fn key_4(str):
                                  rec_s exports_2, key_4, c_0, fn exports_3(rec{a: rec, b: rec{foo: ???}, c: rec{spam: ???, foo: ???}}):
                                    lst_e fn drctvs_0(tpl):
                                      mod exports_3, drctvs_0, fn mod_0(mod):"
`;

exports[`unpacking record compiles defaults 1`] = `
"
rec_e fn exports_0:
  id foo, fn drec_0:
    int '1', fn flbk_0:
      str 'x', fn key_0:
        rec_g drec_0, key_0, fn hdm_0:
          ifv hdm_0, hdm_0, flbk_0, fn x_0:
            int '2', fn flbk_1:
              str 'π', fn key_1:
                rec_g drec_0, key_1, fn hdm_1:
                  ifv hdm_1, hdm_1, flbk_1, fn pi_0:
                    str 'ni', fn key_2:
                      rec_g drec_0, key_2, fn val_0:
                        str 'y', fn key_3:
                          rec_g val_0, key_3, fn y_0:
                            str 'z', fn key_4:
                              rec_g val_0, key_4, fn z_0:
                                lst_e fn drctvs_0:
                                  mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles empty 1`] = `
"
rec_e fn exports_0:
  id shrub, fn drec_0:
    str 'foo', fn key_0:
      rec_g drec_0, key_0, fn val_0:
        str 'bar', fn key_1:
          rec_g drec_0, key_1, fn bar_0:
            lst_e fn drctvs_0:
              mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles member expr as keys 1`] = `
"
rec_e fn exports_0:
  id foo, fn drec_0:
    str 'spam', fn key_0:
      rec_g drec_0, key_0, fn val_0:
        str 'ham', fn key_1:
          rec_g val_0, key_1, fn val_1:
            str 'ni', fn key_2:
              rec_g val_1, key_2, fn ni_0:
                rec_d drec_0, key_0, fn rest_0:
                  lst_e fn drctvs_0:
                    mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles member expr as keys 2`] = `
"
rec_e fn exports_0:
  id foo, fn drec_0:
    str 'spam', fn key_0:
      rec_g drec_0, key_0, fn val_0:
        str 'ham', fn key_1:
          rec_g val_0, key_1, fn val_1:
            str 'ni', fn key_2:
              rec_g val_1, key_2, fn val_2:
                str 'ni', fn key_3:
                  rec_g val_2, key_3, fn nu_0:
                    str 'foo', fn key_4:
                      rec_g val_2, key_4, fn val_3:
                        str 'bar', fn key_5:
                          rec_g val_3, key_5, fn bar_0:
                            rec_d drec_0, key_0, fn rest_0:
                              lst_e fn drctvs_0:
                                mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles member expr as keys 3`] = `
"
rec_e fn exports_0:
  id foo, fn drec_0:
    str 'foo-bar', fn key_0:
      rec_g drec_0, key_0, fn val_0:
        str 'spam-ham', fn key_1:
          rec_g val_0, key_1, fn val_1:
            str 'ni', fn key_2:
              rec_g val_1, key_2, fn val_2:
                str 'ni', fn key_3:
                  rec_g val_2, key_3, fn nu_0:
                    str 'foo', fn key_4:
                      rec_g val_2, key_4, fn val_3:
                        str 'bar', fn key_5:
                          rec_g val_3, key_5, fn bar_0:
                            rec_d drec_0, key_0, fn rest_0:
                              lst_e fn drctvs_0:
                                mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles nested 1`] = `
"
rec_e fn exports_0:
  id ni, fn drec_0:
    str 'a', fn key_0:
      rec_g drec_0, key_0, fn a_0:
        str 'b', fn key_1:
          rec_g drec_0, key_1, fn val_0:
            str 'c', fn key_2:
              rec_g val_0, key_2, fn c_0:
                str 'd', fn key_3:
                  rec_g val_0, key_3, fn d_0:
                    str 'e', fn key_4:
                      rec_g drec_0, key_4, fn e_0:
                        lst_e fn drctvs_0:
                          mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles nested 2`] = `
"
rec_e fn exports_0:
  id ni, fn drec_0:
    str 'a', fn key_0:
      rec_g drec_0, key_0, fn a_0:
        str 'b', fn key_1:
          rec_g drec_0, key_1, fn val_0:
            lst_h val_0, fn c_0:
              lst_t val_0, fn tail_0:
                lst_h tail_0, fn d_0:
                  lst_t tail_0, fn tail_1:
                    str 'e', fn key_2:
                      rec_g drec_0, key_2, fn e_0:
                        lst_e fn drctvs_0:
                          mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles simple 1`] = `
"
rec_e fn exports_0:
  id ni, fn drec_0:
    str 'a', fn key_0:
      rec_g drec_0, key_0, fn a_0:
        str 'b', fn str_0:
          strt str_0, fn key_1:
            rec_g drec_0, key_1, fn b_0:
              id foo, fn callee_0:
                lst_e fn cargs_0:
                  id bar, fn arg_0:
                    lst_a cargs_0, arg_0, fn cargs_1:
                      af callee_0, cargs_1, fn key_2:
                        rec_g drec_0, key_2, fn val_0:
                          str 'c', fn key_3:
                            rec_g val_0, key_3, fn c_0:
                              lst_e fn drctvs_0:
                                mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record compiles spread 1`] = `
"
rec_e fn exports_0:
  id foo, fn drec_0:
    str 'a', fn key_0:
      rec_g drec_0, key_0, fn a_0:
        str 'a', fn key_1:
          rec_g drec_0, key_1, fn val_0:
            str 'b', fn key_2:
              rec_g val_0, key_2, fn b_0:
                str 'c', fn key_3:
                  rec_g val_0, key_3, fn c_0:
                    rec_d drec_0, key_0, key_1, fn f_0:
                      lst_e fn drctvs_0:
                        mod exports_0, drctvs_0, fn mod_0:"
`;

exports[`unpacking record destructuress tpls 1`] = `
"
rec_e fn exports_0:
  id shrub, fn drec_0:
    str 'foo', fn key_0:
      rec_g drec_0, key_0, fn val_0:
        lst_h val_0, fn bar_0:
          lst_t val_0, fn tail_0:
            lst_h tail_0, fn spam_0:
              lst_t tail_0, fn tail_1:
                lst_e fn drctvs_0:
                  mod exports_0, drctvs_0, fn mod_0:"
`;
