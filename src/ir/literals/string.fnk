{transform, ir_fn} = import '../transform.fnk'
{unique_name} = import '../context.fnk'



str = fn value, name_or_id, {loc}, ctx:
  [str_id, next_ctx] = match name_or_id:
    {i: ?}: [name_or_id, ctx]
    else: unique_name name_or_id, {loc}, ctx

  expr = ir_fn 'str', [value], {loc}
  [[[expr, [str_id]]], str_id, next_ctx]



transform_parts = fn [expr=false, ...rest], ctx, ids=[], out=[]:
  match expr:
    false:
      [out, ids, ctx]

    {type: 'string:text'}:
      [exprs, str_id, next_ctx] = str expr.value, 'str', expr, ctx
      transform_parts rest, next_ctx, [...ids, str_id], [...out, ...exprs]

    else:
      [item, id, next_ctx] = transform expr, 'sx', ctx
      transform_parts rest, next_ctx, [...ids, id], [...out, ...item]



transform_string = fn node, result, ctx:
  [out, ids, next_ctx] = transform_parts node.exprs, ctx
  match node:
    {tag: false}:
      expr = ir_fn 'strt', ids, node
      [[...out, [expr, [result]]], next_ctx]
    else:
      [tag, tag_id, st_ctx] = transform node.tag, 'tag', next_ctx
      expr = ir_fn 'strtt', [tag_id, ...ids], node
      [[...tag, ...out, [expr, [result]]], st_ctx]
