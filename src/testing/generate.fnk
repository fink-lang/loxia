{new} = import '@fink/js-interop/reflect.js'
{is_empty} = import '@fink/std-lib/iter.fnk'

{parse} = import '@fink/larix/parser.fnk'

{generate} = import '../generate.fnk'
{serialize} = import '../ir/serialize.fnk'
{transform} = import '../ir/transform.fnk'
{init_ctx} = import '../ir/init.fnk'
{optimize} = import '../optimize/init.fnk'



fink2lir = fn source, options:
  filename = 'test.fnk'
  ast = parse source, filename
  ctx = init_ctx source, filename, options
  [exprs] = transform ast, 'mod', ctx

  serialize exprs



fink2lir_o = fn source:
  filename = 'test.fnk'
  ast = parse source, filename
  ctx = init_ctx source, filename
  [lir] = transform ast, 'result', ctx
  [out] = optimize lir
  serialize out



fink2js = fn source, options:
  filename = 'test.fnk'
  ast = parse source, filename

  match ast:
    {errors: is_empty ?}:
      {code, errors} = generate ast, filename, source, options
      match errors:
        is_empty ?:
          code
        else:
          {errors}
    else:
      {errors: ast.errors}




encode = fn str:
  pipe str:
    encodeURIComponent
    unescape
    new Buffer, ?
    ?.toString 'base64'



fink2js_sm = fn source:
  filename = 'test.fnk'
  ast = parse source, filename

  options = {module_type: 'mjs', source_maps: 'both'}
  match ast:
    {errors: is_empty ?}:
      {code, errors, source_map} = generate ast, filename, source, options
      # console.log 'https://sokra.github.io/source-map-visualization/#base64,${encode code},${encode JSON.stringify source_map},${encode source}'
      match errors:
        is_empty ?:
          code
        else:
          {errors}
    else:
      {errors: ast.errors}

