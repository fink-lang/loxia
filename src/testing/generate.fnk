{is_empty} = import '@fink/std-lib/iter.fnk'
{obj_to_json} = import '@fink/std-lib/json.fnk'

{parse} = import '@fink/larix/parser.fnk'

{generate} = import '../generate.fnk'
{init_ctx} = import '../ir/init.fnk'
{serialize} = import '../ir/serialize.fnk'
{transform} = import '../ir/transform.fnk'
{optimize} = import '../optimize/init.fnk'
{infer_types} = import '../types/init.fnk'



fink2lir = fn source, options:
  filename = 'test.fnk'
  ast = parse source, filename
  ctx = init_ctx source, filename, options
  [exprs] = transform ast, 'mod', ctx
  [out] = optimize exprs, options
  serialize out



fink2js = fn source, options:
  filename = 'test.fnk'
  ast = parse source, filename

  match ast:
    {errors: is_empty ?}:
      {code, errors} = generate ast, filename, source, options
      match errors:
        is_empty ?:
          code
        else:
          {errors}
    else:
      {errors: ast.errors}



fink2types = fn source, options:
  filename = 'test.fnk'
  ast = parse source, filename
  ctx = init_ctx source, filename, options
  [exprs] = transform ast, 'mod', ctx
  [out] = infer_types exprs, options
  serialize out



pretty_source_map = fn {sourcesContent: _, ...source_map}:
  obj_to_json source_map, , 2



fink2js_sm = fn source:
  filename = 'test.fnk'
  ast = parse source, filename
  options = {module_type: 'mjs', source_maps: true}
  {code, source_map} = generate ast, filename, source, options

  '${code}
   ${pretty_source_map source_map}
  '
