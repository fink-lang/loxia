// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSX extensions compiles block 1`] = `
"const foo_0 = spam();
const elem_0 = <Foobar>
  {bar(spam, foo_0, foo_0)}
</Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles expr group with call for attr value 1`] = `
"const elem_0 = <Foobar spam={ham(ni)} shrub={1234} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles fink expr as attr values 1`] = `
"const elem_0 = <Foobar spam={ham} shrub={1234} ni={-123}> foo </Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles fink expr with gt comparison 1`] = `
"const elem_0 = <Foobar spam={foo > 123} shrub={1234}> ni </Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles shothand props 1`] = `
"const elem_0 = <Foobar spam={spam} ham-ni={hamᜭni} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles spread 1`] = `
"const elem_0 = <Foobar spam={spam} {...ham} shrub={shrub} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles template str attr 1`] = `
"const elem_0 = <Foobar spam={\`ni: \${1 + 2}\`} />;
export const elem = elem_0;"
`;

exports[`jsx compiles elem from rec 1`] = `
"const Foobar_0 = spam.Foobar;
const elem_0 = <Foobar_0 />;
export const elem = elem_0;"
`;

exports[`jsx compiles empty elem 1`] = `
"const elem_0 = <b />;
export const elem = elem_0;"
`;

exports[`jsx compiles fragment 1`] = `
"const elem_0 = <></>;
export const elem = elem_0;"
`;

exports[`jsx compiles fragment with children 1`] = `
"const elem_0 = <>
  foo
  <p>bar</p>
</>;
export const elem = elem_0;"
`;

exports[`jsx compiles hypenate props 1`] = `
"const elem_0 = <a foo-bar=\\"1234\\" />;
export const elem = elem_0;"
`;

exports[`jsx compiles shorthand 1`] = `
"const elem_0 = <a />;
export const elem = elem_0;"
`;

exports[`jsx compiles with children and expr 1`] = `
"const elem_0 = <a>
  foo {ni + 1} {na}
  <b /> ham
  spam
  <c />
  ni
</a>;
export const elem = elem_0;"
`;

exports[`jsx compiles with expr params 1`] = `
"const elem_0 = <a foo={foo} bar={1234} />;
export const elem = elem_0;"
`;

exports[`jsx compiles with expr params 2`] = `
"const elem_0 = <a foo={foo} bar=\\"ni\\" />;
export const elem = elem_0;"
`;

exports[`jsx compiles with str params 1`] = `
"const elem_0 = <a foo={foo} bar=\\"ni\\" />;
export const elem = elem_0;"
`;

exports[`jsx foooooo 1`] = `
"import { createContext as createContext_0 } from \\"react\\";
import { CognitoUserPool as CognitoUserPool_0 } from \\"amazon-cognito-identity-js\\";
import { ˆnew as new_0 } from \\"@fink/js-interop/reflect.js\\";
import { use_state as use_state_0 } from \\"../hooks.js\\";
import { use_memo as use_memo_0 } from \\"../hooks.js\\";
const auth_ctx_0 = createContext_0();

const use_pool_0 = (userpool_id_0, client_id_0) => {
  return use_memo_0(() => {
    return new_0(CognitoUserPool_0, {
      UserPoolId: userpool_id_0,
      ClientId: client_id_0
    });
  }, [userpool_id_0, client_id_0]);
};

const AuthCtx_0 = drec_0 => {
  const dlst_0 = use_state_0(() => {
    return {
      state: \`init\`,
      user: false,
      session: false
    };
  });
  const state_0 = dlst_0[0];
  return <Provider_0 value={{
    pool: use_pool_0(drec_0.userpool_id, drec_0.client_id),
    ...state_0,
    update: new_state_0 => {
      return dlst_0[1]({ ...state_0,
        ...new_state_0
      });
    }
  }}>
    {drec_0.children}
  </Provider_0>;
};

export const auth_ctx = auth_ctx_0,
      use_pool = use_pool_0,
      AuthCtx = AuthCtx_0;"
`;
