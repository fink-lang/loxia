// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSX extensions compiles block 1`] = `
"const foo_0 = spam();
const chld_1 = bar(spam, foo_0, foo_0);
const elem_0 = <Foobar>
  {chld_1}
</Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles expr group with call for attr value 1`] = `
"const prpv_0 = ham(ni);
const elem_0 = <Foobar spam={prpv_0} shrub={1234} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles fink expr as attr values 1`] = `
"const elem_0 = <Foobar spam={ham} shrub={1234} ni={-123}> foo </Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles fink expr with gt comparison 1`] = `
"const elem_0 = <Foobar spam={foo > 123} shrub={1234}> ni </Foobar>;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles shothand props 1`] = `
"const elem_0 = <Foobar spam={spam} ham-ni={hamáœ­ni} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles spread 1`] = `
"const elem_0 = <Foobar spam={spam} {...ham} shrub={shrub} />;
export const elem = elem_0;"
`;

exports[`JSX extensions compiles template str attr 1`] = `
"const elem_0 = <Foobar spam={\`ni: \${1 + 2}\`} />;
export const elem = elem_0;"
`;

exports[`jsx compiles elem from rec 1`] = `
"const Shrub_0 = drec_0 => {
  const { ...props_0
  } = drec_0;
  const Foobar_0 = spam.Foobar;

  /* istanbul ignore next */
  return <Foobar_0 {...props_0} />;
};

export const Shrub = Shrub_0;"
`;

exports[`jsx compiles empty elem 1`] = `
"const elem_0 = <b />;
export const elem = elem_0;"
`;

exports[`jsx compiles fragment 1`] = `
"const elem_0 = <></>;
export const elem = elem_0;"
`;

exports[`jsx compiles fragment with children 1`] = `
"const elem_0 = <>
  foo
  <p>bar</p>
</>;
export const elem = elem_0;"
`;

exports[`jsx compiles hypenate props 1`] = `
"const elem_0 = <a foo-bar=\\"1234\\" />;
export const elem = elem_0;"
`;

exports[`jsx compiles shorthand 1`] = `
"const elem_0 = <a />;
export const elem = elem_0;"
`;

exports[`jsx compiles with children and expr 1`] = `
"const elem_0 = <a>
  foo {ni + 1} {na}
  <b /> ham
  spam
  <c />
  ni
</a>;
export const elem = elem_0;"
`;

exports[`jsx compiles with expr params 1`] = `
"const elem_0 = <a foo={foo} bar={1234} />;
export const elem = elem_0;"
`;

exports[`jsx compiles with expr params 2`] = `
"const elem_0 = <a foo={foo} bar=\\"ni\\" />;
export const elem = elem_0;"
`;

exports[`jsx compiles with str params 1`] = `
"const elem_0 = <a foo={foo} bar=\\"ni\\" />;
export const elem = elem_0;"
`;

exports[`jsx handles ident clashes for lowercaae elems 1`] = `
"const Foo_0 = drec_0 => {
  return <label>{drec_0.label}</label>;
};

export const Foo = Foo_0;"
`;
