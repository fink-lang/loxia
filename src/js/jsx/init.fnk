babel_types = import '@babel/types'
{
  jsxElement, jsxOpeningElement, jsxIdentifier, jsxClosingElement, jsxAttribute
  stringLiteral, jsxExpressionContainer, jsxText, jsxFragment, jsxOpeningFragment
  jsxClosingFragment, jsxSpreadAttribute
} = babel_types

{length} = import '@fink/std-lib/iter.fnk'

{add, set_js, get_js_literal} = import '../context.fnk'



transform_prop_id = fn key:
  match key:
    {type: 'Identifier'}:
      jsxIdentifier key.name

    {type: 'StringLiteral'}:
      jsxIdentifier key.value



transform_prop_val = fn value:
  match value:
    {type: 'TemplateLiteral', quasis: 1 == length ?}:
      # TODO: should happen at optimization level
      {quasis: [{value: {raw: str}}]} = value
      stringLiteral str
    else:
      jsxExpressionContainer value



transform_props = fn [prop=false, ...props], out=[]:
  match prop:
    false:
      out

    {type: 'ObjectProperty'}:
      attr = jsxAttribute
        transform_prop_id prop.key
        transform_prop_val prop.value
      transform_props props, [...out, attr]

    {type: 'SpreadElement'}:
      attr = jsxSpreadAttribute prop.argument
      transform_props props, [...out, attr]



transform_children = fn [chld=false, ...children], out=[]:
  match chld:
    false:
      out

    {type: 'TemplateLiteral', quasis: 1 == length ?}:
      # TODO: should happen at optimization level
      {quasis: [{value: {raw: str}}]} = chld
      js = jsxText str
      transform_children children, [...out, js]

    {type: 'JSXElement'}:
      transform_children children, [...out, chld]

    else:
      js = jsxExpressionContainer chld
      transform_children children, [...out, js]



transform_jxe = fn expr, ctx:
  [ , [name_id, props_id, chldrn_id], [res_id]] = expr

  id = jsxIdentifier name_id

  props = pipe props_id:
    get_js_literal ?, ctx
    ?.properties
    transform_props

  children = pipe chldrn_id:
    get_js_literal ?, ctx
    ?.elements
    transform_children


  js = jsxElement
    jsxOpeningElement id, props, 0 == length children
    jsxClosingElement id
    children

  set_js res_id, js, ctx



transform_jxf = fn expr, ctx:
  [ , [chldrn_id], [res_id]] = expr

  children = pipe chldrn_id:
    get_js_literal ?, ctx
    ?.elements
    transform_children

  js = jsxFragment
    jsxOpeningFragment _
    jsxClosingFragment _
    children

  set_js res_id, js, ctx



add_jsx = fn ctx:
  pipe ctx:
    add 'jxe', transform_jxe
    add 'jxf', transform_jxf


