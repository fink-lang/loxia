types = import '@babel/types'
{
  callExpression, breakStatement, assignmentExpression
  expressionStatement, returnStatement
  identifier, continueStatement, variableDeclaration, variableDeclarator
} = types
{null} = import '@fink/js-interop/nullish.fnk'
{map} = import '@fink/std-lib/iter.fnk'

{add, get_js, get_js_literal, set_js2, with_loc} = import '../context.fnk'
{get_value} = import '../../ir/context.fnk'
{ident} = import '../identifier/init.fnk'



as_call_args = fn args:
  match args:
    {type: 'ArrayExpression'}:
      pipe args:
        ?.elements
        map fn arg: match arg:
          null: identifier 'undefined'
          else: arg
        [...?]
    # else:
    #   [spreadElement args]



transform_apply_fn = fn expr, ctx:
  [{args: [callee_id, args_id]}] = expr
  callee = get_js callee_id, ctx
  args = as_call_args get_js args_id, ctx
  js = callExpression callee, args
  set_js2 expr, js, ctx



transform_continue_with_fn = fn expr, ctx:
  [{args: [callee_id, new_args_id]}] = expr

  {args_id} = get_value callee_id, ctx
  new_args = get_js new_args_id, ctx

  js = list:
    expressionStatement
      assignmentExpression
        '='
        ident args_id
        new_args
    continueStatement ident callee_id

  [js, ctx]



transform_apply_cont = fn expr, ctx:
  [{args: [cont_id]}, [res_id]] = expr

  cont = get_js cont_id, ctx
  {label: ret_ident} = cont

  js = list:
    # TODO should that happen inside the cn transform
    # TODO loc
    variableDeclaration 'let', list:
      variableDeclarator
        ret_ident
    cont
    # TODO loc
    variableDeclaration 'const', list:
      variableDeclarator
        ident res_id
        ret_ident

  [js, ctx]



transform_continue_with_cont = fn expr, ctx:
  # TODO: use false not _
  [{args: [ret_id, res_id='_']}] = expr
  ret = get_js_literal ret_id, ctx

  match res_id:
    '_':
      match ret:
        {type: 'ReturnStatement'}:
          [[ret], ctx]
        else:
          [[], ctx]

    else:
      res = get_js res_id, ctx
      match ret:
        {type: 'ReturnStatement'}:
          js = with_loc res, returnStatement res
          [[js], ctx]
        else:
          exprs = list:
            with_loc res, expressionStatement
              assignmentExpression '=', ret, res
            with_loc res, breakStatement ident ret_id
          [exprs, ctx]




add_calls = fn ctx:
  pipe ctx:
    add 'ac', transform_apply_cont
    add 'cc', transform_continue_with_cont
    add 'af', transform_apply_fn
    add 'cf', transform_continue_with_fn

