babel_types = import '@babel/types'
{binaryExpression, unaryExpression} = babel_types

{add, any} = import '../context.fnk'

{transform_with_partial_lr, transform_with_partial} = import '../partial/init.fnk'



transform_op = rec:
  '^': '**'



transform_arithmitic = fn {op, left, right}, ctx:
  {(op): operator=op} = transform_op

  [left_js, right_js, next_ctx, wrap_partial] = transform_with_partial_lr left, right, ctx

  js = binaryExpression operator, left_js, right_js

  wrap_partial js, next_ctx





transform_unary = fn {op, right}, ctx:
  [wrap_partial, right_js, next_ctx] = transform_with_partial right, ctx

  js = unaryExpression op, right_js

  wrap_partial js, next_ctx



add_arithmitic = fn ctx:
  pipe ctx:
    add 'arithm', any, transform_arithmitic
    add 'arithm:right', any, transform_arithmitic
    add 'arithm:prefix', any, transform_unary

