types = import '@babel/types'
{
  binaryExpression, unaryExpression
  identifier, variableDeclaration, variableDeclarator
} = types

{get_transformer, get_js, get_js_literal, set_js} = import './context.fnk'
{get_refs} = import '../ir/context.fnk'



ops_to_js = rec:
  '^': '**'
  '==': '==='
  '!=': '!=='
  'not': '!'


transform_binary = fn expr, ctx:
  [op, [left_id, right_id], [result_id], {loc}] = expr
  left = get_js left_id, ctx
  right = get_js right_id, ctx
  {(op): jsop=op} = ops_to_js
  js = rec:
    ...binaryExpression jsop, left, right
    loc
  set_js result_id, js, ctx



transform_unary = fn expr, ctx:
  [op, [right_id], [result_id], {loc}] = expr
  right = get_js right_id, ctx
  {(op): jsop=op} = ops_to_js
  js = rec:
    ...unaryExpression jsop, right
    loc
  set_js result_id, js, ctx



transform_binary_or_unary = fn expr, ctx:
  match expr:
    [, [, ?]]: transform_binary expr, ctx
    else: transform_unary expr, ctx



transform = fn expr, ctx:
  transform_expr = get_transformer expr, ctx
  transform_expr expr, ctx



transform_exprs = fn [expr=false, ...exprs], ctx, body=[]:
  match expr:
    false: [body, ctx]

    [? in ['cf', 'cc', 'cif', 'ac', 'imp']]:
      [body_exprs, next_ctx] = transform expr, ctx
      transform_exprs exprs, next_ctx, [...body, ...body_exprs]

    ['cn']:
      next_ctx = transform expr, ctx
      transform_exprs exprs, next_ctx, body

    ['mod']:
      [, , [res_id]] = expr
      next_ctx = transform expr, ctx
      js = get_js_literal res_id, next_ctx
      transform_exprs exprs, next_ctx, [...body, js]

    [ , , [?]]:
      [, , [res_id]] = expr
      next_ctx = transform expr, ctx

      match get_refs res_id, next_ctx:
        ? > 1:
          val = get_js_literal res_id, next_ctx
          js = match val:
            {type: 'VariableDeclaration'}:
              val
            else:
              id = identifier res_id
              variableDeclaration 'const', [variableDeclarator id, val]

          transform_exprs exprs, next_ctx, [...body, js]
        else:
          transform_exprs exprs, next_ctx, body





