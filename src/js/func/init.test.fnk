{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'
{fink2js} = import '../../testing/generate.fnk'


describe 'func', fn:
   it 'compiles no args', fn:
    expect
      fink2js "
        fun = fn: 'shrub'
        "
      to_match_snapshot


  it 'compiles simple', fn:
    expect
      fink2js '
        fun = fn a, b, c:
          a + b + c
        '
      to_match_snapshot


  it 'compiles empty arg', fn:
    expect
      fink2js '
        fun = fn a, , , b:
          a + b
        '
      to_match_snapshot

    expect
      fink2js '
        fun = fn a, , , b:
          b
        '
      to_match_snapshot

    expect
      fink2js '
        fun = fn _, a:
          a
        '
      to_match_snapshot


  it 'compiles spread', fn:
    expect
      fink2js '
        fun = fn a, b, ...c:
          [a + b, c]
        '
      to_match_snapshot


  it 'compiles destructuring args', fn:
    expect
      fink2js '
        fun = fn [a, [b]], [c, ...d]:
          [a + b, c, d]
        '
      to_match_snapshot

    expect
      fink2js '
        fun = fn {a, b}, [c, ...d]:
          [a + b, c]
        '
      to_match_snapshot


  it 'compiles middle spread', fn:
    expect
      fink2js '
        fun = fn a, b, ...c, d:
          [a + b, c, d]
        '
      to_match_snapshot


  it 'compiles destructuring args in body', fn:
    expect
      fink2js '
        fun = fn a, b, ...c:
          [d, e] = c
          [a + b, c, d, e]
        '
      to_match_snapshot


  it 'compiles func of func', fn:
    expect
      fink2js '
        fun5 = fn c: fn d, e:
          match [d, e]:
            [1, 2]: c
            [2, 1]: 1 / c
        '
      to_match_snapshot


  it 'compiles defaults', fn:
    expect
      fink2js '
        fun = fn a, b=12, c:
          ni = shrub a, b
          bar b, ni
        '
      to_match_snapshot


