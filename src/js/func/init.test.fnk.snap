// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`func compiles defaults 1`] = `
"export const fun = (a, b = 12, c) => {
  shrub(...a);
  return bar();
};"
`;

exports[`func compiles empty arg 1`] = `"export const fun = (a, ˆ_1, ˆ_2, b) => b;"`;

exports[`func compiles func of func 1`] = `
"export const fun5 = c => (d, e) => {
  const ˆvalue_1 = [d, e];

  /* istanbul ignore else */
  if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
    const [ˆa_3, ˆa_4] = ˆvalue_1;

    /* istanbul ignore else */
    if (ˆa_3 === 1)
      /* istanbul ignore else */
      if (ˆa_4 === 2) {
        return c;
      }
  }

  /* istanbul ignore else */
  if (typeof ˆvalue_1?.[Symbol.iterator] === \\"function\\") {
    const [ˆa_5, ˆa_6] = ˆvalue_1;

    /* istanbul ignore else */
    if (ˆa_5 === 2)
      /* istanbul ignore else */
      if (ˆa_6 === 1) {
        return 1 / c;
      }
  }
};"
`;

exports[`func compiles other 1`] = `
"export const fun = (c, d) => {
  const x = 123;
  {
    const ˆvalue_1 = ni;

    /* istanbul ignore else */
    if (ˆvalue_1 === c + x) {
      return d;
    }

    /* istanbul ignore else */
    if (ˆvalue_1 === c + 1) {
      return d + 1;
    }
  }
};"
`;

exports[`func compiles single line 1`] = `"export const fun = () => \`shrub\`;"`;

exports[`func compiles spread 1`] = `"export const fun = (a, b = 12, ...d) => a + b + c;"`;

exports[`func eliminates tail calls 1`] = `
"export const fun = (..._args) => {
  while (true) {
    const [a, b = 1] = _args;
    const ˆvalue_1 = a;

    /* istanbul ignore else */
    if (ˆvalue_1 === b) {
      return a;
    }

    {
      _args = [a - 1];
      continue;
    }
  }
};"
`;

exports[`func eliminates tail calls 2`] = `
"export const fun = (..._args) => {
  while (true) {
    const [...args] = _args;
    const ˆvalue_1 = a;

    /* istanbul ignore else */
    if (ˆvalue_1 === b) {
      _args = [...args];
      continue;
    }

    {
      return b;
    }
  }
};"
`;
