// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiles defaults 1`] = `
"const fun_0 = (a_0, hdm_0) => {
  const b_0 = undefined === hdm_0 ? 12 : hdm_0;
  return bar(b_0, shrub(a_0, b_0));
};

export const fun = fun_0;"
`;

exports[`compiles destructuring args 1`] = `
"const fun_0 = (items_0, items_2) => {
  return [items_0[0] + items_0[1][0], items_2[0], items_2.slice(1)];
};

export const fun = fun_0;"
`;

exports[`compiles destructuring args 2`] = `
"const fun_0 = (drec_0, items_0) => {
  return [drec_0.a + drec_0.b, items_0[0]];
};

export const fun = fun_0;"
`;

exports[`compiles destructuring args in body 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  return [a_0 + b_0, tail_1, tail_1[0], tail_1[1]];
};

export const fun = fun_0;"
`;

exports[`compiles empty arg 1`] = `
"const fun_0 = (a_0, tail_0, tail_1, b_0) => {
  return a_0 + b_0;
};

export const fun = fun_0;"
`;

exports[`compiles empty arg 2`] = `
"const fun_0 = (tail_0, tail_1, b_0) => {
  return b_0;
};

export const fun = fun_0;"
`;

exports[`compiles empty arg 3`] = `
"const fun_0 = (tail_0, a_0) => {
  return a_0;
};

export const fun = fun_0;"
`;

exports[`compiles func of func 1`] = `
"const fun5_0 = c_0 => {
  return (d_0, e_0) => {
    const value_0 = [d_0, e_0];

    /* istanbul ignore else */
    if (null != value_0) {
      /* istanbul ignore else */
      if (d_0 === 1) {
        /* istanbul ignore else */
        if (e_0 === 2) {
          return c_0;
        }
      }
    }

    /* istanbul ignore else */
    if (null != value_0) {
      /* istanbul ignore else */
      if (d_0 === 2) {
        /* istanbul ignore else */
        if (e_0 === 1) {
          return 1 / c_0;
        }
      }
    }

    return;
  };
};

export const fun5 = fun5_0;"
`;

exports[`compiles middle spread 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  const rtail_0 = [...tail_1].reverse();
  return [a_0 + b_0, [...rtail_0.slice(1)].reverse(), rtail_0[0]];
};

export const fun = fun_0;"
`;

exports[`compiles simple 1`] = `
"const fun_0 = (a_0, b_0, c_0) => {
  return a_0 + b_0 + c_0;
};

export const fun = fun_0;"
`;

exports[`compiles spread 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  return [a_0 + b_0, tail_1];
};

export const fun = fun_0;"
`;

exports[`func compiles no args 1`] = `
"const fun_0 = () => {
  return \`shrub\`;
};

export const fun = fun_0;"
`;
