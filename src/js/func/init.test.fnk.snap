// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`func compiles defaults 1`] = `
"const fun_0 = (a_0, hdm_0) => {
  const b_0 = undefined === hdm_0 ? 12 : hdm_0;
  const ni_0 = shrub(a_0, b_0);
  const result_1 = bar(b_0, ni_0);
  return result_1;
};

export const fun = fun_0;"
`;

exports[`func compiles destructuring args 1`] = `
"const fun_0 = (dlst_0, dlst_2) => {
  return [dlst_0[0] + dlst_0[1][0], dlst_2[0], dlst_2.slice(1)];
};

export const fun = fun_0;"
`;

exports[`func compiles destructuring args 2`] = `
"const fun_0 = (drec_0, dlst_0) => {
  return [drec_0.a + drec_0.b, dlst_0[0]];
};

export const fun = fun_0;"
`;

exports[`func compiles destructuring args in body 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  return [a_0 + b_0, tail_1, tail_1[0], tail_1[1]];
};

export const fun = fun_0;"
`;

exports[`func compiles empty arg 1`] = `
"const fun_0 = (a_0, tail_0, tail_1, b_0) => {
  return a_0 + b_0;
};

export const fun = fun_0;"
`;

exports[`func compiles empty arg 2`] = `
"const fun_0 = (tail_0, tail_1, b_0) => {
  return b_0;
};

export const fun = fun_0;"
`;

exports[`func compiles empty arg 3`] = `
"const fun_0 = (tail_0, a_0) => {
  return a_0;
};

export const fun = fun_0;"
`;

exports[`func compiles func of func 1`] = `
"const fun5_0 = c_0 => {
  return (d_0, e_0) => {
    const value_0 = [d_0, e_0];

    /* istanbul ignore else */
    if (null != value_0) {
      /* istanbul ignore else */
      if (d_0 === 1) {
        /* istanbul ignore else */
        if (e_0 === 2) {
          return c_0;
        }
      }
    }

    /* istanbul ignore else */
    if (null != value_0) {
      /* istanbul ignore else */
      if (d_0 === 2) {
        /* istanbul ignore else */
        if (e_0 === 1) {
          return 1 / c_0;
        }
      }
    }

    /* istanbul ignore next */
    return;
  };
};

export const fun5 = fun5_0;"
`;

exports[`func compiles middle spread 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  const rtail_0 = [...tail_1].reverse();
  return [a_0 + b_0, [...rtail_0.slice(1)].reverse(), rtail_0[0]];
};

export const fun = fun_0;"
`;

exports[`func compiles no args 1`] = `
"const fun_0 = () => {
  return \`shrub\`;
};

export const fun = fun_0;"
`;

exports[`func compiles simple 1`] = `
"const fun_0 = (a_0, b_0, c_0) => {
  return a_0 + b_0 + c_0;
};

export const fun = fun_0;"
`;

exports[`func compiles spread 1`] = `
"const fun_0 = (a_0, b_0, ...tail_1) => {
  return [a_0 + b_0, tail_1];
};

export const fun = fun_0;"
`;

exports[`func compiles spread 2`] = `
"const fun_0 = (a_0, ...tail_0) => {
  return [a_0, tail_0];
};

export const fun = fun_0;"
`;

exports[`func compiles spread 3`] = `
"const fun_0 = (...args_0) => {
  return [args_0];
};

export const fun = fun_0;"
`;

exports[`func compiles spread 4`] = `
"const fun_0 = (a_0, b_0, c_0, d_0) => {
  /* istanbul ignore else */
  if (a_0 === b_0) {
    return [a_0, c_0, d_0];
  }

  return b_0;
};

export const fun = fun_0;"
`;

exports[`recursive functions compiles spread 1`] = `
"const fun_0 = (...args_0) => {
  fun_0: do {
    const tail_0 = args_0.slice(1);
    const b_0 = args_0[1];

    /* istanbul ignore else */
    if (args_0[0] === b_0) {
      args_0 = [...tail_0.slice(1)];
      continue fun_0;
    }

    return b_0;
  } while (true);
};

export const fun = fun_0;"
`;

exports[`recursive functions compiles to while loop 1`] = `
"const gcd_0 = (...args_0) => {
  gcd_0: do {
    const x_0 = args_0[0];
    const y_0 = args_0[1];

    /* istanbul ignore else */
    if (y_0 === 0) {
      return x_0;
    }

    args_0 = [y_0, x_0 % y_0];
    continue gcd_0;
  } while (true);
};

export const gcd = gcd_0;"
`;

exports[`recursive functions compiles with self reference 1`] = `
"const foo_0 = cntr_0 => {
  /* istanbul ignore else */
  if (cntr_0 === 0) {
    return [cntr_0];
  }

  /* istanbul ignore else */
  if (cntr_0 === 1) {
    const items_1 = foo_0(cntr_0 - 1);
    return [...items_1];
  }

  const items_0 = foo_0(cntr_0 - 1);
  return [cntr_0, ...items_0];
};

export const foo = foo_0;"
`;
