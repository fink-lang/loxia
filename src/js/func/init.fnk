types = import '@babel/types'
{
  arrowFunctionExpression, blockStatement, returnStatement, restElement
  labeledStatement, doWhileStatement, booleanLiteral
} = types

{map} = import '@fink/std-lib/iter.fnk'

{get_refs, update_value} = import '../../ir/context.fnk'
{transform_exprs} = import '../transform.fnk'
{add, set_js, set_js2} = import '../context.fnk'
{ident} = import '../identifier/init.fnk'



clean_args = fn args:
  [..., last] = args
  pipe args:
    map fn arg: match arg:
      last: arg
      {type: 'RestElement'}: arg.argument
      else: arg
    [...?]



split_args_body = fn [expr=false, ...exprs], args_id, ctx, args=[], body=[]:
  match expr:
    false:
      fn_args = clean_args args
      [fn_args, body, ctx]

    [{f: 'lst_h', args: [{i: args_id.i}]}]:
      [...prev, ] = match args:
        [?, ?]: args
        else: [...args, ]

      [, [head_id]] = expr
      arg = ident head_id
      next_ctx = set_js2 expr, arg, ctx
      split_args_body exprs, args_id, next_ctx, [...prev, arg], body

    [{f: 'lst_r', args: [{i: args_id.i}]}]:
      split_args_body [], args_id, ctx, args, [...body, expr, ...exprs]

    [{f: 'lst_t', args: [{i: args_id.i}]}]:
      [, [tail_id]] = expr
      arg = ident tail_id
      rest = rec:
        ...restElement arg
        loc: arg.loc

      match get_refs tail_id, ctx:
        # the rest is used for more than just getting next arg and tail
        ? > 2:
          split_args_body [], tail_id, ctx, [...args, rest], [...body, ...exprs]
        # this is an ignored arg or last spread
        else:
          split_args_body exprs, tail_id, ctx, [...args, rest], body

    else:
      split_args_body exprs, args_id, ctx, args, [...body, expr]



transform_fn = fn expr, ctx:
  [{args: [fn_args, fn_block]}] = expr
  [args_id, ret_id] = fn_args

  ret = returnStatement _
  body_ctx = set_js ret_id, ret, ctx

  [args, block, fn_ctx] = split_args_body fn_block, args_id, body_ctx
  [body, next_ctx] = transform_exprs block, fn_ctx

  js = arrowFunctionExpression args, blockStatement body

  set_js2 expr, js, next_ctx



transform_recursive_fn = fn expr, ctx:
  [{args: [fn_args, block]}, [res_id]] = expr
  [args_id, ret_id] = fn_args

  ret = returnStatement _
  tmp_ctx = set_js ret_id, ret, ctx
  body_ctx = update_value res_id, {args_id}, tmp_ctx

  [body, next_ctx] = transform_exprs block, body_ctx

  js = arrowFunctionExpression
    [restElement ident args_id]
    blockStatement list:
      labeledStatement
        ident res_id
        doWhileStatement
          booleanLiteral true
          blockStatement body

  set_js2 expr, js, next_ctx



transform_cont = fn expr, ctx:
  [{args: [args, block]}] = expr

  [ret_id=false] = args
  [body, next_ctx]= transform_exprs block, ctx

  js = match ret_id:
    false:
      blockStatement body
    else:
      labeledStatement
        ident ret_id
        blockStatement body

  set_js2 expr, js, next_ctx



add_funcs = fn ctx:
  pipe ctx:
    add 'fn', transform_fn
    add 'fnr', transform_recursive_fn
    add 'cn', transform_cont

