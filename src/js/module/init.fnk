types = import '@babel/types'
{
  file, program, exportNamedDeclaration, exportDefaultDeclaration, identifier
  assignmentExpression, expressionStatement
  memberExpression, callExpression, objectProperty, objectPattern
  variableDeclaration, variableDeclarator
  isImportDefaultSpecifier, isImportSpecifier, interpreterDirective
} = types

{map} = import '@fink/std-lib/iter.fnk'
{slice} = import '@fink/std-lib/str.fnk'


{add, get_js, get_js_literal, with_loc} = import '../context.fnk'
{transform_exprs} = import '../transform.fnk'
{escape_ident} = import '../identifier/init.fnk'
{get_runtime_imports} = import './import.fnk'


[no_result] = []


transform_specifiers = fn {specifiers, source}:
  init = callExpression
    identifier 'require'
    [source]

  [first] = specifiers

  match first:
    isImportDefaultSpecifier ?:
      [{local}] = specifiers
      variableDeclaration 'const', [variableDeclarator local, init]

    isImportSpecifier ?:
      props = pipe specifiers:
        map fn node:
          objectProperty
            node.imported
            node.local
            false
            node.imported.name == node.local.name
        [...?]

      variableDeclaration 'const', list:
        variableDeclarator
          objectPattern [...props]
          init

    else:
      expressionStatement init



module_transforms = rec:
  ImportDeclaration: fn path:
    path.replaceWith transform_specifiers path.node
    no_result



get_exports = fn [prop=false, ...props], decls=[], dflt_decl=[]:
  match prop:
    false:
      named_decls = match  decls:
        [?]: [exportNamedDeclaration variableDeclaration 'const', decls]
        else: []
      [...named_decls, ...dflt_decl]

    else:
      {key, value} = prop
      match key:
        {type: 'StringLiteral', value: 'default'}:
          dd = exportDefaultDeclaration value
          ident = with_loc key, identifier escape_ident key.value
          decl = with_loc key, variableDeclarator ident, value
          get_exports props, [...decls, decl], [...dflt_decl, dd]

        {type: 'StringLiteral'}:
          ident = with_loc key, identifier escape_ident key.value
          decl = with_loc key, variableDeclarator ident, value
          get_exports props, [...decls, decl], dflt_decl

        else:
          ident = with_loc key, identifier escape_ident key.name
          decl = with_loc key, variableDeclarator ident, value
          get_exports props, [...decls, decl], dflt_decl



assign_st = fn left, right, value:
  expressionStatement
    assignmentExpression
      '='
      memberExpression
        identifier left
        right
      value



get_cjs_exports = fn [prop=false, ...props], exports=[]:
  match prop:
    false:
      exports
    else:
      {key, value} = prop
      match key:
        {type: 'StringLiteral', value: 'default'}:
          ident = with_loc key, identifier escape_ident key.value
          exp = with_loc key, assign_st 'exports', ident, value
          dflt = with_loc key, assign_st 'module', (identifier 'exports'), value
          get_cjs_exports props, [dflt, ...exports, exp]

        {type: 'StringLiteral'}:
          ident = with_loc key, identifier escape_ident key.value
          exp = with_loc key, assign_st 'exports', ident, value
          get_cjs_exports props, [...exports, exp]

        else:
          ident = with_loc key, identifier escape_ident key.name
          exp = with_loc key, assign_st 'exports', ident, value
          get_cjs_exports props, [...exports, exp]




transform_mod_exports = fn expr, ctx:
  [{args: [exports_id]}] = expr
  {properties: exports} = get_js exports_id, ctx

  export_statements = match ctx:
    {module_type: 'cjs'}: get_cjs_exports exports
    else: get_exports exports

  [export_statements, ctx]



transfrom_module = fn exprs, ctx:
  [body, next_ctx] = transform_exprs exprs, ctx
  [..., last] = exprs
  [{args: [ , drctvs_id]}] = last

  drctvs = get_js_literal drctvs_id, next_ctx

  directives = match drctvs:
    {elements: [{type: 'TemplateLiteral'}]}:
      [{quasis: [{value: {raw: value}}]}] = drctvs.elements
      [interpreterDirective slice value, 2]
    else:
      []

  runtime_imports = get_runtime_imports next_ctx

  js = file
    program
      [...runtime_imports, ...body]
      []
      'module'
      ...directives

  {...next_ctx, js}



add_module = fn ctx:
  pipe ctx:
    add 'mod', transform_mod_exports


