types = import '@babel/types'
{
  identifier, importDeclaration, importSpecifier, callExpression, stringLiteral
  importDefaultSpecifier, import: import_js
} = types
{ends_with, starts_with, slice, is_str} = import '@fink/std-lib/str.fnk'

{add, set_js, get_js, get_js_literal} = import '../context.fnk'
{escape_ident} = import '../identifier/init.fnk'



resolve_ext = fn import_url, options:
  match import_url:
    not ends_with ?, '.fnk':
      import_url

    starts_with ?, '.':
      ext = match options:
        {import: {ext: {rel: is_str ?}}}: options.import.ext.rel
        else: '.js'
      '${slice import_url, 0, -4}${ext}'

    else:
      ext = match options:
        {import: {ext: {abs: is_str ?}}}: options.import.ext.abs
        else: '.js'
      '${slice import_url, 0, -4}${ext}'



get_runtime_imports = fn ctx:
  specs = match ctx:
    {runtime.in: true}:
      list:
        importSpecifier
          identifier '_in_'
          identifier '_in_'

    else: []

  match specs:
    [?]: [importDeclaration specs, stringLiteral '@fink/js-interop/runtime.js']
    else: []




transform_import = fn expr, ctx:
  [ , [uri_id, key_id=false], [res_id=false]] = expr

  {quasis: [{value: {raw: value}}]} = get_js_literal uri_id, ctx
  uri = stringLiteral resolve_ext value, ctx

  specs = match [res_id, key_id]:
    [false]:
      []
    [, false]:
      [importDefaultSpecifier identifier res_id]
    else:
      {quasis: [{value: {raw: key}}]} = get_js key_id, ctx
      list:
        importSpecifier
          identifier res_id
          identifier escape_ident key

  js = importDeclaration specs, uri
  [[js], ctx]



transform_dyn_import = fn expr, ctx:
  [ , [uri_id], [res_id]] = expr

  uri = get_js uri_id, ctx

  js = callExpression
    import_js _
    [uri]

  set_js res_id, js, ctx



add_import = fn ctx:
  pipe ctx:
    add 'imp', transform_import
    add 'impd', transform_dyn_import

