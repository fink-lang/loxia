{
  assignmentExpression, returnStatement, callExpression,
  arrowFunctionExpression, expressionStatement,
  isDoExpression, isBlockStatement, isLabeledStatement, isTryStatement,
  isVariableDeclarator, isArrowFunctionExpression, isExpressionStatement,
  isReturnStatement, isProgram, isIfStatement
} = import '@babel/types'


{lets, assign, undef} = import './types'


get_body = fn path: path.get:: 'body'

consume_all = fold item, acc=null: null


last_expressions = fn path:
  match path:
    isDoExpression:: ?:
      body = get_body:: path
      [...last_expressions:: body]

    isBlockStatement:: ?:
      body = get_body:: path
      [..., last] = body
      match last:
        isExpressionStatement:: ?:
          [last]
        else:
          [...last_expressions:: last]

    isLabeledStatement:: ?:
      body = get_body:: path

      items = []
      body.traverse::
        {
          LabeledStatement: fn nested_match:
            nested_match.skip()
          ,
          BreakStatement: fn brk:
            last = brk.getSibling:: brk.key - 1
            # TODO: don't use mutation
            items.push:: last
            null
        }
      items

    # TODO: isTryStatement:: ?:
    else:
      block = path.get::'block'
      handler = path.get:: 'handler'
      body = get_body:: handler
      [
        ...last_expressions(block),
        ...last_expressions(body)
      ]


replace_with_return = fn path:
  pipe last_expressions:: path:
    map expr:
      match expr:
        {node: {expression: {operator:'throw'}}}:
          # no return throw ...
          expr.replaceWith::
            expressionStatement:: expr.node.expression

        else:
          expr.replaceWith::
            returnStatement:: expr.node.expression

      # TODO: no need for e.g. breaks after a return
      sibl = expr.getSibling:: expr.key + 1
      match {sibl}:
        # istanbul ignore else
        {sibl: {}}:
          sibl.remove()

    consume_all


simple = fn body, sl=false:
  match body:
    isBlockStatement:: ?:
      [stmnt, ...rest] = get_body:: body

      match rest:
        {length: 0}:
          # e.g. fn arg: match ...: ...
          match {sl, stmnt}:
            {sl: true, stmnt: isLabeledStatement:: ?}:
              stmnt.node.body
            # TODO:
            # {sl: true, stmnt: isIfStatement:: ?}:
            #   body.node
            else:
              simple:: stmnt
        else:
          body.node
    else:
      body.node


replace_with_assign = fn target, path:
  id = path.parentPath.scope.generateUidIdentifier:: 'do_result'
  #TODO: don't mutate
  Object.assign:: target.node, {init: id}

  target.parentPath.insertBefore:: lets:: id
  target.parentPath.insertBefore:: simple:: get_body:: path
  target.parentPath.insertAfter:: assign:: id, undef()

  pipe last_expressions:: path:
    map expr:
      expr.replaceWith::
        assignmentExpression:: '=', id, expr.node.expression

    consume_all


transform_do_expr = fn path:
  {parentPath: parent} = path

  match parent:
    isVariableDeclarator:: ?:
      replace_with_assign:: parent, path

    isArrowFunctionExpression:: ?:
      body = get_body:: path

      Object.assign::
        parent.node,
        {body: simple:: body, true}

      replace_with_return:: path

    isExpressionStatement:: ?:
      # this is used e.g. for conditional at the module level
      parent.replaceWith::
        get_body:: path

    isReturnStatement:: ?:
      body = get_body:: path

      parent.replaceWith::
        simple:: body, true

      replace_with_return:: path
    else:
      # e.g.
      # {
      #   foo:
      #     x = spam
      #     x + 3
      # }
      arrow = arrowFunctionExpression:: [], path.node
      path.replaceWith::
        callExpression:: arrow, []

  null

