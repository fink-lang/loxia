babel_types = import '@babel/types'
{
  assignmentExpression, returnStatement, expressionStatement
  isDoExpression, isBlockStatement, isLabeledStatement
  isVariableDeclarator, isArrowFunctionExpression, isExpressionStatement
  isReturnStatement, arrowFunctionExpression, callExpression
} = babel_types
{set_props} = import '@fink/js-interop/reflect.fnk'
{undefined} = import '@fink/js-interop/nullish.fnk'
{is_empty} = import '@fink/std-lib/iter.fnk'
{wrap_with_comment_loc} = import '../lang/comments/init.fnk'

{lets, assign, undef} = import './types.fnk'


get_body = fn path: path.get 'body'



consume_all = fold: undefined



simple = fn body, sl=false:
  match body:
    isBlockStatement ?:
      [stmnt, ...rest] = get_body body

      match rest:
        is_empty ?:
          # e.g. fn arg: match ...: ...
          match {sl, stmnt}:
            {sl: true, stmnt: isLabeledStatement ?}:
              stmnt.node.body
            # TODO:
            # {sl: true, stmnt: isIfStatement ?}:
            #   body.node
            else:
              simple stmnt
        else:
          body.node
    else:
      body.node



last_expressions = fn path:
  match path:
    isDoExpression ?:
      body = get_body path
      [...last_expressions body]

    isBlockStatement ?:
      body = get_body path
      [..., last] = body
      match last:
        isExpressionStatement ?:
          [last]
        else:
          [...last_expressions last]

    isLabeledStatement ?:
      body = get_body path

      # TODO: don't use mutable obj
      items = []
      body.traverse
        rec:
          LabeledStatement: fn nested_match:
            nested_match.skip _

          BreakStatement: fn brk:
            last = brk.getSibling brk.key - 1
            # TODO: don't add throw expr
            match last.node:
              {expression: {operator: 'throw'}}:
                last.replaceWith
                  expressionStatement last.node.expression
                brk.remove _
              else:
                # TODO: don't use mutation
                items.push last
            undefined
      items

    else:
      # isTryStatement
      block = path.get'block'
      handler = path.get 'handler'
      body = get_body handler
      list:
        ...last_expressions block
        ...last_expressions body



replace_with_return = fn path:
  pipe last_expressions path:
    map expr:
      match expr:
        {node: {expression: {operator: 'throw'}}}:
          expr.replaceWith
            wrap_with_comment_loc
              expressionStatement expr.node.expression
              expr.node.expression
        else:
          expr.replaceWith
            wrap_with_comment_loc
              returnStatement expr.node.expression
              expr.node.expression

      # TODO: no need for e.g. breaks after a return
      sibl = expr.getSibling expr.key + 1
      match {sibl}:
        {sibl: {}}:
          sibl.remove _

    consume_all



replace_with_assign = fn target, path:
  id = path.parentPath.scope.generateUidIdentifier 'do_result'
  #TODO: don't mutate
  set_props target.node, {init: id}

  # TODO: needs loc
  target.parentPath.insertBefore lets id
  target.parentPath.insertBefore simple get_body path
  target.parentPath.insertAfter assign id, undef _

  pipe last_expressions path:
    map expr:
      expr.replaceWith
        wrap_with_comment_loc
          assignmentExpression '=', id, expr.node.expression
          expr.node.expression

    consume_all



transform_do_expr = fn path:
  {parentPath: parent} = path

  match parent:
    isVariableDeclarator ?:
      replace_with_assign parent, path

    isArrowFunctionExpression ?:
      body = get_body path

      set_props parent.node, {body: simple body, true}

      replace_with_return path

    isExpressionStatement ?:
      # this is used e.g. for conditional at the module level
      parent.replaceWith
        get_body path

    isReturnStatement ?:
      body = get_body path

      parent.replaceWith
        simple body, true

      replace_with_return path

    else:
      # e.g.
      # fn:
      #   foo = match:
      #      spam:
      #        shrub
      #        ni
      #   foo
      arrow = arrowFunctionExpression [], path.node
      path.replaceWith
        callExpression arrow, []

  undefined
