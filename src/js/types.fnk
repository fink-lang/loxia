babe_types = import '@babel/types'
{
  variableDeclaration, variableDeclarator
  nullLiteral, booleanLiteral, identifier, expressionStatement
  logicalExpression, binaryExpression, unaryExpression, assignmentExpression
} = babe_types

{is_empty} = import '@fink/std-lib/iter.fnk'

{escape_ident} = import './identifier.fnk'



wrap = fn larix_node, js_node:
  {...js_node, loc: larix_node.loc}



typof = fn value: unaryExpression 'typeof', value


and_ = fn left, ...rest:
  match rest:
    is_empty ?:
      left
    else:
      logicalExpression '&&', left, and_ ...rest


neq = fn left, right: binaryExpression '!==', left, right

eq = fn left, right: binaryExpression '===', left, right

undef = fn: identifier 'undefined'


false_ = fn: booleanLiteral false


not_nullish = fn value:
  not_null = neq value, nullLiteral _
  not_undef = neq value, undef _
  and_ not_undef, not_null


ident = fn name, ctx:
  identifier escape_ident name, ctx



unique_ident = fn name, ctx:
  {unique_id, ident_prefix} = ctx
  js = ident '${ident_prefix}${name}_${unique_id}', ctx
  [js, {...ctx, unique_id: unique_id + 1}]



raw_str = fn value:
  rec:
    type: 'StringLiteral'
    value
    extra: rec:
      raw: '"${value}"'
      rawValue: value


consts = fn left, init:
  variableDeclaration
    'const'
    [variableDeclarator left, init]


lets = fn left, init:
  variableDeclaration
    'let'
    [variableDeclarator left, init]


assign = fn left, right:
  expressionStatement
    assignmentExpression '=', left, right
