babel_types = import '@babel/types'
{identifier} = babel_types

{update_value} = import '../ir/context.fnk'



set_js = fn id, js, ctx:
  update_value id, {js}, ctx


set_js2 = fn [, , [id], {loc}], js, ctx:
  update_value id, {js: {...js, loc}}, ctx



get_js = fn id, {values}:
  {(id): val} = values
  match val:
    {refs: ? > 1}:
      #  rec:
      #    ...identifier id
      #    loc: val.js.loc
      identifier id

    {js: ?}:
      val.js

    else:
      identifier id


add_runtime_requirement = fn func, {runtime, ...ctx}:
  {...ctx, runtime: {...runtime, (func): true}}


get_js_literal = fn id, ctx:
  # TODO: inlining should be handled at optimization level in ir
  {values: {(id): {js=get_js id, ctx}}} = ctx
  js



add = fn name, transformer: fn {transformers, ...ctx}:
  next_transformers = rec:
    ...transformers
    (name): transformer

  {transformers: next_transformers, ...ctx}



get_transformer = fn [name], {transformers}:
  {(name): transform} = transformers
  transform
