{update_value, get_value} = import '../ir/context.fnk'
{ident} = import './identifier/init.fnk'



set_js = fn id, js, ctx:
  update_value id, {js}, ctx


set_js2 = fn [{loc}, [id]], js, ctx:
  update_value id, {js: {...js, loc}}, ctx


with_loc = fn {loc}, expr:
  {...expr, loc}


get_js = fn id, ctx:
  val = get_value id, ctx
  match val:
    {ignore_refs: true}:  with_loc id, val.js
    {refs: ? > 1}: ident id
    {js: ?}: with_loc id, val.js
    else: ident id


add_runtime_requirement = fn func, {runtime, ...ctx}:
  {...ctx, runtime: {...runtime, (func): true}}


get_js_literal = fn id, ctx:
  # TODO: inlining should be handled at optimization level in ir
  {js=get_js id, ctx} = get_value id, ctx
  js




add = fn name, transformer: fn {transformers, ...ctx}:
  next_transformers = rec:
    ...transformers
    (name): transformer

  {transformers: next_transformers, ...ctx}



get_transformer = fn [{f: name}], {transformers}:
  {(name): transform} = transformers
  transform
