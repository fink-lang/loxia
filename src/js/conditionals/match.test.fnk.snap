// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`match compiles match with ref 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    const x_0 = 123;
    ret_0 = [1, x_0, x_0];
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo];
    break ret_0;
  }

  ret_0 = [3, foo];
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 2`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    const x_0 = 123;
    ret_0 = [1, x_0, x_0];
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    const y_0 = 45678;
    ret_0 = [2, foo, y_0, y_0];
    break ret_0;
  }

  ret_0 = [3, foo, z];
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 3`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    const x_0 = 123;
    ret_0 = [1, x_0, x_0];
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    const y_0 = 45678;
    ret_0 = [2, foo, y_0, y_0];
    break ret_0;
  }

  const z_0 = 1234;
  ret_0 = [3, foo, z_0, z_0];
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 4`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    const x_0 = 123;
    ret_0 = [1, x_0, x_0];
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo, 45678];
    break ret_0;
  }

  const z_0 = 1234;
  ret_0 = [3, foo, z_0, z_0];
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles nested match 1`] = `
"const test_0 = () => {
  /* istanbul ignore else */
  if (foo === bar) {
    let ret_2;

    ret_2: {
      /* istanbul ignore else */
      if (spam === shrub) {
        ret_2 = ni;
        break ret_2;
      }
    }

    const result_1 = ret_2;
    return bar;
  }
};

export const test = test_0;"
`;

exports[`match compiles without else 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub === 123) {
    ret_0 = spam;
    break ret_0;
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match iterables matches spread 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub[0] === 1) {
    /* istanbul ignore else */
    if ([...shrub.slice(1)].reverse()[0] === 3) {
      ret_0 = foo;
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if ([...shrub].reverse()[0] === 4) {
    ret_0 = foo;
    break ret_0;
  }

  const rtail_0 = [...shrub.slice(1)].reverse();

  /* istanbul ignore else */
  if (shrub[0] === 5) {
    const spread_0 = [...rtail_0.slice(1)].reverse();

    /* istanbul ignore else */
    if (rtail_0[0] === 9) {
      /* istanbul ignore else */
      if (spread_0[0] === 6) {
        /* istanbul ignore else */
        if (spread_0[1] === 7) {
          ret_0 = foo;
          break ret_0;
        }
      }
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match iterables matches value assertions 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (true === !foo[0]) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (undefined !== foo[0]) {
    ret_0 = true;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === foo[0] > 123) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === foo[0]()) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === foo[0].is_foo()) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === is_foo(foo[0])) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo[0] === 1) {
    /* istanbul ignore else */
    if (true === is_empty([...[...foo.slice(1)].reverse().slice(1)].reverse())) {
      ret_0 = ni;
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (foo[0] === 1) {
    /* istanbul ignore else */
    if (true === 1 < length([...[...foo.slice(1)].reverse().slice(1)].reverse())) {
      ret_0 = ni;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match iterables matches values 1`] = `
"let ret_0;

ret_0: {
  const tail_9 = shrub.slice(1);

  /* istanbul ignore else */
  if (shrub[0] === 1) {
    /* istanbul ignore else */
    if (shrub[1] === 2) {
      /* istanbul ignore else */
      if (shrub[2][0] === ni) {
        ret_0 = ni;
        break ret_0;
      }
    }
  }

  const tail_6 = shrub.slice(1);
  const itm_11 = shrub[1];

  /* istanbul ignore else */
  if (shrub[0] === 1) {
    /* istanbul ignore else */
    if (itm_11[0] === 2) {
      /* istanbul ignore else */
      if (itm_11[1] === 3) {
        /* istanbul ignore else */
        if (shrub[2] === 4) {
          ret_0 = bar;
          break ret_0;
        }
      }
    }
  }

  const tail_0 = shrub.slice(1);
  const itm_1 = shrub[1];

  /* istanbul ignore else */
  if (shrub[0] === 1) {
    const itm_7 = itm_1[1];

    /* istanbul ignore else */
    if (itm_1[0] === 2) {
      /* istanbul ignore else */
      if (itm_7[0] === 3) {
        const tail_1 = tail_0.slice(1);
        const itm_2 = shrub[2];

        /* istanbul ignore else */
        if (itm_7[1] === 4) {
          /* istanbul ignore else */
          if (itm_2[0] === 5) {
            /* istanbul ignore else */
            if (itm_2[1] === 6) {
              /* istanbul ignore else */
              if (shrub[3] === 7) {
                ret_0 = spam;
                break ret_0;
              }
            }
          }
        }
      }
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match iterables matches with ignored items 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub[0] === 1) {
    /* istanbul ignore else */
    if (shrub[2] === 2) {
      ret_0 = foo;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match matches simple values 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub === 123) {
    ret_0 = spam;
    break ret_0;
  }

  ret_0 = shrub;
  break ret_0;
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match matches value assertions 1`] = `
"let ret_0;

ret_0: {
  const value_0 = 123;

  /* istanbul ignore else */
  if (true === !value_0) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === value_0 > 123) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === value_0()) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === shrub(value_0)) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (undefined !== value_0) {
    ret_0 = true;
    break ret_0;
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match records matches calculated props 1`] = `
"let ret_0;

ret_0: {
  const itm_0 = shrub?.[a];

  /* istanbul ignore else */
  if (itm_0?.b === b) {
    /* istanbul ignore else */
    if (itm_0?.c === c) {
      ret_0 = ni;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match records matches member expr keys 1`] = `
"let ret_0;

ret_0: {
  const itm_0 = shrub?.foo;

  /* istanbul ignore else */
  if (shrub?.foo?.bar?.spam === ham) {
    ret_0 = spam;
    break ret_0;
  }

  /* istanbul ignore else */
  if (shrub?.foo?.bar?.spam?.ham?.ni === nu) {
    ret_0 = ham;
    break ret_0;
  }

  /* istanbul ignore else */
  if (itm_0?.bar?.spam?.ham?.ni === nu) {
    /* istanbul ignore else */
    if (itm_0?.spam === spam) {
      ret_0 = ham;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match records matches props 1`] = `
"let ret_0;

ret_0: {
  const itm_0 = shrub?.ni;

  /* istanbul ignore else */
  if (shrub?.foo === foo) {
    /* istanbul ignore else */
    if (shrub?.bar === bar) {
      ret_0 = ni;
      break ret_0;
    }
  }

  const itm_13 = shrub?.ni;

  /* istanbul ignore else */
  if (shrub?.foo === 4) {
    /* istanbul ignore else */
    if (itm_13?.na === na) {
      /* istanbul ignore else */
      if (itm_13?.nu === nu) {
        ret_0 = spam + ni;
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (shrub?.foo === 1) {
    /* istanbul ignore else */
    if (shrub?.foo?.bar === \`spam\`) {
      /* istanbul ignore else */
      if (shrub?.shrub?.na === \`nu\`) {
        ret_0 = ni;
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (shrub?.ni?.len === 1) {
    /* istanbul ignore else */
    if (shrub?.na?.len === 1) {
      ret_0 = na;
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (itm_0[0] === foo) {
    /* istanbul ignore else */
    if (itm_0[1] === 1234) {
      ret_0 = na;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match records matches spread 1`] = `
"let ret_0;

ret_0: {
  const {
    [foo]: _foo,
    ...spread_0
  } = shrub;

  /* istanbul ignore else */
  if (spread_0?.bar === bar) {
    /* istanbul ignore else */
    if (spread_0?.spam === spam) {
      ret_0 = ni;
      break ret_0;
    }
  }
}

const mex_0 = ret_0;
export const ;"
`;

exports[`match records matches value assertions 1`] = `
"let ret_0;

ret_0: {
  const key_1 = \`spam\`;
  const key_2 = \`spam\`;

  /* istanbul ignore else */
  if (true === !foo?.spam) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === foo?.spam > 123) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === (foo?.spam)()) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === (foo?.spam).is_foo()) {
    ret_0 = ni;
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === is_foo(foo?.spam)) {
    ret_0 = ni;
    break ret_0;
  }

  const {
    spam: _key_2,
    ...spread_1
  } = foo;

  /* istanbul ignore else */
  if (foo?.spam === spam) {
    /* istanbul ignore else */
    if (true === is_empty(spread_1)) {
      ret_0 = ni;
      break ret_0;
    }
  }

  const {
    spam: _key_1,
    ...spread_0
  } = foo;

  /* istanbul ignore else */
  if (foo?.spam === spam) {
    /* istanbul ignore else */
    if (true === _in_(\`foo\`, spread_0)) {
      ret_0 = ni;
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (undefined !== foo?.spam) {
    ret_0 = true;
    break ret_0;
  }
}

const mex_0 = ret_0;
export const ;"
`;
