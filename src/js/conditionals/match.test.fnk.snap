// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`match compiles match with ref 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    ret_0 = [1, 123, 123];

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo];

    /* istanbul ignore next */
    break ret_0;
  }

  ret_0 = [3, foo];

  /* istanbul ignore next */
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 2`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    ret_0 = [1, 123, 123];

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo, 45678, 45678];

    /* istanbul ignore next */
    break ret_0;
  }

  ret_0 = [3, foo, z];

  /* istanbul ignore next */
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 3`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    ret_0 = [1, 123, 123];

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo, 45678, 45678];

    /* istanbul ignore next */
    break ret_0;
  }

  ret_0 = [3, foo, 1234, 1234];

  /* istanbul ignore next */
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles match with ref 4`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (foo === 1) {
    ret_0 = [1, 123, 123];

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (foo === 2) {
    ret_0 = [2, foo, 45678];

    /* istanbul ignore next */
    break ret_0;
  }

  ret_0 = [3, foo, 1234, 1234];

  /* istanbul ignore next */
  break ret_0;
}

const spam_0 = ret_0;
export const spam = spam_0;"
`;

exports[`match compiles nested match 1`] = `
"const test_0 = () => {
  /* istanbul ignore else */
  if (foo === bar) {
    let ret_1;

    ret_1: {
      /* istanbul ignore else */
      if (spam === shrub) {
        ret_1 = ni;

        /* istanbul ignore next */
        break ret_1;
      }
    }

    const result_1 = ret_1;
    return bar;
  }

  /* istanbul ignore next */
  return;
};

export const test = test_0;"
`;

exports[`match compiles without else 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub === 123) {
    ret_0 = spam;

    /* istanbul ignore next */
    break ret_0;
  }
}

const mex_0 = ret_0;"
`;

exports[`match handles scoping 1`] = `
"const test_0 = (foo_1, bar_0) => {
  /* istanbul ignore else */
  if (foo_1 === bar_0) {
    return foo_1;
  }

  /* istanbul ignore else */
  if (foo_1 === spam) {
    const foo_2 = bar_0 * 2;
    return [foo_2, bar_0, foo_2];
  }

  /* istanbul ignore next */
  return;
};

export const foo = nanu,
      test = test_0;"
`;

exports[`match iterables handles non iterables 1`] = `
"import { _in_ } from \\"@fink/js-interop/runtime.js\\";
const hdm_0 = args[0];
const expr_0 = undefined === hdm_0 ? false : hdm_0;
const tail_0 = args.slice(1);
let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (expr_0 === false) {
    ret_0 = [out, ctx];

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (null != expr_0) {
    /* istanbul ignore else */
    if (true === _in_(expr_0[0], [1, 2])) {
      const result_1 = foo(tail_0, expr_0);
      ret_0 = result_1;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != expr_0) {
    const itm_0 = expr_0[2];

    /* istanbul ignore else */
    if (null != itm_0) {
      const val_0 = foo(itm_0[0], ctx);

      /* istanbul ignore else */
      if (true === val_0) {
        const result_0 = foo(expr_0, tail_0);
        ret_0 = result_0;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }
}

const mex_1 = ret_0;"
`;

exports[`match iterables matches spread 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 1) {
      /* istanbul ignore else */
      if (shrub.at(-1) === 3) {
        ret_0 = foo;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub.at(-1) === 4) {
      ret_0 = foo;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 5) {
      /* istanbul ignore else */
      if (null != shrub.slice(1)) {
        /* istanbul ignore else */
        if (shrub[1] === 6) {
          /* istanbul ignore else */
          if (shrub[2] === 7) {
            ret_0 = foo;

            /* istanbul ignore next */
            break ret_0;
          }
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match iterables matches value assertions 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (true === !foo[0]) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (undefined !== foo[0]) {
      ret_0 = true;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (true === foo[0] > 123) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_7 = foo[0]();

    /* istanbul ignore else */
    if (true === val_7) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_6 = foo[0].is_foo();

    /* istanbul ignore else */
    if (true === val_6) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_5 = is_foo(foo[0]);

    /* istanbul ignore else */
    if (true === val_5) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_4 = is_foo(foo[0], bar);

    /* istanbul ignore else */
    if (true === val_4) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (foo[0] === 1) {
      const val_3 = is_empty(foo.slice(1));

      /* istanbul ignore else */
      if (true === val_3) {
        ret_0 = ni;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (foo[0] === 1) {
      const right_0 = length(foo.slice(1));

      /* istanbul ignore else */
      if (true === 1 < right_0) {
        ret_0 = ni;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match iterables matches values 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 1) {
      /* istanbul ignore else */
      if (shrub[1] === 2) {
        const itm_17 = shrub[2];

        /* istanbul ignore else */
        if (null != itm_17) {
          /* istanbul ignore else */
          if (itm_17[0] === ni) {
            ret_0 = ni;

            /* istanbul ignore next */
            break ret_0;
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 1) {
      const itm_11 = shrub[1];

      /* istanbul ignore else */
      if (null != itm_11) {
        /* istanbul ignore else */
        if (itm_11[0] === 2) {
          /* istanbul ignore else */
          if (itm_11[1] === 3) {
            /* istanbul ignore else */
            if (shrub[2] === 4) {
              ret_0 = bar;

              /* istanbul ignore next */
              break ret_0;
            }
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 1) {
      const itm_1 = shrub[1];

      /* istanbul ignore else */
      if (null != itm_1) {
        /* istanbul ignore else */
        if (itm_1[0] === 2) {
          const itm_3 = itm_1[1];

          /* istanbul ignore else */
          if (null != itm_3) {
            /* istanbul ignore else */
            if (itm_3[0] === 3) {
              /* istanbul ignore else */
              if (itm_3[1] === 4) {
                const itm_6 = shrub[2];

                /* istanbul ignore else */
                if (null != itm_6) {
                  /* istanbul ignore else */
                  if (itm_6[0] === 5) {
                    /* istanbul ignore else */
                    if (itm_6[1] === 6) {
                      /* istanbul ignore else */
                      if (shrub[3] === 7) {
                        ret_0 = spam;

                        /* istanbul ignore next */
                        break ret_0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match iterables matches with ignored items 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub[0] === 1) {
      /* istanbul ignore else */
      if (shrub[2] === 2) {
        ret_0 = foo;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match matches simple values 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (shrub === 123) {
    ret_0 = spam;

    /* istanbul ignore next */
    break ret_0;
  }

  ret_0 = shrub;

  /* istanbul ignore next */
  break ret_0;
}

const mex_0 = ret_0;"
`;

exports[`match matches value assertions 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (true === !123) {
    ret_0 = ni;

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (true === 123 > 123) {
    ret_0 = ni;

    /* istanbul ignore next */
    break ret_0;
  }

  const val_1 = 123();

  /* istanbul ignore else */
  if (true === val_1) {
    ret_0 = ni;

    /* istanbul ignore next */
    break ret_0;
  }

  const val_0 = shrub(123);

  /* istanbul ignore else */
  if (true === val_0) {
    ret_0 = ni;

    /* istanbul ignore next */
    break ret_0;
  }

  /* istanbul ignore else */
  if (undefined !== 123) {
    ret_0 = true;

    /* istanbul ignore next */
    break ret_0;
  }
}

const mex_0 = ret_0;"
`;

exports[`match records matches calculated props 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    const itm_0 = shrub[a];

    /* istanbul ignore else */
    if (null != itm_0) {
      /* istanbul ignore else */
      if (itm_0.b === b) {
        /* istanbul ignore else */
        if (itm_0.c === c) {
          ret_0 = ni;

          /* istanbul ignore next */
          break ret_0;
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match records matches member expr keys 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    const itm_11 = shrub.foo;

    /* istanbul ignore else */
    if (null != itm_11) {
      const itm_12 = itm_11.bar;

      /* istanbul ignore else */
      if (null != itm_12) {
        /* istanbul ignore else */
        if (itm_12.spam === ham) {
          ret_0 = spam;

          /* istanbul ignore next */
          break ret_0;
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    const itm_6 = shrub.foo;

    /* istanbul ignore else */
    if (null != itm_6) {
      const itm_7 = itm_6.bar;

      /* istanbul ignore else */
      if (null != itm_7) {
        const itm_8 = itm_7.spam;

        /* istanbul ignore else */
        if (null != itm_8) {
          const itm_9 = itm_8.ham;

          /* istanbul ignore else */
          if (null != itm_9) {
            /* istanbul ignore else */
            if (itm_9.ni === nu) {
              ret_0 = ham;

              /* istanbul ignore next */
              break ret_0;
            }
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    const itm_0 = shrub.foo;

    /* istanbul ignore else */
    if (null != itm_0) {
      const itm_1 = itm_0.bar;

      /* istanbul ignore else */
      if (null != itm_1) {
        const itm_2 = itm_1.spam;

        /* istanbul ignore else */
        if (null != itm_2) {
          const itm_3 = itm_2.ham;

          /* istanbul ignore else */
          if (null != itm_3) {
            /* istanbul ignore else */
            if (itm_3.ni === nu) {
              /* istanbul ignore else */
              if (itm_0.spam === spam) {
                ret_0 = ham;

                /* istanbul ignore next */
                break ret_0;
              }
            }
          }
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match records matches props 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub.foo === foo) {
      /* istanbul ignore else */
      if (shrub.bar === bar) {
        ret_0 = ni;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub.foo === 4) {
      const itm_13 = shrub.ni;

      /* istanbul ignore else */
      if (null != itm_13) {
        /* istanbul ignore else */
        if (itm_13.na === na) {
          /* istanbul ignore else */
          if (itm_13.nu === nu) {
            ret_0 = spam + ni;

            /* istanbul ignore next */
            break ret_0;
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (shrub.foo === 1) {
      const itm_8 = shrub.foo;

      /* istanbul ignore else */
      if (null != itm_8) {
        /* istanbul ignore else */
        if (itm_8.bar === \`spam\`) {
          const itm_10 = shrub.shrub;

          /* istanbul ignore else */
          if (null != itm_10) {
            /* istanbul ignore else */
            if (itm_10.na === \`nu\`) {
              ret_0 = ni;

              /* istanbul ignore next */
              break ret_0;
            }
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    const itm_3 = shrub.ni;

    /* istanbul ignore else */
    if (null != itm_3) {
      /* istanbul ignore else */
      if (itm_3.len === 1) {
        const itm_5 = shrub.na;

        /* istanbul ignore else */
        if (null != itm_5) {
          /* istanbul ignore else */
          if (itm_5.len === 1) {
            ret_0 = na;

            /* istanbul ignore next */
            break ret_0;
          }
        }
      }
    }
  }

  /* istanbul ignore else */
  if (null != shrub) {
    const itm_0 = shrub.ni;

    /* istanbul ignore else */
    if (null != itm_0) {
      /* istanbul ignore else */
      if (itm_0[0] === foo) {
        /* istanbul ignore else */
        if (itm_0[1] === 1234) {
          ret_0 = na;

          /* istanbul ignore next */
          break ret_0;
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match records matches spread 1`] = `
"let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != shrub) {
    /* istanbul ignore else */
    if (undefined !== shrub[foo]) {
      const {
        [foo]: _foo,
        ...spread_0
      } = shrub;

      /* istanbul ignore else */
      if (null != spread_0) {
        /* istanbul ignore else */
        if (spread_0.bar === bar) {
          /* istanbul ignore else */
          if (spread_0.spam === spam) {
            ret_0 = ni;

            /* istanbul ignore next */
            break ret_0;
          }
        }
      }
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`match records matches value assertions 1`] = `
"import { _in_ } from \\"@fink/js-interop/runtime.js\\";
let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (true === !foo.spam) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (true === foo.spam > 123) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_6 = foo.spam();

    /* istanbul ignore else */
    if (true === val_6) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_5 = foo.spam.is_foo();

    /* istanbul ignore else */
    if (true === val_5) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const val_4 = is_foo(foo.spam);

    /* istanbul ignore else */
    if (true === val_4) {
      ret_0 = ni;

      /* istanbul ignore next */
      break ret_0;
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const key_2 = \`spam\`;

    /* istanbul ignore else */
    if (foo.spam === spam) {
      const {
        spam: _key_2,
        ...spread_1
      } = foo;
      const val_3 = is_empty(spread_1);

      /* istanbul ignore else */
      if (true === val_3) {
        ret_0 = ni;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    const key_1 = \`spam\`;

    /* istanbul ignore else */
    if (foo.spam === spam) {
      const {
        spam: _key_1,
        ...spread_0
      } = foo;

      /* istanbul ignore else */
      if (true === _in_(\`foo\`, spread_0)) {
        ret_0 = ni;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != foo) {
    /* istanbul ignore else */
    if (undefined !== foo.spam) {
      ret_0 = true;

      /* istanbul ignore next */
      break ret_0;
    }
  }
}

const mex_0 = ret_0;"
`;

exports[`optimizations uses destructured tuples 1`] = `
"const foo_0 = [1, 2];
let ret_0;

ret_0: {
  /* istanbul ignore else */
  if (null != foo_0) {
    /* istanbul ignore else */
    if (1 === 1) {
      /* istanbul ignore else */
      if (2 === 1) {
        ret_0 = bar;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }

  /* istanbul ignore else */
  if (null != foo_0) {
    /* istanbul ignore else */
    if (1 === 1) {
      /* istanbul ignore else */
      if (2 === 2) {
        ret_0 = spam;

        /* istanbul ignore next */
        break ret_0;
      }
    }
  }
}

const shrub_0 = ret_0;
export const foo = foo_0,
      shrub = shrub_0;"
`;
