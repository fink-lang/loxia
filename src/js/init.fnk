{reverse} = import '@fink/std-lib/iter.fnk'

{init_ctx, update_value} = import '../ir/context.fnk'

{replace_idents} = import './identifier/init.fnk'

{add_module, transfrom_module} = import './module/init.fnk'
{add_import} = import './module/import.fnk'

{add_number} = import './literals/number.fnk'
{add_string} = import './literals/string.fnk'
{add_list} = import './literals/list.fnk'
{add_record} = import './literals/record.fnk'

{add_conditionals} = import './conditionals/init.fnk'

{add_logical} = import './logical/init.fnk'
{add_in} = import './logical/in.fnk'

{add_arithmitic} = import './arithmitic/init.fnk'

{add_comparison} = import './comparison/init.fnk'

{add_funcs} = import './func/init.fnk'
{add_calls} = import './call/call.fnk'

{add_jsx} = import './jsx/init.fnk'

{add_async} = import './async/init.fnk'

{inc_ref} = import '../ir/context.fnk'


add_transformers = fn ctx:
  pipe ctx:
    add_module
    add_import
    add_number
    add_string
    add_list
    add_record
    add_in
    add_logical
    add_comparison
    add_arithmitic
    add_async
    add_funcs
    add_conditionals
    add_calls
    add_jsx



prepare_rets = fn [expr=false, ...exprs], ctx:
  match expr:
    false:
      ctx

    [{f: 'ac'}]:
      [{args: [cont_id]}, res_ids] = expr
      next_ctx = update_value cont_id, {res_ids}, ctx
      prepare_rets exprs, next_ctx

    else:
      prepare_rets exprs, ctx



prepare_exports = fn [expr=false, ...exprs], ctx, rec_id:
  match expr:
    false:
      ctx

    [{f: 'mod'}]:
      [{args: [next_rec_id]}] = expr
      prepare_exports exprs, ctx, next_rec_id

    [{f:'rec_s'}, [{i: rec_id.i}]]:
      [{args: [next_rec_id, , val_id]}] = expr
      ref_ctx = update_value next_rec_id, {export: true}, ctx
      next_ctx = inc_ref val_id, ref_ctx
      prepare_exports exprs, next_ctx, next_rec_id

    else:
      prepare_exports exprs, ctx, rec_id



prepare_imports = fn [expr=false, ...exprs], ctx:
  match expr:
    false:
      ctx

    [{f: 'imp'}]:
      [{args: [sr_id]}] = expr
      next_ctx = update_value sr_id, {refs: 1}, ctx
      prepare_imports exprs, next_ctx

    else:
      prepare_imports exprs, ctx



prepare_non_inlinable = fn [expr=false, ...exprs], ctx:
  match expr:
    false:
      ctx

    [{f: 'af'}]:
      [, [res_id]] = expr
      next_ctx = update_value res_id, {inline: false}, ctx
      prepare_non_inlinable exprs, next_ctx

    [{f: 'jxe'}]:
      [{args: [elem_id]}] = expr
      next_ctx = update_value elem_id, {inline: false}, ctx
      prepare_non_inlinable exprs, next_ctx

    [{f: ? in ['fn', 'cn']}]:
      [{args: [, body]}] = expr
      prepare_non_inlinable [...body, ...exprs], ctx

    else:
      prepare_non_inlinable exprs, ctx



transform_ir = fn input_exprs, options:
  exprs = replace_idents input_exprs
  rev_expr = reverse exprs

  ctx = pipe options:
    init_ctx exprs, ?
    prepare_rets rev_expr, ?
    prepare_imports rev_expr, ?
    prepare_exports rev_expr, ?
    prepare_non_inlinable rev_expr, ?
    add_transformers ?

  transfrom_module exprs, ctx



