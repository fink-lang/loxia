babel_types = import '@babel/types'
{
  doExpression, blockStatement, isAssignmentExpression, expressionStatement
  variableDeclaration, variableDeclarator
} = babel_types
{length} = import '@fink/std-lib/iter.fnk'

{add, any} = import '../context.fnk'
{wrap_with_comment_loc} = import '../comments/init.fnk'
{transform, map_with_ctx, collect_with_ctx} = import '../transform.fnk'



block_statement = fn expr, ctx:
  [st, next_ctx] = transform expr, ctx

  js = match st:
    isAssignmentExpression ?:
      wrap_with_comment_loc
        variableDeclaration
          'const'
          [variableDeclarator st.left, st.right]
        expr

    else:
      wrap_with_comment_loc
        expressionStatement st
        expr

  [js, next_ctx]


exprs_block = fn exprs, ctx:
  pipe exprs:
    map_with_ctx block_statement
    collect_with_ctx ctx


transform_block = fn node, ctx:
  {exprs} = node

  match exprs:
    1 == length ?:
      [expr] = exprs
      transform expr, ctx
    else:
      [js_exprs, next_ctx] = exprs_block exprs, ctx
      js = doExpression blockStatement js_exprs
      [js, next_ctx]



add_block = fn ctx:
  pipe ctx:
    add 'block', any, transform_block

