types = import '@babel/types'
{templateLiteral, taggedTemplateExpression, templateElement} = types

{rx, replace_all} = import '@fink/std-lib/regex.fnk'

{add, get_js, set_js, set_js2} = import '../context.fnk'




transform_str = fn expr, ctx:
  [, [value], [res_id], {loc}] = expr
  raw = replace_all
    value
    rx'\\([\s\S])|([`])'
    '\\$1$2'

  js = templateLiteral
    list:
      rec:
        ...templateElement {raw}
        loc
    []
  set_js res_id, js, ctx



split_exprs = fn [part=false, ...parts], ctx, isq=true, quasis=[], exprs=[]:
  match part:
    false: [quasis, exprs]
    else:
      js = get_js part, ctx
      match true:
       isq:
          [elem] = js.quasis
          split_exprs parts, ctx, false, [...quasis, elem], exprs
        else:
          split_exprs parts, ctx, true, quasis, [...exprs, js]



transform_template = fn expr, ctx:
  [ , parts] = expr
  [quasis, exprs] = split_exprs parts, ctx
  js = templateLiteral quasis, exprs
  set_js2 expr, js, ctx



transform_tagged_template = fn expr, ctx:
  [ , [tag_id, ...parts]] = expr
  tag = get_js tag_id, ctx
  [quasis, exprs] = split_exprs parts, ctx
  tl = templateLiteral quasis, exprs
  js = taggedTemplateExpression tag, tl
  set_js2 expr, js, ctx




add_string = fn ctx:
  pipe ctx:
    add 'str', transform_str
    add 'strt', transform_template
    add 'strtt', transform_tagged_template

