types = import '@babel/types'
{numericLiteral} = types

{parse_int, parse_float} = import '@fink/std-lib/num.js'

{add, set_js} = import '../context.fnk'



transform_int = fn expr, ctx:
  [, [value], [result_id]] = expr
  # TODO parse_int does not parse 0[bxo].+ nor 1_000
  val = parse_int value
  js = rec:
    ...numericLiteral val
    extra: {rawValue: val, raw: value}

  set_js result_id, js, ctx


transform_float = fn expr, ctx:
  [, [value], [result_id]] = expr
  js = numericLiteral parse_float value
  set_js result_id, js, ctx



add_number = fn ctx:
  pipe ctx:
    add 'int', transform_int
    add 'float', transform_float

