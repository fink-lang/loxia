types = import '@babel/types'
{
  objectExpression, objectProperty, objectPattern
  memberExpression, identifier, optionalMemberExpression
  spreadElement, restElement, variableDeclaration
  variableDeclarator, stringLiteral
} = types
{map} = import '@fink/std-lib/iter.fnk'

{inc_ref} = import '../../ir/context.fnk'
{is_js_ident} = import '../identifier/init.fnk'
{add, get_js, get_js_literal, set_js} = import '../context.fnk'



transform_rec = fn expr, ctx:
  [ , , [result_id]] = expr
  js = objectExpression []
  set_js result_id, js, ctx



props_or_spread = fn obj:
  match obj:
    {type: 'ObjectExpression'}:
      obj.properties
    else:
      [spreadElement obj]



trandform_rec_set = fn expr, ctx:
  [ , [rec_id, key_id, val_id], [result_id]] = expr
  props = props_or_spread get_js rec_id, ctx
  key = get_js key_id, ctx
  val = get_js val_id, ctx

  prop = match key:
    {type: 'TemplateLiteral', quasis: [?, ?]}:
      objectProperty key, val, true

    {type: 'TemplateLiteral', quasis: [{value: {raw: is_js_ident ?}}]}:
      {quasis: [{value: {raw: value}}]} = key
      objectProperty
        identifier value
        val

    {type: 'TemplateLiteral'}:
      {quasis: [{value: {raw: value}}]} = key
      # TODO: needs unescaping
      objectProperty
        stringLiteral value
        val

    else:
      objectProperty key, val, true

  js = objectExpression [...props, prop]
  set_js result_id, js, ctx




transform_rec_get = fn expr, ctx:
  [op , [rec_id, key_id] , [result_id]] = expr
  rec_js = get_js rec_id, ctx
  key = get_js_literal key_id, ctx

  [computed, final_key] = match key:
    {type: 'TemplateLiteral', quasis: [?, ?]}:
      [true, key]

    {type: 'TemplateLiteral', quasis: [{value: {raw: is_js_ident ?}}]}:
      {quasis: [{value: {raw: value}}]} = key
      [false, identifier value]

    else:
      [true, key]

  js = match op:
    'rec_go': optionalMemberExpression rec_js, final_key, computed, true
    else: memberExpression rec_js, final_key, computed

  set_js result_id, js, ctx



transform_rec_del_keys = fn expr, ctx:
  [ , [rec_id, ...key_ids] , [result_id]] = expr
  rec_js = get_js rec_id, ctx

  ignored_props = pipe key_ids:
    map fn key_id:
      key = get_js_literal key_id, ctx
      val = identifier '_${key_id}'
      match key:
        {type: 'TemplateLiteral', quasis: [?, ?]}:
          objectProperty key, val, true

        {type: 'TemplateLiteral', quasis: [{value: {raw: is_js_ident ?}}]}:
          {quasis: [{value: {raw: value}}]} = key
          objectProperty
            identifier value
            val

        {type: 'TemplateLiteral'}:
          {quasis: [{value: {raw: value}}]} = key
          # TODO: needs unescaping
          objectProperty
            stringLiteral value
            val

        else:
          objectProperty key, val, true

    [...?]

  js = variableDeclaration 'const', list:
      variableDeclarator
        objectPattern [...ignored_props, restElement identifier result_id]
        rec_js

  next_ctx = inc_ref result_id, ctx
  set_js result_id, js, next_ctx



transform_rec_merge = fn expr, ctx:
  [ , [rec1_id, rec2_id] , [result_id]] = expr
  props1 = props_or_spread get_js rec1_id, ctx
  props2 = props_or_spread get_js rec2_id, ctx
  js = objectExpression [...props1, ...props2]
  set_js result_id, js, ctx




add_record = fn ctx:
  pipe ctx:
    add 'rec', transform_rec
    add 'rec_g', transform_rec_get
    add 'rec_go', transform_rec_get
    add 'rec_s', trandform_rec_set
    add 'rec_d', transform_rec_del_keys
    add 'rec_m', transform_rec_merge

