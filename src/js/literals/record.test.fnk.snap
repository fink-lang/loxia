// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`record compiles calculated props 1`] = `
"const foo_0 = {
  spam: 456,
  [\`spam-\${ham}\`]: \`ni\`
};
export const foo = foo_0;"
`;

exports[`record compiles idents that are not js prop-names 1`] = `
"const foo_0 = {
  foo: bar,
  π: 3.12,
  ƒ: \`fink\`,
  \\"foo-bar\\": spam
};
export const foo = foo_0;"
`;

exports[`record compiles key:val 1`] = `
"const foo_0 = {
  a: 1,
  b: 123,
  \\"c-d-e\\": cde
};
export const foo = foo_0;"
`;

exports[`record compiles key:val 2`] = `
"const obj7_0 = {
  a: 123,
  b: 123 && 123 && 1345,
  c: () => {
    return 134;
  }
};
export const obj7 = obj7_0;"
`;

exports[`record compiles member expr as keys 1`] = `
"const foo_0 = { ...bar,
  spam: {
    ham: {
      ni: \`ni\`
    }
  },
  na: 1234,
  ...nu
};
export const foo = foo_0;"
`;

exports[`record compiles member expr as keys 2`] = `
"const foo_0 = { ...bar,
  spam: {
    ham: {
      ni: {
        na: \`ni\`
      }
    }
  },
  ...nu
};
export const foo = foo_0;"
`;

exports[`record compiles shorthand 1`] = `
"const foo_0 = {
  bar: bar,
  π: π,
  ƒ: ƒ,
  \\"foo-bar\\": fooᜭbar
};
export const foo = foo_0;"
`;

exports[`record compiles shorthand 2`] = `
"const foo_0 = {
  a: a,
  \\"delete\\": ˆdelete,
  true: true,
  false: false
};
export const foo = foo_0;"
`;

exports[`record compiles shorthand 3`] = `
"const str_0 = \`foo\`;
const foo_0 = {
  [str_0]: str_0
};
export const foo = foo_0;"
`;

exports[`record compiles simple 1`] = `
"const foo_0 = {};
export const foo = foo_0;"
`;

exports[`record compiles spread 1`] = `
"const foo_0 = {
  a: a,
  b: b,
  ...c
};
const bar_0 = { ...foo_0,
  ...ni
};
const spam_0 = { ...ham,
  ni: ni
};
const ni_0 = { ...na,
  ...nu
};
export const foo = foo_0,
      bar = bar_0,
      spam = spam_0,
      ni = ni_0;"
`;

exports[`unpacking record compiles computed keys 1`] = `
"const out_0 = [foo[\`n i\`], foo[ni], foo[\`foo\${bar}\`].c];
export const out = out_0;"
`;

exports[`unpacking record compiles defaults 1`] = `
"const hdm_0 = foo.a;
const hdm_1 = foo.b;
const val_0 = foo.ni;
const out_0 = [undefined === hdm_0 ? 1 : hdm_0, undefined === hdm_1 ? 2 : hdm_1, val_0.c, val_0.d];
export const out = out_0;"
`;

exports[`unpacking record compiles empty 1`] = `
"const key_1 = \`bar\`;
const {
  foo: _key_0,
  bar: _key_1,
  ...shrub_0
} = foo;
const out_0 = [foo.bar, shrub_0];
export const out = out_0;"
`;

exports[`unpacking record compiles member expr as keys 1`] = `
"const key_0 = \`spam\`;
const {
  spam: _key_0,
  ...rest_0
} = foo;
const out_0 = [foo.spam.ham.ni, rest_0];
export const out = out_0;"
`;

exports[`unpacking record compiles member expr as keys 2`] = `
"const key_0 = \`spam\`;
const val_2 = foo.spam.ham.ni;
const {
  spam: _key_0,
  ...rest_0
} = foo;
const out_0 = [val_2.ni, val_2.foo.bar, rest_0];
export const out = out_0;"
`;

exports[`unpacking record compiles member expr as keys 3`] = `
"const key_0 = \`foo-bar\`;
const val_2 = foo[\`foo-bar\`][\`spam-ham\`].ni;
const {
  \\"foo-bar\\": _key_0,
  ...rest_0
} = foo;
const out_0 = [val_2.ni, val_2.foo.bar, rest_0];
export const out = out_0;"
`;

exports[`unpacking record compiles non js idents 1`] = `
"const out_0 = [spam.foo, spam.π, spam.ƒ, spam[\`delete\`]];
export const out = out_0;"
`;

exports[`unpacking record compiles simple 1`] = `
"const out_0 = [ni.a, ni.b, ni.c];
export const out = out_0;"
`;

exports[`unpacking record compiles spread 1`] = `
"const key_0 = \`a\`;
const key_1 = \`foo-\${bar}\`;
const {
  a: _key_0,
  [\`foo-\${bar}\`]: _key_1,
  ...c_0
} = foo;
const out_0 = [foo.a, foo[\`foo-\${bar}\`], c_0];
export const out = out_0;"
`;

exports[`unpacking record destructuress tpls 1`] = `
"const val_0 = shrub.foo;
const out_0 = [val_0[1], val_0[0]];
export const out = out_0;"
`;
