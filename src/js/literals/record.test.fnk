{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'
{fink2js} = import '../../testing/generate.fnk'


describe 'record', fn:
  it 'compiles simple', fn:
    expect
      fink2js 'foo = {}'
      to_match_snapshot


  it 'compiles shorthand', fn:
    expect
      fink2js '
        foo = {bar, π, ƒ, foo-bar}
      '
      to_match_snapshot

    expect
      fink2js 'foo = {a, delete, true, false}'
      to_match_snapshot

    expect
      fink2js "foo = {'foo'}"
      to_match_snapshot


  it 'compiles spread', fn:
    expect
      fink2js '
        foo = {a, b, ...c}
        bar = {...foo, ...ni}
        spam = {...ham, ni}
        ni = {...na, ...nu}
      '
      to_match_snapshot


  it 'compiles key:val', fn:
    expect
      fink2js "foo = {a: 1, b: 123, 'c-d-e': cde}"
      to_match_snapshot

    expect
      fink2js '
        obj7 = {a: 123, b: 123 and 123 and 1345, c: fn a, b: 134}
      '
      to_match_snapshot


  it 'compiles calculated props', fn:
    expect
      fink2js "
        foo = rec:
          'spam': 456
          'spam-\${ham}': 'ni'
        "
      to_match_snapshot


  it 'compiles idents that are not js prop-names', fn:
    expect
      fink2js "
        foo = rec:
          foo: bar
          π: 3.12,
          ƒ: 'fink'
          foo-bar: spam
        "
      to_match_snapshot


  it 'compiles member expr as keys', fn:
    expect
      fink2js "foo = {...bar, spam.ham.ni: 'ni', na: 1234, ...nu}"
      to_match_snapshot

    expect
      fink2js "foo = {...bar, spam.ham: {ni.na: 'ni'}, ...nu}"
      to_match_snapshot



describe 'unpacking record', fn:
  it 'compiles simple', fn:
    expect
      fink2js '
        {a, b, c: cc} = ni
        out = [a, b, cc]
      '
      to_match_snapshot


  it 'compiles non js idents', fn:
    expect
      fink2js '
        {foo, π, ƒ, delete} = spam
        out = [foo, π, ƒ, delete]
      '
      to_match_snapshot


  it 'compiles computed keys', fn:
    expect
      fink2js "
        {'n i': a, (ni): b, 'foo\${bar}': {c}} = foo
        out = [a, b, c]
      "
      to_match_snapshot


  it 'destructuress tpls', fn:
    expect
      fink2js '
        {foo: [bar, spam]} = shrub
        out = [spam, bar]
      '
      to_match_snapshot


  it 'compiles spread', fn:
    expect
      fink2js '
        {a, b, ...c} = foo
        out = [a, b, c]
      '
      to_match_snapshot


  it 'compiles empty', fn:
    expect
      fink2js '
        {foo: _ , bar, ...shrub} = foo
        out = [bar, shrub]
      '
      to_match_snapshot


  it 'compiles defaults', fn:
    expect
      fink2js '
        {a=1, b: bb=2, ni: {c, d}} = foo
        out = [a, bb, c, d]
      '
      to_match_snapshot


  it 'compiles member expr as keys', fn:
    expect
      fink2js '
        {spam.ham.ni: ni, ...rest} = foo
        out = [ni, rest]
      '
      to_match_snapshot

    expect
      fink2js '
        {spam.ham.ni: {ni: nu, foo.bar: bar}, ...rest} = foo
        out = [nu, bar, rest]
      '
      to_match_snapshot

    expect
      fink2js '
        {foo-bar.spam-ham.ni: {ni: nu, foo.bar: bar}, ...rest} = foo
        out = [nu, bar, rest]
      '
      to_match_snapshot

