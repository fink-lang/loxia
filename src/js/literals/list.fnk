types = import '@babel/types'
{
  arrayExpression, spreadElement, memberExpression, numericLiteral
  callExpression, identifier
} = types

{null} = import '@fink/js-interop/nullish.fnk'

{add, get_js, set_js2, with_loc} = import '../context.fnk'



set_tail_of = fn items_id, tail_of, {tails={}, ...ctx}:
  {...ctx, tails: {...tails, (items_id.i): tail_of}}


get_tail_of = fn items_id, {tails={}}:
  {(items_id.i): tail_of=[items_id, 0]} = tails
  tail_of



transform_empty_list = fn expr, ctx:
  js = arrayExpression []
  set_js2 expr, js, ctx



elems_or_spread = fn expr:
  match expr:
    {type: 'ArrayExpression'}:
      expr.elements
    else:
      [with_loc expr, spreadElement expr]



transform_list_append = fn expr, ctx:
  [{args: [items_id, val_id]}] = expr
  elems = elems_or_spread get_js items_id, ctx

  elem = match val_id:
    {i: '_'}: null
    else: get_js val_id, ctx

  js = arrayExpression [...elems, elem]
  set_js2 expr, js, ctx



transform_list_chain = fn expr, ctx:
  [{args: [items1_id, items2_id]}] = expr
  elems1 = elems_or_spread get_js items1_id, ctx
  elems2 = elems_or_spread get_js items2_id, ctx

  js =  arrayExpression [...elems1, ...elems2]
  set_js2 expr, js, ctx



transform_list_head = fn expr, ctx:
  [{args: [items_id]}] = expr
  [tail_src, idx] = get_tail_of items_id, ctx
  arr = get_js tail_src, ctx
  js_idx = numericLiteral idx
  js = memberExpression arr, js_idx, true
  set_js2 expr, js, ctx



transform_list_reverse = fn expr, ctx:
  [{args: [items_id]}] = expr
  arr = get_js items_id, ctx

  js = callExpression
    memberExpression
      arrayExpression [spreadElement arr]
      identifier 'reverse'
    []
  set_js2 expr, js, ctx



transform_list_tail = fn expr, ctx:
  [{args: [items_id]}, [result_id]] = expr

  items = get_js items_id, ctx
  [tail_src, idx] = get_tail_of items_id, ctx

  js = callExpression
    memberExpression items, identifier 'slice'
    [numericLiteral 1]

  pipe ctx:
    set_tail_of result_id, [tail_src, idx + 1], ?
    set_js2 expr, js, ?




add_list = fn ctx:
  pipe ctx:
    add 'lst', transform_empty_list
    add 'lst_a', transform_list_append
    add 'lst_c', transform_list_chain
    add 'lst_h', transform_list_head
    add 'lst_t', transform_list_tail
    add 'lst_r', transform_list_reverse

