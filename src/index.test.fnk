{generate} = import '.'
{fink2js} = import './testing'
{describe, it, expect, to_equal, to_match_snapshot} = import '@fink/jest'


describe 'module types', fn:
  code = `
    import 'foobar'
    foo = import 'shrub'
    {bar: spam, ni} = import 'ni'

    # reserved words import
    {default: dflt, if} = import 'es6-module'

    shrub = ni
    # reserved export
    case = ni

    default = shrub
    `

  it 'compiles to mjs', fn:
    expect
      fink2js code,  {module_type: 'mjs'}
      to_match_snapshot


  it 'compiles to cjs', fn:
    expect
      fink2js code, {module_type: 'cjs'}
      to_match_snapshot



describe 'errors', fn:
  it 'handles parse errors', fn:
    {errors: [{error}]} = fink2js `
      foo = [`

    expect
      error
      to_equal `
        test.fnk:1:7
        1| foo = [
                  ^

        Expected ',' or indented new line or ']'.
        `

  it 'errors with code snippet', fn:
    {errors: [{error}]} = fink2js `
      foo = bar
      123 = foo
      shrub = ni`

    expect
      error
      to_equal `
        test.fnk:2:0
        1| foo = bar
        2| 123 = foo
           ^
        3| shrub = ni

        Unable to transform 'assign ='.
        `

  it 'errors with bad babel options', fn:
    {errors: [{message}]} = fink2js
      `foo = bar`
      {use_babel_conf: true, sourceMaps: 'foobar'}

    expect
      message
      to_equal `.sourceMaps must be a boolean, "inline", "both", or undefined`


  it 'errors when provided with unknown tokens', fn:
    {errors: [{error}]} = generate
      dict:
        type: 'test'
        op: 'foobar'
        loc: dict:
          start: {pos: 0, line: 1, column: 0}
          end: {pos: 9, line: 1, column: 9}

      'test.fnk', 'foobar'

    expect
      error
      to_equal `
        test.fnk:1:0
        1| foobar
           ^

        Unable to transform 'test foobar'.
        `
