{only, skip, describe, it, expect, to_equal, to_match_snapshot} = import '@fink/jest/test.fnk'
{slice} = import '@fink/std-lib/str.fnk'

{generate} = import './generate.fnk'
{fink2js} = import './testing/generate.fnk'



describe 'module types', fn:
  code = "
    import 'foobar'
    foo = import 'shrub'
    {bar: spam, ni} = import 'ni'

    # reserved words import
    {default: dflt, if} = import 'es6-module'

    shrub = ni
    # reserved export
    case = ni

    default = shrub
    "

  it 'compiles to mjs', fn:
    expect
      fink2js code,  {module_type: 'mjs'}
      to_match_snapshot


  it 'compiles to cjs', fn:
    expect
      fink2js code, {module_type: 'cjs'}
      to_match_snapshot



only.describe 'source maps', fn:
  code = "
    foo = 12345
    bar = 'foo'
    ham = 'foo: \${foo} bar:\${bar}'
    ni = spam + foo-bar
    a = [1, 'ni']
    [b, c] = a
    out = [a, b, c]
  "
  js = fink2js code,  {module_type: 'mjs', source_maps: 'inline'}

  it 'compiles to mjs', fn:
    expect
      js
      to_match_snapshot



skip.describe 'errors', fn:
  it 'handles parse errors', fn:
    {errors: [{error}]} = fink2js '
      foo = ['

    expect
      error
      to_equal '
        test.fnk:1:7
        1| foo = [
                  ^

        Expected `,` or indented(>=1) new line or `]`.
        '

  it 'errors with code snippet', fn:
    {errors: [{message}]} = fink2js '
      foo = bar
      123 = foo
      shrub = ni'

    expect
      message
      to_equal '
        test.fnk:2:0
        1| foo = bar
        2| 123 = foo
           ^
        3| shrub = ni

        Unable to transform `assign =`.

        TypeError: Property left of AssignmentExpression expected node to be of a type ["LVal"] but instead got "NumericLiteral"
        '

  it 'errors with bad babel options', fn:
    {errors: [{message}]} = fink2js
      'foo = bar'
      {babel: {foobar: 'spam'}}

    expect
      slice message, 0, 24
      to_equal 'Unknown option: .foobar.'


  it 'errors when provided with unknown tokens', fn:
    {errors: [{message}]} = generate
      rec:
        type: 'test'
        op: 'foobar'
        loc: rec:
          start: {pos: 0, line: 1, column: 0}
          end: {pos: 9, line: 1, column: 9}

      'test.fnk', 'foobar'

    expect
      message
      to_equal '
        test.fnk:1:0
        1| foobar
           ^

        Unable to transform `test foobar`.

        Unknown expression.
        '
